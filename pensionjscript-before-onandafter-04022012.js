<!-- hide this script tag's contents from old browsers

//check if the control can accept focus 
window.onload = initFormFieldFocus;
function initFormFieldFocus(){
	focusField(document.getElementById("mssd")); //Enter month of the service start date
	//	focusField(document.getElementById("mb"));
	return true;
}

function focusField(target)
{
	// The form elements that will be tested. Anything with a dot indicates the "type" attribute of the element
	var formElements = ["input.text", "input.checkbox", "input.radio", "select", "textarea"];
	var selectedNode = null;

	// IE's selection method
	if (typeof document.selection != "undefined" && document.selection != null && typeof window.opera == "undefined")
	{
		var theSelection = document.selection;
		var textRange = document.selection.createRange();

		selectedNode = textRange.parentElement();
	}
	// W3 selection method. Currently only Mozilla & Safari support it. However, neither of them support ranges inside form objects, so this part is redundant. Merely included in case they decide to include support in the future
	else if (typeof window.getSelection != "undefined")
	{
		var theSelection = window.getSelection();

		// The Safari way to get the node that a selection starts in
		if (typeof theSelection.baseNode != "undefined")
		{
			selectedNode = theSelection.baseNode;
		}
		// The Mozilla way to get the node that a selection starts in
		else if (typeof theSelection.getRangeAt != "undefined" && theSelection.rangeCount > 0)
		{
			selectedNode = theSelection.getRangeAt(0).startContainer;
		}
	}

	// If a selected node was found above, check whether it's a selection inside one of the specified form element types
	if (selectedNode != null)
	{
		for (var i = 0; i < formElements.length; i++)
		{
			if (selectedNode.nodeName.toLowerCase() == formElements[i].replace(/([^.]*)\..*/, "$1"))
			{
				return false;
			}
		}
	}

	var forms = document.forms;

	// Do a check of each form element on the page. If one of them has a value, do not focus
	for (var i = 0; i < forms.length; i++)
	{
		var formElements = forms[i];

		for (var j = 0; j < formElements.length; j++)
		{
			if (formElements[j].getAttribute("type") == "checkbox" || formElements[j].getAttribute("type") == "radio")
			{
				if (formElements[j].checked != formElements[j].defaultChecked)
				{
					return false;
				}
			}
			else
			{
				if (typeof formElements[j].defaultValue != "undefined" && formElements[j].value != formElements[j].defaultValue)
				{
					return false;
				}
			}
		}
	}

	// If no form elements were found to be focused -- or with values -- go ahead and focus
	//target.focus(); 
	//Can't move focus to the control because it is invisible, not enabled, or of a type that does not accept the focus.
	
	try{
		target.focus();
		//element.focus();
		//blah blah whatever
	}
	catch(er){
		//ignore and continue, or do something else
	}
	
	return false;
}


// Â© 2018 Treasury Computer Services All Rights Reserved
// pensionjscripts.js 
// RetirementEstimator.html
// 
// 10-26-2006 @author WJL CSVC
// http://www.mass.gov/treasury/retcalbene.htm
// http://www.mass.gov/treasury/retestimator.html
// Massachusetts State Board of Retirement Estimate Retirement Benefits
//1) Enter your date of birth (mm/dd/yyyy) *
//2) Enter your projected date of retirement (mm/dd/yyyy) *
//3) Select a group number 1, 2 or 4, default to group number 1*
//4) Are you a military veteran?*
//5) Enter your estimated total number of years of creditable service,
//6) Enter your estimated average three highest consecutive years of salary 
//7) OPTIONAL: Option C, 1)select calculate by Date of Birth or 2)select by Age and month
//Age of your retirement date will be (Automatic calculated)

/** 5-30-2017 New calculator programming updates for the new law changes on 4/2/2012
 * These are the new changes for the Pension calculator for Members-In-Service Hired ON OR AFTER April 02, 2012
 * 
 * 5) Enter your estimated total number of years of creditable service.
 *    a) if years of services less than 30 years then it will use the first set of Option A age factor percentage chart
 *		  (YearOfService < 30) 
 *		  //ARRY = new Array(32) //1st set of Option A array
 *
 *	  b) if (years of services >= 30 years and Age >= 50) then use the second set of Option A age factor Array percentage chart 
 *       //ARRY_30plusYOS_Group1 = new Array(32) //2nd set of Option A array
 *       if (YearOfService >= 30) and Group 1,
 *
 * 		 //ARRY_30plusYOS_Group2 = new Array(32)
 *       if (YearOfService >= 30) and Group 2, then Age + 5 
 *  	 if Group 2 and Member's age >= 55 then age + 5. Example: 55 + 5 = 60
 *
 * 		 //ARRY_30plusYOS_Group4 = new Array(32)
 *		 if (YearOfService >= 30) and Group 4, then Age + 10	
 *  	 if Group 4 and Member's age >= 50 then age + 10. Example: 50 + 10 = 60  
 *
 * 6) Enter your estimated average (five) highest consecutive years of salary
 *    
 **/
 
 /** 3/19/2018 updates
  * 
  * Combine both before, on and after April 2, 2012 formulars into one Javacripts file
  * add new requrement desgin code 1) Enter your date of Enter Service Start date (mm/dd/yyyy) *

	//1) Enter your date of Enter Service Start date (mm/dd/yyyy) *
	//2) Enter your date of birth (mm/dd/yyyy) *
	//3) Enter your projected date of retirement (mm/dd/yyyy) *
	//4) Select a group number 1, 2 or 4, default to group number 1*
	//5) Are you a military veteran?*
	//6) Enter your estimated total number of years of creditable service,
	//7) Enter your estimated average three or five highest consecutive years of salary 
	//8) OPTIONAL: Option C, 1)select calculate by Date of Birth or 2)select by Age and month
	//Age of your retirement date will be (Automatic calculated)
    **/

//for Option A and C factor 
//1st set of calculator for hired before 04/02/2012
//3/19/2018 modify by WJL
function CreateMultiArrayC_before_04022012(){
//This function creates and fills the array for Option A and C factor
	// Create Option A Age factor array
	ARRY = new Array(30)
	ARRY[36]="360.0005"
	ARRY[37]="370.0006"
	ARRY[38]="380.0007"
	ARRY[39]="390.0008"
	ARRY[40]="400.0009"
	ARRY[41]="410.0010"
	ARRY[42]="420.0020"
	ARRY[43]="430.0030"
	ARRY[44]="440.0040"
	ARRY[45]="450.0050"
	ARRY[46]="460.0060"
	ARRY[47]="470.0070"
	ARRY[48]="480.0080"
	ARRY[49]="490.0090"
	ARRY[50]="500.0100"
	ARRY[51]="510.0110"
	ARRY[52]="520.0120"
	ARRY[53]="530.0130"
	ARRY[54]="540.0140"
	ARRY[55]="550.0150"
	ARRY[56]="560.0160"
	ARRY[57]="570.0170"
	ARRY[58]="580.0180"
	ARRY[59]="590.0190"
	ARRY[60]="600.0200"
	ARRY[61]="610.0210"
	ARRY[62]="620.0220"
	ARRY[63]="630.0230"
	ARRY[64]="640.0240"
	ARRY[65]="650.0250"
	// for option A
	
	
 // Create option C beneficiary's Age factor.  Last update: 9-12-2006
 //3/29/2018 add the age 1-5 with 00000
aryC = new Array(90)
 
aryC[1]="1.0.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.000 0.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.000 0.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.000 0.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000     0     0     0     0     0     0     0     0     0     0     0     0     "
aryC[2]="2.0.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.000 0.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.000 0.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.000 0.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000     0     0     0     0     0     0     0     0     0     0     0     0     "
aryC[3]="3.0.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.000 0.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.000 0.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.000 0.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000     0     0     0     0     0     0     0     0     0     0     0     0     "
aryC[4]="4.0.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.000 0.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.000 0.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.000 0.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000     0     0     0     0     0     0     0     0     0     0     0     0     "
aryC[5]="5.0.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.000 0.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.000 0.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.000 0.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000.00000     0     0     0     0     0     0     0     0     0     0     0     0     "
aryC[6]="6.0.99520.99530.99540.99550.99560.99570.99580.99590.996 0.99610.99620.99630.99640.99650.99660.99670.99670.99680.99690.997 0.997 0.99710.99720.99730.99730.99740.99740.99750.99760.99760.99770.99770.99780.99780.99790.99790.998 0.998 0.99810.99810.99820.99820.99830.99830.99830.99840.99840.99850.99850.99860.99860.99860.99870.99870.99880.99880.99890.99890.999 0.999 0.99910.99910.99920.99920.99930.99930.99940.99950.99960.99970.99980.99991     1     1     1     1     1     1     1     1     1     1     1     1     "
aryC[7]="7.0.99490.995 0.99510.99530.99540.99550.99560.99570.99580.99590.996 0.99610.99620.99630.99640.99650.99660.99670.99670.99680.99690.997 0.99710.99710.99720.99730.99730.99740.99750.99750.99760.99760.99770.99770.99780.99790.99790.998 0.998 0.99810.99810.99820.99820.99830.99830.99830.99840.99840.99850.99850.99860.99860.99870.99870.99880.99880.99890.99890.99890.999 0.999 0.99910.99920.99920.99930.99930.99940.99950.99960.99970.99980.99991     1     1     1     1     1     1     1     1     1     1     1     1     "
 aryC[8]="8.0.99460.99470.99480.99490.99510.99520.99530.99540.99550.99560.99570.99590.996 0.99610.99620.99630.99640.99650.99660.99660.99670.99680.99690.997 0.99710.99710.99720.99730.99730.99740.99750.99750.99760.99770.99770.99780.99780.99790.99790.998 0.998 0.99810.99810.99820.99820.99830.99830.99840.99840.99850.99850.99860.99860.99870.99870.99880.99880.99890.99890.999 0.999 0.99910.99910.99920.99930.99930.99940.99950.99960.99970.99980.99991     1     1     1     1     1     1     1     1     1     1     1     1     "
 aryC[9]="9.0.99420.99430.99450.99460.99470.99480.995 0.99510.99520.99530.99540.99560.99570.99580.99590.996 0.99610.99620.99630.99640.99650.99660.99670.99680.99690.997 0.997 0.99710.99720.99730.99730.99740.99750.99750.99760.99770.99770.99780.99780.99790.998 0.998 0.99810.99810.99820.99820.99830.99830.99840.99840.99850.99850.99860.99860.99870.99870.99880.99880.99890.99890.999 0.999 0.99910.99920.99920.99930.99940.99940.99950.99960.99970.99991     1     1     1     1     1     1     1     1     1     1     1     1     "
aryC[10]="100.99380.99390.994 0.99420.99430.99440.99460.99470.99490.995 0.99510.99520.99540.99550.99560.99570.99590.996 0.99610.99620.99630.99640.99650.99660.99670.99680.99690.99690.997 0.99710.99720.99730.99730.99740.99750.99750.99760.99770.99770.99780.99790.99790.998 0.998 0.99810.99810.99820.99830.99830.99840.99840.99850.99850.99860.99860.99870.99870.99880.99880.99890.99890.999 0.99910.99910.99920.99930.99930.99940.99950.99960.99970.99981     1     1     1     1     1     1     1     1     1     1     1     1     "
aryC[11]="110.99330.99340.99360.99370.99390.994 0.99420.99430.99450.99460.99470.99490.995 0.99520.99530.99540.99550.99570.99580.99590.996 0.99610.99620.99640.99650.99660.99670.99670.99680.99690.997 0.99710.99720.99720.99730.99740.99750.99750.99760.99770.99770.99780.99790.99790.998 0.99810.99810.99820.99820.99830.99830.99840.99850.99850.99860.99860.99870.99870.99880.99880.99890.999 0.999 0.99910.99910.99920.99930.99940.99940.99950.99960.99980.99991     1     1     1     1     1     1     1     1     1     1     1     "
aryC[12]="120.99280.993 0.99310.99330.99340.99360.99370.99390.994 0.99420.99430.99450.99460.99480.99490.99510.99520.99530.99550.99560.99570.99590.996 0.99610.99620.99630.99640.99650.99660.99670.99680.99690.997 0.99710.99720.99720.99730.99740.99750.99750.99760.99770.99780.99780.99790.99790.998 0.99810.99810.99820.99830.99830.99840.99840.99850.99850.99860.99870.99870.99880.99880.99890.999 0.999 0.99910.99920.99920.99930.99940.99950.99960.99970.99991     1     1     1     1     1     1     1     1     1     1     1     "
aryC[13]="130.99230.99240.99260.99270.99290.99310.99320.99340.99360.99370.99390.99410.99420.99440.99450.99470.99480.995 0.99510.99530.99540.99560.99570.99580.99590.99610.99620.99630.99640.99650.99660.99670.99680.99690.997 0.99710.99720.99720.99730.99740.99750.99760.99760.99770.99780.99780.99790.998 0.998 0.99810.99820.99820.99830.99840.99840.99850.99850.99860.99870.99870.99880.99880.99890.999 0.999 0.99910.99920.99930.99940.99940.99960.99970.99981     1     1     1     1     1     1     1     1     1     1     1     "
aryC[14]="140.99170.99180.992 0.99220.99240.99250.99270.99290.99310.99320.99340.99360.99380.99390.99410.99430.99440.99460.99480.99490.99510.99520.99540.99550.99560.99580.99590.996 0.99610.99630.99640.99650.99660.99670.99680.99690.997 0.99710.99720.99720.99730.99740.99750.99760.99760.99770.99780.99790.99790.998 0.99810.99810.99820.99830.99830.99840.99850.99850.99860.99870.99870.99880.99880.99890.999 0.99910.99910.99920.99930.99940.99950.99960.99980.99991     1     1     1     1     1     1     1     1     1     1     "
aryC[15]="150.99110.99120.99140.99160.99180.992 0.99210.99230.99250.99270.99290.99310.99330.99350.99370.99380.994 0.99420.99440.99450.99470.99490.995 0.99520.99530.99550.99560.99570.99590.996 0.99610.99620.99640.99650.99660.99670.99680.99690.997 0.99710.99720.99730.99730.99740.99750.99760.99770.99770.99780.99790.998 0.998 0.99810.99820.99830.99830.99840.99850.99850.99860.99870.99870.99880.99890.99890.999 0.99910.99920.99930.99940.99950.99960.99970.99991     1     1     1     1     1     1     1     1     1     1     "
aryC[16]="160.99040.99060.99080.99090.99110.99130.99150.99170.99190.99210.99230.99250.99270.99290.99310.99330.99350.99370.99390.99410.99430.99450.99460.99480.995 0.99510.99530.99540.99560.99570.99590.996 0.99610.99620.99640.99650.99660.99670.99680.99690.997 0.99710.99720.99730.99740.99750.99750.99760.99770.99780.99790.99790.998 0.99810.99820.99820.99830.99840.99840.99850.99860.99870.99870.99880.99890.999 0.999 0.99910.99920.99930.99940.99950.99970.99981     1     1     1     1     1     1     1     1     1     1     "
aryC[17]="170.98970.98990.99010.99030.99050.99070.99090.99110.99130.99150.99170.992 0.99220.99240.99260.99280.993 0.99320.99340.99360.99380.994 0.99420.99440.99460.99480.99490.99510.99520.99540.99560.99570.99580.996 0.99610.99620.99640.99650.99660.99670.99680.99690.997 0.99710.99720.99730.99740.99750.99760.99770.99770.99780.99790.998 0.99810.99810.99820.99830.99840.99840.99850.99860.99870.99870.99880.99890.999 0.99910.99920.99930.99940.99950.99960.99981     1     1     1     1     1     1     1     1     1     1     "
aryC[18]="180.98890.98910.98930.98950.98970.98990.99020.99040.99060.99080.99110.99130.99150.99180.992 0.99220.99250.99270.99290.99310.99330.99350.99380.994 0.99420.99430.99450.99470.99490.99510.99520.99540.99550.99570.99580.996 0.99610.99620.99640.99650.99660.99670.99680.99690.997 0.99720.99730.99730.99740.99750.99760.99770.99780.99790.998 0.998 0.99810.99820.99830.99840.99840.99850.99860.99870.99880.99880.99890.999 0.99910.99920.99930.99940.99960.99970.99991     1     1     1     1     1     1     1     1     1     "
aryC[19]="190.98810.98830.98850.98870.98890.98920.98940.98960.98990.99010.99040.99060.99090.99110.99130.99160.99180.99210.99230.99260.99280.993 0.99320.99350.99370.99390.99410.99430.99450.99470.99490.995 0.99520.99540.99550.99570.99580.996 0.99610.99630.99640.99650.99660.99670.99690.997 0.99710.99720.99730.99740.99750.99760.99770.99780.99790.99790.998 0.99810.99820.99830.99840.99840.99850.99860.99870.99880.99890.999 0.99910.99920.99930.99940.99950.99970.99991     1     1     1     1     1     1     1     1     1     "
aryC[20]="200.98720.98740.98760.98780.98810.98830.98860.98880.98910.98930.98960.98980.99010.99040.99060.99090.99120.99140.99170.99190.99220.99240.99270.99290.99320.99340.99360.99380.994 0.99430.99450.99460.99480.995 0.99520.99540.99550.99570.99580.996 0.99610.99630.99640.99650.99670.99680.99690.997 0.99710.99720.99730.99740.99750.99760.99770.99780.99790.998 0.99810.99820.99830.99840.99850.99850.99860.99870.99880.99890.999 0.99910.99920.99930.99950.99960.99981     1     1     1     1     1     1     1     1     1     "
aryC[21]="210.98620.98640.98670.98690.98720.98740.98770.98790.98820.98850.98870.989 0.98930.98960.98990.99010.99040.99070.991 0.99130.99150.99180.99210.99230.99260.99280.99310.99330.99360.99380.994 0.99420.99440.99460.99480.995 0.99520.99540.99550.99570.99590.996 0.99620.99630.99640.99660.99670.99680.99690.99710.99720.99730.99740.99750.99760.99770.99780.99790.998 0.99810.99820.99830.99840.99850.99860.99860.99870.99880.99890.999 0.99920.99930.99940.99960.99981     1     1     1     1     1     1     1     1     1     "
aryC[22]="220.98520.98540.98570.98590.98620.98640.98670.987 0.98730.98750.98780.98810.98840.98870.989 0.98930.98960.98990.99020.99050.99080.99110.99140.99170.992 0.99220.99250.99280.993 0.99330.99350.99370.994 0.99420.99440.99460.99480.995 0.99520.99540.99550.99570.99590.996 0.99620.99630.99650.99660.99670.99690.997 0.99710.99720.99730.99750.99760.99770.99780.99790.998 0.99810.99820.99830.99840.99850.99860.99870.99880.99890.999 0.99910.99920.99940.99950.99970.99991     1     1     1     1     1     1     1     1     "
aryC[23]="230.98410.98430.98460.98480.98510.98540.98560.98590.98620.98650.98680.98710.98750.98780.98810.98840.98870.98910.98940.98970.99  0.99030.99060.991 0.99130.99160.99180.99210.99240.99270.993 0.99320.99350.99370.99390.99420.99440.99460.99480.995 0.99520.99540.99560.99570.99590.99610.99620.99640.99650.99660.99680.99690.997 0.99720.99730.99740.99750.99760.99770.99780.998 0.99810.99820.99830.99840.99850.99860.99870.99880.99890.999 0.99920.99930.99950.99960.99991     1     1     1     1     1     1     1     1     "
aryC[24]="240.98290.98310.98340.98370.98390.98420.98450.98480.98510.98540.98570.98610.98640.98670.98710.98740.98780.98810.98850.98880.98910.98950.98980.99020.99050.99080.99110.99140.99170.992 0.99230.99260.99290.99320.99340.99370.99390.99410.99440.99460.99480.995 0.99520.99540.99560.99570.99590.99610.99620.99640.99650.99670.99680.997 0.99710.99720.99730.99750.99760.99770.99780.99790.998 0.99810.99830.99840.99850.99860.99870.99880.999 0.99910.99920.99940.99960.99981     1     1     1     1     1     1     1     1     "
aryC[25]="250.98160.98190.98210.98240.98270.983 0.98330.98360.98390.98420.98460.98490.98530.98560.986 0.98630.98670.98710.98740.98780.98820.98850.98890.98930.98960.99  0.99030.99070.991 0.99130.99160.99190.99230.99250.99280.99310.99340.99360.99390.99410.99440.99460.99480.995 0.99520.99540.99560.99580.99590.99610.99630.99640.99660.99670.99690.997 0.99710.99730.99740.99750.99770.99780.99790.998 0.99810.99820.99840.99850.99860.99870.99890.999 0.99910.99930.99950.99970.99991     1     1     1     1     1     1     1     "
aryC[26]="260.98020.98050.98080.98110.98130.98160.982 0.98230.98260.983 0.98330.98370.984 0.98440.98480.98520.98550.98590.98630.98670.98710.98750.98790.98830.98870.98910.98940.98980.99020.99050.99090.99120.99150.99190.99220.99250.99280.99310.99330.99360.99390.99410.99430.99460.99480.995 0.99520.99540.99560.99580.996 0.99610.99630.99650.99660.99680.99690.99710.99720.99730.99750.99760.99770.99790.998 0.99810.99820.99840.99850.99860.99870.99890.999 0.99920.99940.99960.99991     1     1     1     1     1     1     1     "
aryC[27]="270.97880.979 0.97930.97960.97990.98020.98050.98090.98120.98160.98190.98230.98270.98310.98350.98390.98430.98470.98510.98550.986 0.98640.98680.98720.98760.988 0.98840.98880.98920.98960.99  0.99040.99070.99110.99140.99180.99210.99240.99270.993 0.99330.99360.99380.99410.99430.99460.99480.995 0.99520.99540.99560.99580.996 0.99620.99630.99650.99670.99680.997 0.99710.99730.99740.99750.99770.99780.99790.99810.99820.99830.99850.99860.99880.99890.99910.99930.99950.99971     1     1     1     1     1     1     1     "
aryC[28]="280.97720.97740.97770.978 0.97830.97870.979 0.97930.97970.98010.98040.98080.98120.98160.98210.98250.98290.98330.98380.98420.98470.98510.98560.986 0.98650.98690.98740.98780.98820.98860.98910.98950.98990.99020.99060.991 0.99130.99170.992 0.99230.99270.993 0.99330.99350.99380.99410.99430.99460.99480.995 0.99520.99540.99560.99580.996 0.99620.99640.99650.99670.99690.997 0.99720.99730.99750.99760.99770.99790.998 0.99820.99830.99850.99860.99880.999 0.99910.99940.99960.99991     1     1     1     1     1     1     "
aryC[29]="290.97550.97570.976 0.97630.97670.977 0.97730.97770.97810.97840.97880.97920.97970.98010.98050.981 0.98140.98190.98230.98280.98330.98380.98430.98470.98520.98570.98620.98660.98710.98750.988 0.98840.98890.98930.98970.99010.99050.99090.99120.99160.992 0.99230.99260.99290.99320.99350.99380.994 0.99430.99460.99480.995 0.99520.99540.99560.99580.996 0.99620.99640.99660.99670.99690.99710.99720.99740.99750.99770.99780.998 0.99810.99830.99840.99860.99880.999 0.99920.99950.99981     1     1     1     1     1     1     "
aryC[30]="300.97360.97390.97420.97450.97490.97520.97560.97590.97630.97670.97710.97750.978 0.97840.97890.97930.97980.98030.98080.98130.98180.98230.98280.98330.98380.98430.98480.98540.98590.98630.98680.98730.98780.98820.98870.98910.98960.99  0.99040.99080.99120.99150.99190.99220.99260.99290.99320.99350.99380.994 0.99430.99450.99480.995 0.99520.99550.99570.99590.99610.99620.99640.99660.99680.99690.99710.99730.99740.99760.99780.99790.99810.99820.99840.99860.99880.999 0.99930.99960.99991     1     1     1     1     1     "
aryC[31]="310.97170.972 0.97230.97260.97290.97330.97370.974 0.97440.97480.97530.97570.97610.97660.97710.97760.97810.97860.97910.97960.98010.98070.98120.98180.98230.98290.98340.984 0.98450.985 0.98560.98610.98660.98710.98760.98810.98850.989 0.98940.98990.99030.99070.99110.99150.99180.99220.99250.99280.99320.99350.99370.994 0.99430.99450.99480.995 0.99530.99550.99570.99590.99610.99630.99650.99660.99680.997 0.99720.99730.99750.99770.99790.998 0.99820.99840.99860.99880.99910.99940.99981     1     1     1     1     1     "
aryC[32]="320.96960.96990.97020.97060.97090.97130.97160.972 0.97240.97290.97330.97370.97420.97470.97520.97570.97620.97670.97730.97780.97840.979 0.97950.98010.98070.98130.98190.98240.983 0.98360.98420.98470.98530.98580.98640.98690.98740.98790.98840.98890.98930.98980.99020.99060.991 0.99140.99180.99220.99250.99280.99320.99350.99380.994 0.99430.99460.99480.99510.99530.99550.99570.99590.99610.99630.99650.99670.99690.99710.99730.99740.99760.99780.998 0.99820.99840.99870.99890.99920.99961     1     1     1     1     1     "
aryC[33]="330.96750.96780.96810.96840.96880.96910.96950.96990.97030.97070.97120.97170.97210.97260.97310.97370.97420.97480.97530.97590.97650.97710.97770.97830.979 0.97960.98020.98080.98140.98210.98270.98330.98390.98450.98510.98560.98620.98670.98730.98780.98830.98880.98930.98970.99020.99060.991 0.99140.99180.99220.99250.99280.99320.99350.99380.99410.99430.99460.99490.99510.99530.99560.99580.996 0.99620.99640.99660.99680.997 0.99720.99740.99760.99780.998 0.99820.99840.99870.999 0.99940.99981     1     1     1     1     "
aryC[34]="340.96520.96550.96580.96610.96650.96680.96720.96760.96810.96850.969 0.96940.96990.97050.971 0.97150.97210.97270.97330.97390.97450.97510.97580.97640.97710.97770.97840.97910.97970.98040.98110.98170.98240.983 0.98360.98430.98490.98550.986 0.98660.98720.98770.98820.98870.98920.98970.99020.99060.991 0.99140.99180.99220.99250.99290.99320.99350.99380.99410.99440.99470.99490.99520.99540.99570.99590.99610.99630.99650.99670.99690.99710.99730.99760.99780.998 0.99820.99850.99880.99920.99961     1     1     1     1     "
aryC[35]="350.96270.963 0.96340.96370.96410.96440.96480.96520.96570.96610.96660.96710.96760.96810.96870.96930.96980.97040.97110.97170.97230.973 0.97370.97440.97510.97570.97650.97720.97790.97860.97930.98  0.98070.98140.98210.98280.98340.98410.98470.98530.98590.98650.98710.98770.98820.98870.98920.98970.99020.99060.99110.99150.99190.99220.99260.993 0.99330.99360.99390.99420.99450.99480.995 0.99530.99550.99580.996 0.99620.99640.99670.99690.99710.99730.99750.99780.998 0.99830.99860.999 0.99940.99991     1     1     1     "
aryC[36]="360.96010.96040.96080.96110.96150.96190.96230.96270.96310.96360.96410.96460.96510.96570.96620.96680.96740.968 0.96870.96930.97  0.97070.97140.97210.97290.97360.97440.97510.97590.97660.97740.97810.97890.97960.98040.98110.98180.98250.98320.98390.98460.98520.98590.98650.98710.98760.98820.98870.98920.98970.99020.99070.99110.99150.99190.99230.99270.993 0.99340.99370.994 0.99430.99460.99490.99520.99540.99570.99590.99610.99640.99660.99680.99710.99730.99760.99780.99810.99840.99880.99920.99971     1     1     1     "
aryC[37]="370.95740.95770.958 0.95840.95880.95910.95960.96  0.96040.96090.96140.96190.96250.963 0.96360.96420.96480.96550.96620.96680.96750.96830.969 0.96980.97050.97130.97210.97290.97370.97450.97530.97610.97690.97770.97850.97930.98010.98090.98160.98240.98310.98380.98450.98520.98580.98640.98710.98760.98820.98880.98930.98980.99030.99070.99120.99160.992 0.99240.99280.99320.99350.99380.99410.99450.99470.995 0.99530.99560.99580.99610.99630.99660.99680.99710.99730.99760.99790.99820.99860.999 0.99951     1     1     1     "
aryC[38]="380.95450.95480.95510.95550.95590.95630.95670.95710.95760.95810.95860.95910.95960.96020.96080.96140.96210.96270.96340.96410.96490.96560.96640.96720.968 0.96880.96960.97050.97130.97220.97310.97390.97480.97570.97650.97740.97820.979 0.97990.98070.98140.98220.983 0.98370.98440.98510.98580.98640.98710.98770.98830.98880.98940.98990.99040.99080.99130.99170.99210.99250.99290.99330.99360.994 0.99430.99460.99490.99520.99550.99570.996 0.99630.99650.99680.99710.99730.99760.998 0.99830.99880.99930.99991     1     1     "
aryC[39]="390.95130.95170.952 0.95240.95280.95320.95360.954 0.95450.955 0.95550.95610.95660.95720.95780.95850.95910.95980.96050.96130.962 0.96280.96360.96440.96530.96610.967 0.96790.96880.96970.97060.97150.97250.97340.97430.97520.97610.977 0.97790.97880.97960.98050.98130.98210.98290.98370.98440.98510.98580.98650.98710.98770.98830.98890.98950.99  0.99050.991 0.99140.99190.99230.99270.99310.99340.99380.99410.99450.99480.99510.99540.99570.99590.99620.99650.99680.99710.99740.99770.99810.99850.999 0.99971     1     1     "
aryC[40]="400.948 0.94840.94870.94910.94950.94990.95030.95080.95120.95170.95230.95280.95340.954 0.95460.95530.956 0.95670.95740.95820.959 0.95980.96060.96150.96230.96320.96410.96510.966 0.967 0.968 0.96890.96990.97090.97190.97290.97380.97480.97580.97670.97760.97860.97950.98030.98120.982 0.98280.98360.98440.98510.98580.98650.98720.98780.98840.989 0.98960.99010.99060.99110.99160.992 0.99240.99280.99320.99360.994 0.99430.99460.995 0.99530.99560.99590.99620.99650.99680.99710.99740.99780.99830.99880.99941     1     1     "
aryC[41]="410.94450.94480.94520.94560.946 0.94640.94680.94730.94780.94830.94880.94940.94990.95060.95120.95190.95260.95330.95410.95480.95570.95650.95740.95830.95920.96010.96110.962 0.963 0.964 0.96510.96610.96710.96820.96920.97030.97130.97240.97340.97440.97540.97640.97740.97840.97930.98020.98110.982 0.98280.98360.98440.98520.98590.98660.98730.98790.98850.98910.98970.99020.99070.99120.99170.99220.99260.993 0.99340.99380.99410.99450.99480.99520.99550.99580.99610.99650.99680.99710.99750.998 0.99850.99910.99991     1     "
aryC[42]="420.94080.94110.94150.94180.94220.94270.94310.94360.944 0.94460.94510.94570.94630.94690.94760.94820.949 0.94970.95050.95130.95210.953 0.95390.95480.95580.95670.95770.95880.95980.96090.96190.963 0.96410.96530.96640.96750.96860.96970.97080.97190.973 0.97410.97520.97620.97720.97820.97920.98010.98110.982 0.98280.98370.98450.98520.986 0.98670.98740.988 0.98870.98930.98980.99040.99090.99140.99190.99230.99280.99320.99360.994 0.99440.99470.99510.99540.99580.99610.99640.99680.99720.99770.99820.99880.99961     1     "
aryC[43]="430.93680.93710.93750.93790.93830.93870.93910.93960.94010.94060.94120.94180.94240.943 0.94370.94440.94510.94590.94670.94750.94840.94920.95020.95110.95210.95310.95420.95520.95630.95740.95860.95970.96090.96210.96320.96440.96560.96680.968 0.96920.97040.97150.97270.97380.97490.976 0.97710.97810.97910.98010.981 0.982 0.98290.98370.98450.98530.98610.98680.98750.98820.98880.98940.99  0.99060.99110.99160.99210.99250.993 0.99340.99380.99420.99460.995 0.99530.99570.99610.99650.99690.99730.99780.99850.99921     1     "
aryC[44]="440.93260.93290.93330.93360.934 0.93450.93490.93540.93590.93640.937 0.93760.93820.93880.93950.94020.941 0.94180.94260.94340.94430.94520.94620.94720.94820.94920.95030.95140.95260.95370.95490.95610.95740.95860.95990.96110.96240.96370.96490.96620.96750.96870.97  0.97120.97240.97360.97470.97590.977 0.978 0.97910.98010.98110.982 0.98290.98380.98460.98540.98620.987 0.98770.98830.989 0.98960.99020.99080.99130.99180.99230.99280.99320.99360.99410.99450.99490.99530.99570.99610.99650.997 0.99750.99810.99890.99981     "
aryC[45]="450.92810.92840.92880.92920.92960.93  0.93050.93090.93140.932 0.93250.93310.93380.93440.93510.93580.93660.93740.93820.93910.94  0.941 0.94190.943 0.944 0.94510.94620.94740.94850.94980.951 0.95230.95360.95490.95620.95750.95890.96020.96160.96290.96430.96560.967 0.96830.96960.97090.97210.97340.97460.97580.97690.978 0.97910.98010.98110.98210.983 0.98390.98480.98560.98640.98710.98790.98850.98920.98980.99040.991 0.99150.99210.99250.993 0.99350.99390.99440.99480.99520.99560.99610.99660.99710.99770.99850.99941     "
aryC[46]="460.92330.92360.924 0.92440.92480.92520.92570.92620.92670.92720.92780.92840.92910.92970.93040.93120.93190.93270.93360.93450.93540.93640.93740.93840.93950.94060.94180.943 0.94420.94550.94680.94810.94940.95080.95220.95360.95510.95650.95790.95940.96080.96230.96370.96510.96650.96790.96930.97060.97190.97320.97450.97570.97690.978 0.97910.98020.98120.98220.98320.98410.98490.98580.98660.98740.98810.98880.98940.99010.99070.99120.99180.99230.99280.99330.99380.99420.99470.99520.99560.99610.99670.99730.99810.999 1     "
aryC[47]="470.91820.91860.91890.91930.91970.92020.92060.92110.92170.92220.92280.92340.924 0.92470.92540.92620.927 0.92780.92860.92960.93050.93150.93250.93360.93470.93590.93710.93830.93960.94090.94220.94360.945 0.94640.94790.94940.95090.95240.954 0.95550.957 0.95860.96010.96170.96320.96470.96610.96760.969 0.97040.97180.97310.97440.97570.97690.97810.97920.98030.98130.98240.98330.98430.98510.986 0.98680.98760.98830.989 0.98970.99030.99090.99150.99210.99260.99310.99360.99410.99460.99510.99570.99620.99690.99760.99860.9998"
aryC[48]="480.91280.91320.91360.91390.91440.91480.91530.91580.91630.91680.91740.918 0.91870.91940.92010.92080.92160.92250.92340.92430.92530.92630.92730.92840.92960.93070.932 0.93320.93460.93590.93730.93880.94020.94170.94330.94480.94640.948 0.94960.95130.95290.95460.95620.95780.95950.96110.96270.96430.96580.96730.96880.97030.97170.973 0.97440.97570.97690.97810.97930.98040.98150.98250.98350.98450.98540.98620.98710.98780.98860.98930.99  0.99060.99120.99180.99240.993 0.99350.994 0.99460.99510.99570.99640.99710.99810.9992"
aryC[49]="490.90710.90750.90780.90820.90860.90910.90950.91  0.91060.91110.91170.91230.913 0.91370.91440.91520.916 0.91680.91770.91870.91970.92070.92180.92290.92410.92530.92650.92780.92920.93060.932 0.93350.93510.93660.93820.93990.94150.94320.94490.94670.94840.95020.95190.95370.95540.95710.95890.96060.96220.96390.96550.96710.96860.97010.97160.973 0.97440.97570.977 0.97820.97940.98060.98170.98270.98370.98470.98560.98650.98730.98810.98890.98960.99030.99090.99160.99220.99280.99330.99390.99450.99510.99580.99660.99750.9987"
aryC[50]="500.901 0.90130.90170.90210.90250.903 0.90340.90390.90450.905 0.90560.90630.90690.90760.90840.90910.91  0.91080.91170.91270.91370.91470.91580.917 0.91820.91940.92070.922 0.92340.92490.92640.92790.92950.93110.93280.93450.93630.938 0.93980.94170.94350.94530.94720.94910.95090.95280.95460.95650.95830.96010.96180.96350.96520.96690.96850.97  0.97150.973 0.97440.97580.97710.97830.97960.98070.98180.98290.98390.98490.98580.98670.98760.98840.98910.98990.99060.99120.99190.99250.99320.99380.99440.99510.99590.99690.998 "
aryC[51]="510.89450.89480.89520.89560.896 0.89650.897 0.89750.898 0.89860.89910.89980.90040.90120.90190.90270.90350.90440.90530.90630.90730.90830.90950.91060.91180.91310.91440.91580.91730.91870.92030.92190.92350.92520.92690.92870.93050.93240.93430.93620.93810.94010.94210.94410.946 0.948 0.95  0.952 0.95390.95580.95770.95960.96140.96320.965 0.96670.96830.96990.97150.973 0.97440.97580.97720.97850.97970.98090.982 0.98310.98420.98510.98610.987 0.98780.98870.98940.99020.99090.99160.99230.99290.99360.99440.99520.99610.9973"
aryC[52]="520.88760.888 0.88840.88880.88920.88960.89010.89060.89110.89170.89230.89290.89360.89430.89510.89590.89670.89760.89850.89950.90050.90160.90270.90390.90520.90650.90780.90920.91070.91220.91380.91540.91710.91890.92070.92250.92440.92640.92830.93040.93240.93450.93650.93860.94080.94290.945 0.94710.94920.95120.95330.95530.95730.95920.96110.963 0.96480.96650.96830.96990.97150.973 0.97450.976 0.97730.97870.97990.98110.98230.98340.98440.98540.98640.98730.98820.989 0.98980.99060.99130.992 0.99280.99360.99440.99540.9965"
aryC[53]="530.88030.88070.88110.88150.88190.88230.88280.88330.88390.88440.885 0.88570.88630.88710.88780.88860.88950.89040.89130.89230.89330.89440.89560.89680.898 0.89940.90070.90220.90370.90520.90690.90860.91030.91210.914 0.91590.91780.91990.92190.924 0.92620.92830.93050.93280.935 0.93720.93950.94170.944 0.94620.94840.95060.95270.95480.95690.95890.96090.96280.96460.96650.96820.96990.97160.97310.97470.97610.97750.97890.98020.98140.98260.98370.98470.98570.98670.98760.98850.98940.99020.991 0.99180.99260.99350.99450.9956"
aryC[54]="540.87260.873 0.87330.87370.87420.87460.87510.87560.87610.87670.87730.878 0.87860.87940.88010.88090.88180.88270.88360.88460.88570.88680.88790.88920.89040.89180.89320.89470.89620.89780.89940.90120.903 0.90480.90670.90870.91080.91290.915 0.91720.91940.92170.924 0.92640.92870.93110.93350.93590.93830.94060.943 0.94530.94770.94990.95220.95440.95650.95860.96060.96260.96450.96640.96820.97  0.97160.97320.97480.97630.97770.97910.98040.98160.98280.98390.985 0.986 0.987 0.988 0.98890.98970.99060.99150.99240.99340.9946"
aryC[55]="550.86440.86480.86510.86550.866 0.86640.86690.86740.86790.86850.86910.86980.87040.87120.87190.87270.87360.87450.87540.87650.87750.87860.87980.881 0.88230.88370.88510.88660.88820.88980.89150.89330.89510.897 0.899 0.90110.90320.90530.90760.90980.91220.91460.917 0.91940.92190.92440.927 0.92950.932 0.93460.93710.93960.94210.94450.947 0.94930.95170.95390.95620.95830.96040.96250.96440.96640.96820.97  0.97170.97340.975 0.97650.97790.97930.98060.98190.98310.98420.98530.98630.98730.98830.98930.99020.99120.99230.9935"
aryC[56]="560.85580.85610.85650.85690.85730.85780.85820.85880.85930.85990.86050.86110.86180.86250.86330.86410.865 0.86590.86680.86780.86890.87  0.87120.87250.87380.87520.87660.87810.87970.88140.88310.88490.88680.88880.89080.89290.89510.89730.89960.902 0.90440.90690.90940.912 0.91460.91730.91990.92260.92530.928 0.93070.93340.936 0.93870.94130.94380.94630.94880.95120.95360.95590.95810.96030.96240.96440.96640.96830.97010.97190.97350.97520.97670.97820.97960.98090.98220.98340.98450.98560.98670.98770.98880.98980.99090.9922"
aryC[57]="570.84670.84710.84740.84780.84830.84870.84920.84970.85020.85080.85140.85210.85270.85350.85420.855 0.85590.85680.85780.85880.85990.861 0.86220.86350.86480.86620.86770.86920.87080.87250.87430.87610.878 0.88  0.88210.88430.88650.88880.89120.89370.89620.89870.90140.90410.90680.90960.91240.91520.91810.92090.92380.92670.92950.93230.93510.93790.94060.94330.94590.94840.95090.95340.95580.95810.96030.96240.96450.96650.96850.97030.97210.97380.97540.977 0.97850.97990.98120.98250.98370.98490.986 0.98720.98830.98950.9908"
aryC[58]="580.83720.83750.83790.83830.83870.83920.83960.84010.84070.84130.84190.84250.84320.84390.84470.84550.84640.84730.84830.84930.85040.85150.85270.854 0.85530.85670.85820.85980.86140.86310.86490.86680.86870.87080.87290.87510.87740.87980.88220.88480.88740.89  0.89280.89560.89840.90130.90430.90730.91030.91330.91630.91940.92240.92540.92840.93140.93430.93720.94  0.94280.94550.94820.95070.95330.95570.95810.96040.96260.96470.96670.96870.97060.97240.97410.97580.97730.97880.98030.98160.98290.98410.98540.98660.98780.9892"
aryC[59]="590.82710.82750.82780.82820.82870.82910.82960.83010.83060.83120.83180.83250.83310.83390.83460.83550.83630.83720.83820.83920.84030.84150.84270.844 0.84530.84670.84820.84980.85150.85320.855 0.85690.85890.861 0.86320.86540.86780.87020.87270.87530.878 0.88080.88360.88650.88950.89250.89560.89870.90190.90510.90830.91150.91470.91790.92110.92430.92740.93050.93360.93660.93950.94240.94520.948 0.95060.95320.95570.95820.96050.96280.96490.967 0.969 0.97090.97270.97450.97610.97770.97920.98060.982 0.98330.98460.986 0.9874"
aryC[60]="600.81660.81690.81730.81770.81810.81860.81910.81960.82010.82070.82130.82190.82260.82330.82410.82490.82580.82670.82770.82870.82980.831 0.83220.83350.83480.83630.83780.83930.841 0.84280.84460.84650.84860.85070.85290.85520.85760.86010.86270.86530.86810.87090.87390.87690.88  0.88310.88630.88960.89290.89630.89970.90310.90650.90990.91330.91670.92  0.92330.92660.92990.933 0.93610.93920.94220.94510.94790.95070.95330.95590.95840.96070.963 0.96520.96730.96940.97130.97310.97480.97650.97810.97960.981 0.98250.98390.9854"
aryC[61]="610.80560.80590.80630.80670.80710.80760.808 0.80860.80910.80970.81030.81090.81160.81230.81310.81390.81480.81570.81670.81770.81880.81990.82120.82250.82380.82530.82680.82840.83010.83180.83370.83560.83770.83980.84210.84440.84690.84940.852 0.85480.85760.86060.86360.86670.86990.87320.87650.87990.88340.88690.89040.894 0.89760.90120.90480.90840.912 0.91560.91910.92250.926 0.92930.93260.93590.939 0.94210.94510.948 0.95080.95350.95610.95870.96110.96340.96560.96770.96980.97170.97350.97520.97690.97850.98  0.98160.9831"
aryC[62]="620.79410.79450.79490.79520.79570.79610.79660.79710.79760.79820.79880.79940.80010.80080.80160.80240.80330.80420.80520.80620.80730.80850.80970.811 0.81230.81380.81530.81690.81860.82040.82230.82420.82630.82850.83080.83310.83560.83820.84090.84370.84660.84960.85270.85590.85920.86260.86610.86960.87320.87690.88060.88440.88820.892 0.89580.89960.90340.90720.911 0.91470.91840.922 0.92560.929 0.93250.93580.93910.94220.94530.94830.95110.95390.95650.95910.96150.96390.96610.96820.97020.97210.974 0.97570.97740.979 0.9807"
aryC[63]="630.78220.78260.783 0.78330.78380.78420.78470.78520.78570.78630.78690.78750.78820.78890.78970.79050.79140.79230.79320.79430.79540.79650.79780.79910.80040.80190.80340.805 0.80670.80850.81040.81240.81450.81670.819 0.82140.82390.82650.82930.83210.83510.83820.84140.84470.84810.85160.85510.85880.86260.86640.87030.87420.87820.88220.88620.89020.89430.89830.90230.90630.91020.91410.91790.92170.92540.929 0.93250.936 0.93930.94260.94570.94870.95160.95440.95710.95970.96210.96450.96670.96880.97080.97270.97450.97630.978 "
aryC[64]="640.77  0.77030.77070.771 0.77150.77190.77240.77290.77340.774 0.77460.77520.77590.77660.77730.77820.779 0.77990.78090.78190.783 0.78420.78540.78670.78810.78950.791 0.79270.79440.79620.79810.80010.80220.80440.80670.80920.81170.81440.81720.82010.82310.82620.82950.83290.83640.84  0.84370.84750.85130.85530.85940.86350.86760.87180.876 0.88030.88460.88880.89310.89730.90150.90570.90980.91390.91780.92170.92560.92930.93290.93640.93990.94320.94640.94940.95240.95520.95790.96040.96290.96520.96740.96940.97140.97330.9752"
aryC[65]="650.75720.75750.75790.75830.75870.75910.75960.76010.76060.76120.76180.76240.76310.76380.76450.76530.76620.76710.76810.76910.77020.77140.77260.77390.77520.77670.77820.77980.78150.78330.78520.78730.78940.79160.79390.79640.799 0.80170.80450.80750.81060.81380.81710.82050.82410.82780.83160.83550.83950.84360.84780.85210.85640.86080.86530.86970.87420.87870.88320.88770.89220.89670.90110.90540.90970.91390.918 0.92210.926 0.92980.93350.93710.94060.944 0.94720.95030.95320.956 0.95870.96120.96360.96590.96810.97010.9722"
aryC[66]="660.744 0.74430.74470.74510.74550.74590.74640.74690.74740.74790.74850.74910.74980.75050.75130.75210.75290.75380.75480.75580.75690.75810.75930.76060.76190.76340.76490.76650.76820.77  0.77190.774 0.77610.77830.78070.78320.78580.78850.79140.79430.79750.80070.80410.80760.81130.81510.819 0.823 0.82710.83140.83570.84010.84460.84920.85390.85850.86330.868 0.87280.87750.88230.887 0.89170.89640.90090.90550.90990.91430.91850.92270.92670.93060.93440.93810.94160.945 0.94820.95130.95420.957 0.95960.96210.96440.96670.9688"
aryC[67]="670.73040.73070.73110.73140.73180.73230.73270.73320.73370.73430.73490.73550.73610.73690.73760.73840.73920.74010.74110.74210.74320.74430.74560.74680.74820.74960.75120.75280.75450.75630.75820.76020.76230.76460.767 0.76950.77210.77480.77770.78070.78390.78720.79070.79420.798 0.80180.80580.80990.81420.81860.823 0.82760.83230.837 0.84190.84680.85170.85670.86170.86670.87170.87680.88170.88670.89160.89650.90120.90590.91050.915 0.91940.92360.92770.93170.93560.93930.94280.94610.94930.95240.95530.958 0.96050.963 0.9653"
aryC[68]="680.71630.71660.71690.71730.71770.71810.71860.71910.71960.72010.72070.72130.722 0.72270.72340.72420.72510.72590.72690.72790.729 0.73010.73130.73260.734 0.73540.73690.73850.74020.742 0.74390.74590.74810.75030.75270.75520.75780.76060.76350.76660.76980.77310.77660.78020.784 0.78790.792 0.79620.80060.80510.80970.81440.81920.82420.82920.83430.83940.84460.84990.85520.86050.86580.87110.87630.88160.88680.89190.89690.90190.90670.91140.916 0.92050.92480.929 0.933 0.93690.94050.944 0.94740.95050.95350.95630.95890.9615"
aryC[69]="690.70160.70190.70230.70270.703 0.70350.70390.70440.70490.70540.706 0.70660.70730.708 0.70870.70950.71030.71120.71220.71320.71420.71530.71650.71780.71920.72060.72210.72370.72540.72720.72910.73110.73320.73550.73780.74030.743 0.74580.74870.75180.755 0.75840.76190.76560.76940.77340.77760.78190.78630.79090.79560.80050.80550.81050.81570.821 0.82640.83180.83730.84280.84840.854 0.85960.86520.87080.87630.88180.88710.89250.89770.90280.90770.91260.91730.92180.92620.93040.93440.93820.94190.94530.94850.95160.95450.9572"
aryC[70]="700.68640.68670.68710.68750.68780.68830.68870.68920.68970.69020.69080.69140.692 0.69270.69340.69420.695 0.69590.69680.69780.69890.7   0.70120.70250.70380.70520.70670.70830.71  0.71180.71360.71570.71780.72  0.72240.72490.72750.73030.73320.73630.73960.743 0.74650.75030.75420.75820.76240.76680.77130.776 0.78080.78580.79090.79620.80150.807 0.81250.81820.82390.82970.83550.84140.84730.85320.85910.865 0.87080.87660.88220.88780.89330.89870.90390.909 0.91390.91870.92320.92760.93180.93570.93950.943 0.94640.94950.9525"
aryC[71]="710.67090.67120.67150.67190.67230.67270.67310.67360.67410.67460.67510.67570.67640.677 0.67780.67850.67940.68020.68110.68210.68320.68430.68550.68670.688 0.68940.69090.69250.69420.69590.69780.69980.70190.70410.70650.709 0.71160.71440.71740.72040.72370.72710.73070.73450.73840.74250.74670.75120.75580.76060.76550.77060.77580.78120.78670.79230.79810.80390.80990.81590.822 0.82810.83430.84060.84680.853 0.85920.86530.87140.87740.88320.889 0.89470.90010.90550.91060.91560.92030.92490.92920.93330.93720.94080.94420.9474"
aryC[72]="720.65480.65510.65540.65580.65620.65660.657 0.65740.65790.65840.659 0.65960.66020.66090.66160.66230.66320.664 0.66490.66590.66690.668 0.66920.67040.67170.67310.67460.67610.67780.67950.68140.68340.68550.68770.69  0.69250.69520.69790.70090.704 0.70720.71060.71420.718 0.722 0.72610.73040.73490.73960.74440.74940.75460.76  0.76550.77110.77690.78280.78890.795 0.80130.80760.814 0.82050.827 0.83360.84020.84670.85320.85970.866 0.87230.87850.88460.89050.89630.90180.90720.91240.91730.922 0.92650.93070.93460.93830.9418"
aryC[73]="730.63820.63850.63890.63920.63960.64  0.64040.64090.64130.64180.64240.643 0.64360.64420.64490.64570.64650.64730.64820.64920.65020.65130.65240.65360.65490.65630.65780.65930.66090.66270.66450.66650.66860.67080.67310.67560.67820.68090.68390.68690.69020.69360.69720.701 0.705 0.70910.71350.718 0.72270.72760.73270.738 0.74340.749 0.75480.76070.76680.773 0.77940.78590.79240.79910.80590.81270.81960.82650.83340.84020.84710.85390.86060.86720.87370.88010.88630.89230.89810.90370.90910.91420.919 0.92360.92790.93190.9357"
aryC[74]="740.62130.62160.62190.62220.62260.623 0.62340.62380.62430.62480.62530.62590.62650.62720.62790.62860.62940.63020.63110.632 0.633 0.63410.63520.63640.63770.63910.64050.642 0.64360.64530.64720.64910.65120.65330.65560.65810.66070.66340.66630.66940.67270.67610.67970.68350.68740.69160.696 0.70050.70530.71030.71540.72070.72630.732 0.73780.74390.75010.75650.763 0.76970.77650.78340.79040.79750.80470.81190.81920.82650.83370.84090.848 0.85510.86210.86890.87550.882 0.88830.89430.90010.90570.91090.91590.92060.925 0.9291"
aryC[75]="750.60390.60420.60450.60490.60520.60560.606 0.60640.60690.60740.60790.60850.60910.60970.61040.61110.61190.61270.61360.61450.61550.61650.61760.61880.62010.62140.62280.62430.62590.62760.62940.63130.63330.63550.63780.64020.64280.64550.64840.65140.65460.658 0.66160.66540.66940.67360.67790.68250.68730.69230.69750.70290.70850.71420.72020.72640.73270.73930.74590.75280.75980.76690.77420.78160.78910.79660.80420.81180.81940.82710.83460.84210.84950.85680.864 0.87090.87770.88420.89050.89650.90220.90760.91270.91740.9219"
aryC[76]="760.58620.58650.58680.58710.58750.58780.58820.58870.58910.58960.59010.59060.59120.59180.59250.59320.594 0.59480.59560.59650.59750.59850.59960.60080.602 0.60330.60470.60620.60780.60940.61120.61310.61510.61720.61950.62180.62440.62710.62990.633 0.63610.63950.64310.64690.65080.655 0.65940.664 0.66880.67380.679 0.68440.69010.69590.702 0.70820.71470.72130.72810.73510.74230.74970.75720.76480.77260.78040.78830.79630.80430.81230.82030.82830.83610.84390.85150.859 0.86620.87330.88  0.88650.89270.89850.90410.90920.914 "
aryC[77]="770.56810.56840.56870.569 0.56930.56970.57010.57050.57090.57140.57190.57240.573 0.57360.57430.575 0.57570.57650.57730.57820.57920.58020.58120.58240.58360.58490.58620.58770.58920.59090.59260.59440.59640.59850.60070.60310.60560.60820.61110.614 0.61720.62060.62410.62780.63180.63590.64030.64490.64970.65470.65990.66540.671 0.67690.68310.68940.69590.70270.70960.71680.72410.73160.73930.74720.75520.76330.77160.77990.78830.79670.80510.81350.82180.83010.83820.84610.85390.86140.86870.87570.88240.88870.89470.90030.9055"
aryC[78]="780.54960.54990.55020.55050.55080.55120.55160.552 0.55240.55290.55330.55390.55440.555 0.55560.55630.557 0.55780.55860.55950.56040.56140.56250.56360.56480.566 0.56740.56880.57030.57190.57360.57540.57730.57940.58160.58390.58630.589 0.59170.59470.59780.60110.60460.60830.61220.61630.62070.62520.63  0.635 0.64030.64570.65140.65730.66350.66990.67650.68330.69040.69760.70510.71280.72070.72870.737 0.74540.75390.76250.77130.78  0.78890.79770.80650.81520.82380.83230.84060.84870.85650.864 0.87120.878 0.88450.89050.8962"
aryC[79]="790.53090.53110.53140.53170.532 0.53240.53270.53310.53350.534 0.53440.535 0.53550.53610.53670.53730.538 0.53880.53960.54040.54130.54230.54330.54440.54560.54680.54810.54950.551 0.55250.55420.556 0.55790.55990.562 0.56430.56670.56930.572 0.57490.578 0.58120.58470.58830.59220.59630.60060.60510.60990.61490.62010.62550.63120.63720.64330.64970.65640.66330.67040.67770.68530.69310.70120.70940.71790.72650.73530.74420.75330.76240.77160.78090.79010.79930.80840.81740.82620.83480.84320.85130.859 0.86640.87330.87990.886 "
aryC[80]="800.51180.512 0.51230.51260.51290.51320.51360.514 0.51440.51480.51530.51570.51630.51680.51740.51810.51870.51950.52030.52110.522 0.52290.52390.525 0.52610.52730.52860.52990.53140.53290.53450.53620.53810.54  0.54210.54440.54670.54920.55190.55470.55780.561 0.56440.568 0.57180.57580.58010.58450.58930.59420.59940.60480.61050.61640.62260.629 0.63570.64260.64980.65720.66480.67280.68090.68930.698 0.70680.71580.725 0.73440.74380.75340.763 0.77270.78240.792 0.80150.81080.82  0.82890.83750.84580.85370.86120.86830.8749"
aryC[81]="810.49250.49270.493 0.49330.49360.49390.49420.49460.495 0.49540.49580.49630.49680.49730.49790.49850.49920.49990.50070.50150.50230.50320.50420.50520.50630.50750.50870.51010.51150.51290.51450.51620.518 0.51990.522 0.52410.52640.52890.53150.53430.53720.54040.54370.54730.551 0.555 0.55920.56360.56820.57310.57830.58370.58930.59520.60130.60770.61440.62130.62850.636 0.64370.65170.66  0.66850.67720.68620.69550.70490.71450.72430.73420.74420.75430.76430.77440.78440.79430.804 0.81350.82270.83150.84  0.848 0.85560.8627"
aryC[82]="820.47310.47340.47360.47390.47420.47450.47480.47510.47550.47590.47630.47680.47730.47780.47840.479 0.47960.48030.481 0.48180.48260.48350.48450.48550.48650.48760.48880.49010.49150.49290.49450.49610.49780.49970.50170.50380.506 0.50840.511 0.51370.51660.51970.52290.52640.53010.53390.53810.54240.547 0.55180.55690.56220.56780.57370.57980.58620.59280.59970.60690.61430.62210.63010.63850.64710.65590.66510.67450.68410.69390.704 0.71420.72450.73490.74540.756 0.76640.77680.787 0.79710.80680.81620.82530.83390.842 0.8496"
aryC[83]="830.45380.454 0.45430.45450.45480.45510.45540.45570.45610.45650.45690.45730.45780.45830.45880.45940.46  0.46070.46140.46210.46290.46380.46470.46570.46670.46780.469 0.47020.47150.47290.47440.476 0.47770.47950.48140.48350.48560.488 0.49040.49310.49590.49890.50210.50550.509 0.51290.51690.52120.52570.53040.53540.54070.54620.552 0.558 0.56430.57090.57780.58490.59240.60010.60820.61650.62520.63410.64340.65290.66270.67270.68290.69340.704 0.71480.72570.73660.74760.75840.76920.77970.79  0.8   0.80960.81880.82750.8356"
aryC[84]="840.43460.43480.43510.43530.43560.43580.43610.43650.43680.43720.43760.438 0.43840.43890.43940.44  0.44060.44120.44190.44260.44340.44420.44510.446 0.447 0.448 0.44920.45040.45160.453 0.45440.456 0.45760.45930.46120.46320.46530.46760.47  0.47250.47530.47820.48130.48460.48810.49180.49570.49990.50430.509 0.51390.519 0.52450.53020.53610.54240.54890.55570.56280.57020.57790.586 0.59430.603 0.612 0.62130.63090.64080.65090.66140.672 0.68290.694 0.70520.71650.72790.73920.75040.76150.77230.78290.79310.80280.812 0.8207"
aryC[85]="850.41570.41590.41610.41630.41660.41680.41710.41740.41770.41810.41840.41880.41930.41970.42020.42070.42130.42190.42260.42330.424 0.42480.42560.42650.42750.42850.42960.43070.432 0.43330.43460.43610.43770.43940.44120.44310.44510.44730.44960.45210.45480.45760.46060.46380.46720.47080.47470.47870.483 0.48760.49240.49750.50280.50840.51430.52040.52680.53360.54060.54790.55560.56360.57190.58050.58950.59880.60850.61850.62870.63930.65010.66120.67260.68410.69570.70740.71920.73080.74240.75380.76480.77560.78580.79560.8048"
aryC[86]="860.39710.39730.39750.39770.39790.39820.39840.39870.399 0.39930.39970.40010.40050.40090.40140.40190.40240.403 0.40360.40430.405 0.40570.40650.40740.40830.40930.41030.41140.41260.41390.41520.41660.41810.41970.42150.42330.42530.42740.42960.432 0.43460.43730.44020.44330.44660.45010.45390.45780.462 0.46650.47110.47610.48130.48680.49250.49860.50490.51150.51840.52570.53330.54120.54940.558 0.567 0.57630.58590.59590.60630.61690.62790.63920.65070.66240.67440.68640.69850.71060.72260.73440.746 0.75720.76810.77840.7881"
aryC[87]="870.37910.37920.37940.37960.37980.38  0.38030.38060.38080.38110.38150.38180.38220.38260.38310.38350.384 0.38460.38520.38580.38650.38720.388 0.38880.38970.39060.39160.39260.39380.39490.39620.39760.399 0.40060.40230.404 0.40590.40790.41010.41240.41490.41750.42030.42330.42650.42990.43350.43730.44140.44570.45030.45510.46020.46550.47120.47710.48330.48980.49660.50370.51120.519 0.52710.53570.54450.55380.56340.57340.58380.59450.60550.61690.62850.64050.65260.66490.67740.68980.70220.71450.72650.73820.74960.76040.7706"
aryC[88]="880.36180.36190.36210.36230.36250.36270.36290.36310.36340.36370.364 0.36430.36470.36510.36550.36590.36640.36690.36750.368 0.36870.36940.37010.37090.37170.37260.37350.37450.37560.37670.378 0.37930.38070.38210.38370.38540.38720.38920.39130.39350.39580.39840.40110.40390.407 0.41030.41380.41750.42150.42560.43010.43480.43970.44490.45040.45620.46220.46860.47520.48220.48960.49720.50530.51370.52250.53170.54120.55120.56150.57220.58320.59470.60640.61850.63080.64340.656 0.66880.68150.69420.70660.71880.73060.74190.7527"
aryC[89]="890.34550.34560.34580.34590.34610.34630.34650.34670.347 0.34720.34750.34780.34810.34850.34890.34930.34970.35020.35070.35130.35190.35250.35320.35390.35470.35550.35640.35740.35840.35950.36060.36190.36320.36460.36610.36780.36950.37130.37330.37540.37770.38010.38270.38550.38850.39160.395 0.39860.40240.40640.41070.41530.42010.42510.43050.43610.442 0.44820.45470.46150.46870.47620.48420.49240.50110.51020.51960.52950.53970.55040.56150.57290.58470.59690.60930.622 0.63490.64790.66090.67390.68670.69930.71150.72320.7344"
aryC[90]="900.33060.33070.33080.33090.331 0.33120.33140.33160.33180.332 0.33230.33250.33280.33310.33350.33390.33430.33470.33520.33570.33630.33690.33750.33820.33890.33970.34050.34140.34240.34340.34450.34570.34690.34830.34970.35130.35290.35470.35660.35860.36080.36310.36560.36820.37110.37410.37740.38080.38450.38840.39250.39690.40160.40650.41170.41710.42290.42890.43530.44190.449 0.45630.46410.47220.48070.48970.499 0.50880.51890.52950.54050.55190.56380.57590.58850.60130.61430.62750.64080.654 0.66720.68010.69270.70480.7164"

//End of aryC = new Array(90) 1st set of aryC[]
// for option C
} // End of function CreateMultiArrayC_before_04022012() 
//End of 1st set of calculator for hired before 04/02/2012
//CreateMultiArrayC_before_04022012() //must keep this because this is for hired before 04/02/2012

//2nd set of calculator for hired on and after 04/02/2012
//CreateMultiArrayC_onandafter_04022012() //must keep this because this is for hired on and after 04/02/2012
//3/19/2018 add by WJL
//for Option A and C factor 
//2nd set of calculator for hired on and after 04/02/2012
function CreateMultiArrayC_onandafter_04022012(){
	//This function creates and fills the array for Option A and C Age factor

	//Create Option A Age factor array Part 1.
	/** 5-26-2017
	 *  This is for members hired on and after 4-2-2012
	 *  For Group 1,2,4 with Year of Service < 30 years
	 *  if Group 2 and Member's age >= 55 then age + 5. Example: 55 + 5 = 60
	 *  if Group 4 and Member's age >= 50 then age + 10. Example: 50 + 10 = 60
	 */
	//1st set of Option A array
	ARRY = new Array(32)
	ARRY[36]="360.00000"
	ARRY[37]="370.00000"
	ARRY[38]="380.00000"
	ARRY[39]="390.00000"
	ARRY[40]="400.00000"
	ARRY[41]="410.00000"
	ARRY[42]="420.00000"
	ARRY[43]="430.00000"
	ARRY[44]="440.00000"
	ARRY[45]="450.00000"
	ARRY[46]="460.00000"
	ARRY[47]="470.00000"
	ARRY[48]="480.00000"
	ARRY[49]="490.00000"
	ARRY[50]="500.00000"
	ARRY[51]="510.00000"
	ARRY[52]="520.00000"
	ARRY[53]="530.00000"
	ARRY[54]="540.00000"
	ARRY[55]="550.00000"
	ARRY[56]="560.00000"
	ARRY[57]="570.00000"
	ARRY[58]="580.00000"
	ARRY[59]="590.00000"
	ARRY[60]="600.01450"
	ARRY[61]="610.01600"
	ARRY[62]="620.01750"
	ARRY[63]="630.01900"
	ARRY[64]="640.02050"
	ARRY[65]="650.02200"
	ARRY[66]="660.02350"
	ARRY[67]="670.02500"

	/** Create Option A Age factor array Part 2.
	 *  6-16-2017
	 *  This is for members hired on and after 4-2-2012 
 	 *  For Group 1,2,4 and (Year of Service >= 30  years and Age >= 50 years)
  	 *  if Group 2 and Member's age >= 55 then age + 5. Example: 55 + 5 = 60
	 *  if Group 4 and Member's age >= 50 then age + 10. Example: 50 + 10 = 60
	
	 This is for hired on and after 4-2-2012  with 30 and more years of services	
	 */	 
	//second set of Option A age factor Array
	//group 1 and 30 yrs plus
	ARRY_30plusYOS_Group1 = new Array(32)
	ARRY_30plusYOS_Group1[36]="360.00000"
	ARRY_30plusYOS_Group1[37]="370.00000"
	ARRY_30plusYOS_Group1[38]="380.00000"
	ARRY_30plusYOS_Group1[39]="390.00000"
	ARRY_30plusYOS_Group1[40]="400.00000"
	ARRY_30plusYOS_Group1[41]="410.00000"
	ARRY_30plusYOS_Group1[42]="420.00000"
	ARRY_30plusYOS_Group1[43]="430.00000"
	ARRY_30plusYOS_Group1[44]="440.00000"
	ARRY_30plusYOS_Group1[45]="450.00000"
	ARRY_30plusYOS_Group1[46]="460.00000"
	ARRY_30plusYOS_Group1[47]="470.00000"
	ARRY_30plusYOS_Group1[48]="480.00000"
	ARRY_30plusYOS_Group1[49]="490.00000"
	ARRY_30plusYOS_Group1[50]="500.00000"
	ARRY_30plusYOS_Group1[51]="510.00000"
	ARRY_30plusYOS_Group1[52]="520.00000"
	ARRY_30plusYOS_Group1[53]="530.00000"
	ARRY_30plusYOS_Group1[54]="540.00000"
	ARRY_30plusYOS_Group1[55]="550.00000"
	ARRY_30plusYOS_Group1[56]="560.00000"
	ARRY_30plusYOS_Group1[57]="570.00000"
	ARRY_30plusYOS_Group1[58]="580.00000"
	ARRY_30plusYOS_Group1[59]="590.00000"
	ARRY_30plusYOS_Group1[60]="600.01625"
	ARRY_30plusYOS_Group1[61]="610.01750"
	ARRY_30plusYOS_Group1[62]="620.01875"
	ARRY_30plusYOS_Group1[63]="630.02000"
	ARRY_30plusYOS_Group1[64]="640.02125"
	ARRY_30plusYOS_Group1[65]="650.02250"
	ARRY_30plusYOS_Group1[66]="660.02375"
	ARRY_30plusYOS_Group1[67]="670.02500"
	// Age 67 and over is 2.5

	
	//Group2 and 30 yrs plus
	ARRY_30plusYOS_Group2 = new Array(32)
	ARRY_30plusYOS_Group2[36]="360.00000"
	ARRY_30plusYOS_Group2[37]="370.00000"
	ARRY_30plusYOS_Group2[38]="380.00000"
	ARRY_30plusYOS_Group2[39]="390.00000"
	ARRY_30plusYOS_Group2[40]="400.00000"
	ARRY_30plusYOS_Group2[41]="410.00000"
	ARRY_30plusYOS_Group2[42]="420.00000"
	ARRY_30plusYOS_Group2[43]="430.00000"
	ARRY_30plusYOS_Group2[44]="440.00000"
	ARRY_30plusYOS_Group2[45]="450.00000"
	ARRY_30plusYOS_Group2[46]="460.00000"
	ARRY_30plusYOS_Group2[47]="470.00000"
	ARRY_30plusYOS_Group2[48]="480.00000"
	ARRY_30plusYOS_Group2[49]="490.00000"
	ARRY_30plusYOS_Group2[50]="500.00000"
	ARRY_30plusYOS_Group2[51]="510.00000"
	ARRY_30plusYOS_Group2[52]="520.00000"
	ARRY_30plusYOS_Group2[53]="530.00000"
	ARRY_30plusYOS_Group2[54]="540.00000"
	ARRY_30plusYOS_Group2[55]="550.01625"
	ARRY_30plusYOS_Group2[56]="560.01750"
	ARRY_30plusYOS_Group2[57]="570.01875"
	ARRY_30plusYOS_Group2[58]="580.02000"
	ARRY_30plusYOS_Group2[59]="590.02125"
	ARRY_30plusYOS_Group2[60]="600.02250"
	ARRY_30plusYOS_Group2[61]="610.02375"
	ARRY_30plusYOS_Group2[62]="620.02500"
	ARRY_30plusYOS_Group2[63]="630.02500"
	ARRY_30plusYOS_Group2[64]="640.02500"
	ARRY_30plusYOS_Group2[65]="650.02500"
	ARRY_30plusYOS_Group2[66]="660.02500"
	ARRY_30plusYOS_Group2[67]="670.02500"
	// Age 62 and over is 2.5

	//Group4 and 30 yrs plus
	ARRY_30plusYOS_Group4 = new Array(32)
	ARRY_30plusYOS_Group4[36]="360.00000"
	ARRY_30plusYOS_Group4[37]="370.00000"
	ARRY_30plusYOS_Group4[38]="380.00000"
	ARRY_30plusYOS_Group4[39]="390.00000"
	ARRY_30plusYOS_Group4[40]="400.00000"
	ARRY_30plusYOS_Group4[41]="410.00000"
	ARRY_30plusYOS_Group4[42]="420.00000"
	ARRY_30plusYOS_Group4[43]="430.00000"
	ARRY_30plusYOS_Group4[44]="440.00000"
	ARRY_30plusYOS_Group4[45]="450.00000"
	ARRY_30plusYOS_Group4[46]="460.00000"
	ARRY_30plusYOS_Group4[47]="470.00000"
	ARRY_30plusYOS_Group4[48]="480.00000"
	ARRY_30plusYOS_Group4[49]="490.00000"
	ARRY_30plusYOS_Group4[50]="500.01625"
	ARRY_30plusYOS_Group4[51]="510.01750"
	ARRY_30plusYOS_Group4[52]="520.01875"
	ARRY_30plusYOS_Group4[53]="530.02000"
	ARRY_30plusYOS_Group4[54]="540.02125"
	ARRY_30plusYOS_Group4[55]="550.02250"
	ARRY_30plusYOS_Group4[56]="560.02375"
	ARRY_30plusYOS_Group4[57]="570.02500"
	ARRY_30plusYOS_Group4[58]="580.02500"
	ARRY_30plusYOS_Group4[59]="590.02500"
	ARRY_30plusYOS_Group4[60]="600.02500"
	ARRY_30plusYOS_Group4[61]="610.02500"
	ARRY_30plusYOS_Group4[62]="620.02500"
	ARRY_30plusYOS_Group4[63]="630.02500"
	ARRY_30plusYOS_Group4[64]="640.02500"
	ARRY_30plusYOS_Group4[65]="650.02500"
	ARRY_30plusYOS_Group4[66]="660.02500"
	ARRY_30plusYOS_Group4[67]="670.02500"
	// Age 57 and over is 2.5

	/** End of 30plusYOS
	 * This is for hired after 4-2-2012
	 * with 30 and more years of services.
	 */ 
	
/** Create Option C beneficiary's Age factor Array. Last update 6-15-2017
 *  for members hired on and after 4-2-2012
 **/ 

aryC = new Array(90)
aryC[1]="10.99560.99570.99570.99580.99590.99590.99600.99610.99620.99620.99630.99640.99640.99650.99650.99660.99670.99670.99680.99680.99690.99690.99700.99700.99710.99710.99720.99720.99730.99730.99730.99740.99740.99750.99750.99750.99760.99760.99760.99770.99770.99770.99780.99780.99790.99790.99790.99800.99800.99800.99810.99810.99810.99820.99820.99820.99830.99830.99840.99840.99840.99850.99850.99860.99860.99870.99870.99880.99880.99890.99890.99900.99910.99920.99930.99940.99950.99970.99991.00001.00001.00001.00001.00001.00001.00001.00001.00001.00001.0000"
aryC[2]="20.99560.99570.99580.99580.99590.99600.99610.99610.99620.99630.99640.99640.99650.99660.99660.99670.99680.99680.99690.99700.99700.99710.99710.99720.99720.99730.99730.99740.99740.99750.99750.99760.99760.99760.99770.99770.99780.99780.99780.99790.99790.99800.99800.99800.99810.99810.99810.99820.99820.99820.99830.99830.99840.99840.99840.99850.99850.99850.99860.99860.99870.99870.99870.99880.99880.99890.99890.99900.99900.99910.99920.99920.99930.99940.99950.99960.99970.99991.00001.00001.00001.00001.00001.00001.00001.00001.00001.00001.00001.0000"
aryC[3]="30.99550.99560.99560.99570.99580.99590.99600.99610.99610.99620.99630.99640.99650.99650.99660.99670.99680.99680.99690.99700.99700.99710.99710.99720.99730.99730.99740.99740.99750.99750.99760.99760.99770.99770.99770.99780.99780.99790.99790.99790.99800.99800.99810.99810.99810.99820.99820.99830.99830.99830.99840.99840.99840.99850.99850.99860.99860.99860.99870.99870.99880.99880.99880.99890.99890.99900.99900.99910.99910.99920.99930.99930.99940.99950.99960.99970.99981.00001.00001.00001.00001.00001.00001.00001.00001.00001.00001.00001.00001.0000"
aryC[4]="40.99530.99540.99550.99560.99560.99570.99580.99590.99600.99610.99620.99630.99630.99640.99650.99660.99670.99670.99680.99690.99700.99700.99710.99710.99720.99730.99730.99740.99740.99750.99750.99760.99760.99770.99770.99780.99780.99790.99790.99800.99800.99810.99810.99810.99820.99820.99830.99830.99830.99840.99840.99850.99850.99850.99860.99860.99870.99870.99870.99880.99880.99890.99890.99900.99900.99900.99910.99910.99920.99930.99930.99940.99950.99960.99970.99980.99991.00001.00001.00001.00001.00001.00001.00001.00001.00001.00001.00001.00001.0000"
aryC[5]="50.99500.99510.99520.99530.99540.99550.99560.99570.99580.99590.99600.99610.99620.99630.99630.99640.99650.99660.99670.99670.99680.99690.99700.99700.99710.99720.99720.99730.99740.99740.99750.99750.99760.99760.99770.99770.99780.99780.99790.99790.99800.99800.99810.99810.99820.99820.99820.99830.99830.99840.99840.99850.99850.99850.99860.99860.99870.99870.99870.99880.99880.99890.99890.99900.99900.99910.99910.99920.99920.99930.99930.99940.99950.99960.99970.99980.99991.00001.00001.00001.00001.00001.00001.00001.00001.00001.00001.00001.00001.0000"
aryC[6]="60.99470.99480.99490.99500.99510.99520.99530.99540.99550.99560.99570.99580.99590.99600.99610.99620.99630.99640.99650.99660.99670.99670.99680.99690.99700.99700.99710.99720.99730.99730.99740.99740.99750.99760.99760.99770.99770.99780.99780.99790.99790.99800.99800.99810.99810.99820.99820.99830.99830.99830.99840.99840.99850.99850.99860.99860.99860.99870.99870.99880.99880.99890.99890.99900.99900.99910.99910.99920.99920.99930.99930.99940.99950.99960.99970.99980.99991.00001.00001.00001.00001.00001.00001.00001.00001.00001.00001.00001.00001.0000"
aryC[7]="70.99440.99450.99460.99470.99480.99490.99500.99510.99530.99540.99550.99560.99570.99580.99590.99600.99610.99620.99630.99640.99650.99660.99670.99670.99680.99690.99700.99710.99710.99720.99730.99730.99740.99750.99750.99760.99760.99770.99770.99780.99790.99790.99800.99800.99810.99810.99820.99820.99830.99830.99830.99840.99840.99850.99850.99860.99860.99870.99870.99880.99880.99890.99890.99890.99900.99900.99910.99920.99920.99930.99930.99940.99950.99960.99970.99980.99991.00001.00001.00001.00001.00001.00001.00001.00001.00001.00001.00001.00001.0000"
aryC[8]="80.99400.99410.99420.99430.99450.99460.99470.99480.99490.99510.99520.99530.99540.99550.99560.99570.99590.99600.99610.99620.99630.99640.99650.99660.99660.99670.99680.99690.99700.99710.99710.99720.99730.99730.99740.99750.99750.99760.99770.99770.99780.99780.99790.99790.99800.99800.99810.99810.99820.99820.99830.99830.99840.99840.99850.99850.99860.99860.99870.99870.99880.99880.99890.99890.99900.99900.99910.99910.99920.99930.99930.99940.99950.99960.99970.99980.99991.00001.00001.00001.00001.00001.00001.00001.00001.00001.00001.00001.00001.0000"
aryC[9]="90.99360.99370.99380.99390.99410.99420.99430.99450.99460.99470.99480.99500.99510.99520.99530.99540.99560.99570.99580.99590.99600.99610.99620.99630.99640.99650.99660.99670.99680.99690.99700.99700.99710.99720.99730.99730.99740.99750.99750.99760.99770.99770.99780.99780.99790.99800.99800.99810.99810.99820.99820.99830.99830.99840.99840.99850.99850.99860.99860.99870.99870.99880.99880.99890.99890.99900.99900.99910.99920.99920.99930.99940.99940.99950.99960.99970.99991.00001.00001.00001.00001.00001.00001.00001.00001.00001.00001.00001.00001.0000"
aryC[10]="100.99310.99320.99340.99350.99360.99380.99390.99400.99420.99430.99440.99460.99470.99490.99500.99510.99520.99540.99550.99560.99570.99590.99600.99610.99620.99630.99640.99650.99660.99670.99680.99690.99690.99700.99710.99720.99730.99730.99740.99750.99750.99760.99770.99770.99780.99790.99790.99800.99800.99810.99810.99820.99830.99830.99840.99840.99850.99850.99860.99860.99870.99870.99880.99880.99890.99890.99900.99910.99910.99920.99930.99930.99940.99950.99960.99970.99981.00001.00001.00001.00001.00001.00001.00001.00001.00001.00001.00001.00001.0000"
aryC[11]="110.99260.99280.99290.99300.99320.99330.99340.99360.99370.99390.99400.99420.99430.99450.99460.99470.99490.99500.99520.99530.99540.99550.99570.99580.99590.99600.99610.99620.99640.99650.99660.99670.99670.99680.99690.99700.99710.99720.99720.99730.99740.99750.99750.99760.99770.99770.99780.99790.99790.99800.99810.99810.99820.99820.99830.99830.99840.99850.99850.99860.99860.99870.99870.99880.99880.99890.99900.99900.99910.99910.99920.99930.99940.99940.99950.99960.99980.99991.00001.00001.00001.00001.00001.00001.00001.00001.00001.00001.00001.0000"
aryC[12]="120.99210.99220.99240.99250.99270.99280.99300.99310.99330.99340.99360.99370.99390.99400.99420.99430.99450.99460.99480.99490.99510.99520.99530.99550.99560.99570.99590.99600.99610.99620.99630.99640.99650.99660.99670.99680.99690.99700.99710.99720.99720.99730.99740.99750.99750.99760.99770.99780.99780.99790.99790.99800.99810.99810.99820.99830.99830.99840.99840.99850.99850.99860.99870.99870.99880.99880.99890.99900.99900.99910.99920.99920.99930.99940.99950.99960.99970.99991.00001.00001.00001.00001.00001.00001.00001.00001.00001.00001.00001.0000"
aryC[13]="130.99150.99170.99180.99200.99210.99230.99240.99260.99270.99290.99310.99320.99340.99360.99370.99390.99410.99420.99440.99450.99470.99480.99500.99510.99530.99540.99560.99570.99580.99590.99610.99620.99630.99640.99650.99660.99670.99680.99690.99700.99710.99720.99720.99730.99740.99750.99760.99760.99770.99780.99780.99790.99800.99800.99810.99820.99820.99830.99840.99840.99850.99850.99860.99870.99870.99880.99880.99890.99900.99900.99910.99920.99930.99940.99940.99960.99970.99981.00001.00001.00001.00001.00001.00001.00001.00001.00001.00001.00001.0000"
aryC[14]="140.99090.99100.99120.99140.99150.99170.99180.99200.99220.99240.99250.99270.99290.99310.99320.99340.99360.99380.99390.99410.99430.99440.99460.99480.99490.99510.99520.99540.99550.99560.99580.99590.99600.99610.99630.99640.99650.99660.99670.99680.99690.99700.99710.99720.99720.99730.99740.99750.99760.99760.99770.99780.99790.99790.99800.99810.99810.99820.99830.99830.99840.99850.99850.99860.99870.99870.99880.99880.99890.99900.99910.99910.99920.99930.99940.99950.99960.99980.99991.00001.00001.00001.00001.00001.00001.00001.00001.00001.00001.0000"
aryC[15]="150.99020.99040.99060.99070.99090.99110.99120.99140.99160.99180.99200.99210.99230.99250.99270.99290.99310.99330.99350.99370.99380.99400.99420.99440.99450.99470.99490.99500.99520.99530.99550.99560.99570.99590.99600.99610.99620.99640.99650.99660.99670.99680.99690.99700.99710.99720.99730.99730.99740.99750.99760.99770.99770.99780.99790.99800.99800.99810.99820.99830.99830.99840.99850.99850.99860.99870.99870.99880.99890.99890.99900.99910.99920.99930.99940.99950.99960.99970.99991.00001.00001.00001.00001.00001.00001.00001.00001.00001.00001.0000"
aryC[16]="160.98950.98970.98990.99000.99020.99040.99060.99080.99090.99110.99130.99150.99170.99190.99210.99230.99250.99270.99290.99310.99330.99350.99370.99390.99410.99430.99450.99460.99480.99500.99510.99530.99540.99560.99570.99590.99600.99610.99620.99640.99650.99660.99670.99680.99690.99700.99710.99720.99730.99740.99750.99750.99760.99770.99780.99790.99790.99800.99810.99820.99820.99830.99840.99840.99850.99860.99870.99870.99880.99890.99900.99900.99910.99920.99930.99940.99950.99970.99981.00001.00001.00001.00001.00001.00001.00001.00001.00001.00001.0000"
aryC[17]="170.98880.98890.98910.98930.98950.98970.98990.99010.99030.99050.99070.99090.99110.99130.99150.99170.99200.99220.99240.99260.99280.99300.99320.99340.99360.99380.99400.99420.99440.99460.99480.99490.99510.99520.99540.99560.99570.99580.99600.99610.99620.99640.99650.99660.99670.99680.99690.99700.99710.99720.99730.99740.99750.99760.99770.99770.99780.99790.99800.99810.99810.99820.99830.99840.99840.99850.99860.99870.99870.99880.99890.99900.99910.99920.99930.99940.99950.99960.99981.00001.00001.00001.00001.00001.00001.00001.00001.00001.00001.0000"
aryC[18]="180.98800.98820.98830.98850.98870.98890.98910.98930.98950.98970.98990.99020.99040.99060.99080.99110.99130.99150.99180.99200.99220.99250.99270.99290.99310.99330.99350.99380.99400.99420.99430.99450.99470.99490.99510.99520.99540.99550.99570.99580.99600.99610.99620.99640.99650.99660.99670.99680.99690.99700.99720.99730.99730.99740.99750.99760.99770.99780.99790.99800.99800.99810.99820.99830.99840.99840.99850.99860.99870.99880.99880.99890.99900.99910.99920.99930.99940.99960.99970.99991.00001.00001.00001.00001.00001.00001.00001.00001.00001.0000"
aryC[19]="190.98710.98730.98750.98770.98790.98810.98830.98850.98870.98890.98920.98940.98960.98990.99010.99040.99060.99090.99110.99130.99160.99180.99210.99230.99260.99280.99300.99320.99350.99370.99390.99410.99430.99450.99470.99490.99500.99520.99540.99550.99570.99580.99600.99610.99630.99640.99650.99660.99670.99690.99700.99710.99720.99730.99740.99750.99760.99770.99780.99790.99790.99800.99810.99820.99830.99840.99840.99850.99860.99870.99880.99890.99900.99910.99920.99930.99940.99950.99970.99991.00001.00001.00001.00001.00001.00001.00001.00001.00001.0000"
aryC[20]="200.98620.98640.98660.98680.98700.98720.98740.98760.98780.98810.98830.98860.98880.98910.98930.98960.98980.99010.99040.99060.99090.99120.99140.99170.99190.99220.99240.99270.99290.99320.99340.99360.99380.99400.99430.99450.99460.99480.99500.99520.99540.99550.99570.99580.99600.99610.99630.99640.99650.99670.99680.99690.99700.99710.99720.99730.99740.99750.99760.99770.99780.99790.99800.99810.99820.99830.99840.99850.99850.99860.99870.99880.99890.99900.99910.99920.99930.99950.99960.99981.00001.00001.00001.00001.00001.00001.00001.00001.00001.0000"
aryC[21]="210.98520.98540.98560.98580.98600.98620.98640.98670.98690.98720.98740.98770.98790.98820.98850.98870.98900.98930.98960.98990.99010.99040.99070.99100.99130.99150.99180.99210.99230.99260.99280.99310.99330.99360.99380.99400.99420.99440.99460.99480.99500.99520.99540.99550.99570.99590.99600.99620.99630.99640.99660.99670.99680.99690.99710.99720.99730.99740.99750.99760.99770.99780.99790.99800.99810.99820.99830.99840.99850.99860.99860.99870.99880.99890.99900.99920.99930.99940.99960.99981.00001.00001.00001.00001.00001.00001.00001.00001.00001.0000"
aryC[22]="220.98420.98430.98450.98480.98500.98520.98540.98570.98590.98620.98640.98670.98700.98730.98750.98780.98810.98840.98870.98900.98930.98960.98990.99020.99050.99080.99110.99140.99170.99200.99220.99250.99280.99300.99330.99350.99370.99400.99420.99440.99460.99480.99500.99520.99540.99550.99570.99590.99600.99620.99630.99650.99660.99670.99690.99700.99710.99720.99730.99750.99760.99770.99780.99790.99800.99810.99820.99830.99840.99850.99860.99870.99880.99890.99900.99910.99920.99940.99950.99970.99991.00001.00001.00001.00001.00001.00001.00001.00001.0000"
aryC[23]="230.98300.98320.98340.98360.98390.98410.98430.98460.98480.98510.98540.98560.98590.98620.98650.98680.98710.98750.98780.98810.98840.98870.98910.98940.98970.99000.99030.99060.99100.99130.99160.99180.99210.99240.99270.99300.99320.99350.99370.99390.99420.99440.99460.99480.99500.99520.99540.99560.99570.99590.99610.99620.99640.99650.99660.99680.99690.99700.99720.99730.99740.99750.99760.99770.99780.99800.99810.99820.99830.99840.99850.99860.99870.99880.99890.99900.99920.99930.99950.99960.99991.00001.00001.00001.00001.00001.00001.00001.00001.0000"
aryC[24]="240.98180.98200.98220.98240.98270.98290.98310.98340.98370.98390.98420.98450.98480.98510.98540.98570.98610.98640.98670.98710.98740.98780.98810.98850.98880.98910.98950.98980.99020.99050.99080.99110.99140.99170.99200.99230.99260.99290.99320.99340.99370.99390.99410.99440.99460.99480.99500.99520.99540.99560.99570.99590.99610.99620.99640.99650.99670.99680.99700.99710.99720.99730.99750.99760.99770.99780.99790.99800.99810.99830.99840.99850.99860.99870.99880.99900.99910.99920.99940.99960.99981.00001.00001.00001.00001.00001.00001.00001.00001.0000"
aryC[25]="250.98050.98070.98090.98110.98140.98160.98190.98210.98240.98270.98300.98330.98360.98390.98420.98460.98490.98530.98560.98600.98630.98670.98710.98740.98780.98820.98850.98890.98930.98960.99000.99030.99070.99100.99130.99160.99190.99230.99250.99280.99310.99340.99360.99390.99410.99440.99460.99480.99500.99520.99540.99560.99580.99590.99610.99630.99640.99660.99670.99690.99700.99710.99730.99740.99750.99770.99780.99790.99800.99810.99820.99840.99850.99860.99870.99890.99900.99910.99930.99950.99970.99991.00001.00001.00001.00001.00001.00001.00001.0000"
aryC[26]="260.97910.97930.97950.97980.98000.98020.98050.98080.98110.98130.98160.98200.98230.98260.98300.98330.98370.98400.98440.98480.98520.98550.98590.98630.98670.98710.98750.98790.98830.98870.98910.98940.98980.99020.99050.99090.99120.99150.99190.99220.99250.99280.99310.99330.99360.99390.99410.99430.99460.99480.99500.99520.99540.99560.99580.99600.99610.99630.99650.99660.99680.99690.99710.99720.99730.99750.99760.99770.99790.99800.99810.99820.99840.99850.99860.99870.99890.99900.99920.99940.99960.99991.00001.00001.00001.00001.00001.00001.00001.0000"
aryC[27]="270.97760.97780.97800.97830.97850.97880.97900.97930.97960.97990.98020.98050.98090.98120.98160.98190.98230.98270.98310.98350.98390.98430.98470.98510.98550.98600.98640.98680.98720.98760.98800.98840.98880.98920.98960.99000.99040.99070.99110.99140.99180.99210.99240.99270.99300.99330.99360.99380.99410.99430.99460.99480.99500.99520.99540.99560.99580.99600.99620.99630.99650.99670.99680.99700.99710.99730.99740.99750.99770.99780.99790.99810.99820.99830.99850.99860.99880.99890.99910.99930.99950.99971.00001.00001.00001.00001.00001.00001.00001.0000"
aryC[28]="280.97600.97620.97640.97670.97690.97720.97740.97770.97800.97830.97870.97900.97930.97970.98010.98040.98080.98120.98160.98210.98250.98290.98330.98380.98420.98470.98510.98560.98600.98650.98690.98740.98780.98820.98860.98910.98950.98990.99020.99060.99100.99130.99170.99200.99230.99270.99300.99330.99350.99380.99410.99430.99460.99480.99500.99520.99540.99560.99580.99600.99620.99640.99650.99670.99690.99700.99720.99730.99750.99760.99770.99790.99800.99820.99830.99850.99860.99880.99900.99910.99940.99960.99991.00001.00001.00001.00001.00001.00001.0000"
aryC[29]="290.97430.97450.97470.97490.97520.97550.97570.97600.97630.97670.97700.97730.97770.97810.97840.97880.97920.97970.98010.98050.98100.98140.98190.98230.98280.98330.98380.98430.98470.98520.98570.98620.98660.98710.98750.98800.98840.98890.98930.98970.99010.99050.99090.99120.99160.99200.99230.99260.99290.99320.99350.99380.99400.99430.99460.99480.99500.99520.99540.99560.99580.99600.99620.99640.99660.99670.99690.99710.99720.99740.99750.99770.99780.99800.99810.99830.99840.99860.99880.99900.99920.99950.99981.00001.00001.00001.00001.00001.00001.0000"
aryC[30]="300.97240.97260.97290.97310.97340.97360.97390.97420.97450.97490.97520.97560.97590.97630.97670.97710.97750.97800.97840.97890.97930.97980.98030.98080.98130.98180.98230.98280.98330.98380.98430.98480.98540.98590.98630.98680.98730.98780.98820.98870.98910.98960.99000.99040.99080.99120.99150.99190.99220.99260.99290.99320.99350.99380.99400.99430.99450.99480.99500.99520.99550.99570.99590.99610.99620.99640.99660.99680.99690.99710.99730.99740.99760.99780.99790.99810.99820.99840.99860.99880.99900.99930.99960.99991.00001.00001.00001.00001.00001.0000"
aryC[31]="310.97040.97070.97090.97120.97140.97170.97200.97230.97260.97290.97330.97370.97400.97440.97480.97530.97570.97610.97660.97710.97760.97810.97860.97910.97960.98010.98070.98120.98180.98230.98290.98340.98400.98450.98500.98560.98610.98660.98710.98760.98810.98850.98900.98940.98990.99030.99070.99110.99150.99180.99220.99250.99280.99320.99350.99370.99400.99430.99450.99480.99500.99530.99550.99570.99590.99610.99630.99650.99660.99680.99700.99720.99730.99750.99770.99790.99800.99820.99840.99860.99880.99910.99940.99981.00001.00001.00001.00001.00001.0000"
aryC[32]="320.96840.96860.96880.96910.96940.96960.96990.97020.97060.97090.97130.97160.97200.97240.97290.97330.97370.97420.97470.97520.97570.97620.97670.97730.97780.97840.97900.97950.98010.98070.98130.98190.98240.98300.98360.98420.98470.98530.98580.98640.98690.98740.98790.98840.98890.98930.98980.99020.99060.99100.99140.99180.99220.99250.99280.99320.99350.99380.99400.99430.99460.99480.99510.99530.99550.99570.99590.99610.99630.99650.99670.99690.99710.99730.99740.99760.99780.99800.99820.99840.99870.99890.99920.99961.00001.00001.00001.00001.00001.0000"
aryC[33]="330.96620.96640.96660.96690.96720.96750.96780.96810.96840.96880.96910.96950.96990.97030.97070.97120.97170.97210.97260.97310.97370.97420.97480.97530.97590.97650.97710.97770.97830.97900.97960.98020.98080.98140.98210.98270.98330.98390.98450.98510.98560.98620.98670.98730.98780.98830.98880.98930.98970.99020.99060.99100.99140.99180.99220.99250.99280.99320.99350.99380.99410.99430.99460.99490.99510.99530.99560.99580.99600.99620.99640.99660.99680.99700.99720.99740.99760.99780.99800.99820.99840.99870.99900.99940.99981.00001.00001.00001.00001.0000"
aryC[34]="340.96380.96410.96430.96460.96490.96520.96550.96580.96610.96650.96680.96720.96760.96810.96850.96900.96940.96990.97050.97100.97150.97210.97270.97330.97390.97450.97510.97580.97640.97710.97770.97840.97910.97970.98040.98110.98170.98240.98300.98360.98430.98490.98550.98600.98660.98720.98770.98820.98870.98920.98970.99020.99060.99100.99140.99180.99220.99250.99290.99320.99350.99380.99410.99440.99470.99490.99520.99540.99570.99590.99610.99630.99650.99670.99690.99710.99730.99760.99780.99800.99820.99850.99880.99920.99961.00001.00001.00001.00001.0000"
aryC[35]="350.96140.96160.96190.96210.96240.96270.96300.96340.96370.96410.96440.96480.96520.96570.96610.96660.96710.96760.96810.96870.96930.96980.97040.97110.97170.97230.97300.97370.97440.97510.97570.97650.97720.97790.97860.97930.98000.98070.98140.98210.98280.98340.98410.98470.98530.98590.98650.98710.98770.98820.98870.98920.98970.99020.99060.99110.99150.99190.99220.99260.99300.99330.99360.99390.99420.99450.99480.99500.99530.99550.99580.99600.99620.99640.99670.99690.99710.99730.99750.99780.99800.99830.99860.99900.99940.99991.00001.00001.00001.0000"
aryC[36]="360.95880.95900.95930.95950.95980.96010.96040.96080.96110.96150.96190.96230.96270.96310.96360.96410.96460.96510.96570.96620.96680.96740.96800.96870.96930.97000.97070.97140.97210.97290.97360.97440.97510.97590.97660.97740.97810.97890.97960.98040.98110.98180.98250.98320.98390.98460.98520.98590.98650.98710.98760.98820.98870.98920.98970.99020.99070.99110.99150.99190.99230.99270.99300.99340.99370.99400.99430.99460.99490.99520.99540.99570.99590.99610.99640.99660.99680.99710.99730.99760.99780.99810.99840.99880.99920.99971.00001.00001.00001.0000"
aryC[37]="370.95600.95630.95650.95680.95710.95740.95770.95800.95840.95880.95910.95960.96000.96040.96090.96140.96190.96250.96300.96360.96420.96480.96550.96620.96680.96750.96830.96900.96980.97050.97130.97210.97290.97370.97450.97530.97610.97690.97770.97850.97930.98010.98090.98160.98240.98310.98380.98450.98520.98580.98640.98710.98760.98820.98880.98930.98980.99030.99070.99120.99160.99200.99240.99280.99320.99350.99380.99410.99450.99470.99500.99530.99560.99580.99610.99630.99660.99680.99710.99730.99760.99790.99820.99860.99900.99951.00001.00001.00001.0000"
aryC[38]="380.95310.95330.95360.95390.95410.95450.95480.95510.95550.95590.95630.95670.95710.95760.95810.95860.95910.95960.96020.96080.96140.96210.96270.96340.96410.96490.96560.96640.96720.96800.96880.96960.97050.97130.97220.97310.97390.97480.97570.97650.97740.97820.97900.97990.98070.98140.98220.98300.98370.98440.98510.98580.98640.98710.98770.98830.98880.98940.98990.99040.99080.99130.99170.99210.99250.99290.99330.99360.99400.99430.99460.99490.99520.99550.99570.99600.99630.99650.99680.99710.99730.99760.99800.99830.99880.99930.99991.00001.00001.0000"
aryC[39]="390.95000.95020.95050.95070.95100.95130.95170.95200.95240.95280.95320.95360.95400.95450.95500.95550.95610.95660.95720.95780.95850.95910.95980.96050.96130.96200.96280.96360.96440.96530.96610.96700.96790.96880.96970.97060.97150.97250.97340.97430.97520.97610.97700.97790.97880.97960.98050.98130.98210.98290.98370.98440.98510.98580.98650.98710.98770.98830.98890.98950.99000.99050.99100.99140.99190.99230.99270.99310.99340.99380.99410.99450.99480.99510.99540.99570.99590.99620.99650.99680.99710.99740.99770.99810.99850.99900.99971.00001.00001.0000"
aryC[40]="400.94660.94690.94720.94740.94770.94800.94840.94870.94910.94950.94990.95030.95080.95120.95170.95230.95280.95340.95400.95460.95530.95600.95670.95740.95820.95900.95980.96060.96150.96230.96320.96410.96510.96600.96700.96800.96890.96990.97090.97190.97290.97380.97480.97580.97670.97760.97860.97950.98030.98120.98200.98280.98360.98440.98510.98580.98650.98720.98780.98840.98900.98960.99010.99060.99110.99160.99200.99240.99280.99320.99360.99400.99430.99460.99500.99530.99560.99590.99620.99650.99680.99710.99740.99780.99830.99880.99941.00001.00001.0000"
aryC[41]="410.94310.94340.94360.94390.94420.94450.94480.94520.94560.94600.94640.94680.94730.94780.94830.94880.94940.94990.95060.95120.95190.95260.95330.95410.95480.95570.95650.95740.95830.95920.96010.96110.96200.96300.96400.96510.96610.96710.96820.96920.97030.97130.97240.97340.97440.97540.97640.97740.97840.97930.98020.98110.98200.98280.98360.98440.98520.98590.98660.98730.98790.98850.98910.98970.99020.99070.99120.99170.99220.99260.99300.99340.99380.99410.99450.99480.99520.99550.99580.99610.99650.99680.99710.99750.99800.99850.99910.99991.00001.0000"
aryC[42]="420.93940.93960.93990.94020.94050.94080.94110.94150.94180.94220.94270.94310.94360.94400.94460.94510.94570.94630.94690.94760.94820.94900.94970.95050.95130.95210.95300.95390.95480.95580.95670.95770.95880.95980.96090.96190.96300.96410.96530.96640.96750.96860.96970.97080.97190.97300.97410.97520.97620.97720.97820.97920.98010.98110.98200.98280.98370.98450.98520.98600.98670.98740.98800.98870.98930.98980.99040.99090.99140.99190.99230.99280.99320.99360.99400.99440.99470.99510.99540.99580.99610.99640.99680.99720.99770.99820.99880.99961.00001.0000"
aryC[43]="430.93540.93560.93590.93620.93650.93680.93710.93750.93790.93830.93870.93910.93960.94010.94060.94120.94180.94240.94300.94370.94440.94510.94590.94670.94750.94840.94920.95020.95110.95210.95310.95420.95520.95630.95740.95860.95970.96090.96210.96320.96440.96560.96680.96800.96920.97040.97150.97270.97380.97490.97600.97710.97810.97910.98010.98100.98200.98290.98370.98450.98530.98610.98680.98750.98820.98880.98940.99000.99060.99110.99160.99210.99250.99300.99340.99380.99420.99460.99500.99530.99570.99610.99650.99690.99730.99780.99850.99921.00001.0000"
aryC[44]="440.93110.93140.93170.93190.93220.93260.93290.93330.93360.93400.93450.93490.93540.93590.93640.93700.93760.93820.93880.93950.94020.94100.94180.94260.94340.94430.94520.94620.94720.94820.94920.95030.95140.95260.95370.95490.95610.95740.95860.95990.96110.96240.96370.96490.96620.96750.96870.97000.97120.97240.97360.97470.97590.97700.97800.97910.98010.98110.98200.98290.98380.98460.98540.98620.98700.98770.98830.98900.98960.99020.99080.99130.99180.99230.99280.99320.99360.99410.99450.99490.99530.99570.99610.99650.99700.99750.99810.99890.99981.0000"
aryC[45]="450.92660.92690.92720.92740.92770.92810.92840.92880.92920.92960.93000.93050.93090.93140.93200.93250.93310.93380.93440.93510.93580.93660.93740.93820.93910.94000.94100.94190.94300.94400.94510.94620.94740.94850.94980.95100.95230.95360.95490.95620.95750.95890.96020.96160.96290.96430.96560.96700.96830.96960.97090.97210.97340.97460.97580.97690.97800.97910.98010.98110.98210.98300.98390.98480.98560.98640.98710.98790.98850.98920.98980.99040.99100.99150.99210.99250.99300.99350.99390.99440.99480.99520.99560.99610.99660.99710.99770.99850.99941.0000"
aryC[46]="460.92190.92210.92240.92270.92300.92330.92360.92400.92440.92480.92520.92570.92620.92670.92720.92780.92840.92910.92970.93040.93120.93190.93270.93360.93450.93540.93640.93740.93840.93950.94060.94180.94300.94420.94550.94680.94810.94940.95080.95220.95360.95510.95650.95790.95940.96080.96230.96370.96510.96650.96790.96930.97060.97190.97320.97450.97570.97690.97800.97910.98020.98120.98220.98320.98410.98490.98580.98660.98740.98810.98880.98940.99010.99070.99120.99180.99230.99280.99330.99380.99420.99470.99520.99560.99610.99670.99730.99810.99901.0000"
aryC[47]="470.91680.91700.91730.91760.91790.91820.91860.91890.91930.91970.92020.92060.92110.92170.92220.92280.92340.92400.92470.92540.92620.92700.92780.92860.92960.93050.93150.93250.93360.93470.93590.93710.93830.93960.94090.94220.94360.94500.94640.94790.94940.95090.95240.95400.95550.95700.95860.96010.96170.96320.96470.96610.96760.96900.97040.97180.97310.97440.97570.97690.97810.97920.98030.98130.98240.98330.98430.98510.98600.98680.98760.98830.98900.98970.99030.99090.99150.99210.99260.99310.99360.99410.99460.99510.99570.99620.99690.99760.99860.9998"
aryC[48]="480.91140.91160.91190.91220.91250.91280.91320.91360.91390.91440.91480.91530.91580.91630.91680.91740.91800.91870.91940.92010.92080.92160.92250.92340.92430.92530.92630.92730.92840.92960.93070.93200.93320.93460.93590.93730.93880.94020.94170.94330.94480.94640.94800.94960.95130.95290.95460.95620.95780.95950.96110.96270.96430.96580.96730.96880.97030.97170.97300.97440.97570.97690.97810.97930.98040.98150.98250.98350.98450.98540.98620.98710.98780.98860.98930.99000.99060.99120.99180.99240.99300.99350.99400.99460.99510.99570.99640.99710.99810.9992"
aryC[49]="490.90560.90590.90620.90650.90680.90710.90750.90780.90820.90860.90910.90950.91000.91060.91110.91170.91230.91300.91370.91440.91520.91600.91680.91770.91870.91970.92070.92180.92290.92410.92530.92650.92780.92920.93060.93200.93350.93510.93660.93820.93990.94150.94320.94490.94670.94840.95020.95190.95370.95540.95710.95890.96060.96220.96390.96550.96710.96860.97010.97160.97300.97440.97570.97700.97820.97940.98060.98170.98270.98370.98470.98560.98650.98730.98810.98890.98960.99030.99090.99160.99220.99280.99330.99390.99450.99510.99580.99660.99750.9987"
aryC[50]="500.89950.89980.90010.90040.90070.90100.90130.90170.90210.90250.90300.90340.90390.90450.90500.90560.90630.90690.90760.90840.90910.91000.91080.91170.91270.91370.91470.91580.91700.91820.91940.92070.92200.92340.92490.92640.92790.92950.93110.93280.93450.93630.93800.93980.94170.94350.94530.94720.94910.95090.95280.95460.95650.95830.96010.96180.96350.96520.96690.96850.97000.97150.97300.97440.97580.97710.97830.97960.98070.98180.98290.98390.98490.98580.98670.98760.98840.98910.98990.99060.99120.99190.99250.99320.99380.99440.99510.99590.99690.9980"
aryC[51]="510.89300.89330.89360.89390.89420.89450.89480.89520.89560.89600.89650.89700.89750.89800.89860.89910.89980.90040.90120.90190.90270.90350.90440.90530.90630.90730.90830.90950.91060.91180.91310.91440.91580.91730.91870.92030.92190.92350.92520.92690.92870.93050.93240.93430.93620.93810.94010.94210.94410.94600.94800.95000.95200.95390.95580.95770.95960.96140.96320.96500.96670.96830.96990.97150.97300.97440.97580.97720.97850.97970.98090.98200.98310.98420.98510.98610.98700.98780.98870.98940.99020.99090.99160.99230.99290.99360.99440.99520.99610.9973"
aryC[52]="520.88620.88640.88670.88700.88730.88760.88800.88840.88880.88920.88960.89010.89060.89110.89170.89230.89290.89360.89430.89510.89590.89670.89760.89850.89950.90050.90160.90270.90390.90520.90650.90780.90920.91070.91220.91380.91540.91710.91890.92070.92250.92440.92640.92830.93040.93240.93450.93650.93860.94080.94290.94500.94710.94920.95120.95330.95530.95730.95920.96110.96300.96480.96650.96830.96990.97150.97300.97450.97600.97730.97870.97990.98110.98230.98340.98440.98540.98640.98730.98820.98900.98980.99060.99130.99200.99280.99360.99440.99540.9965"
aryC[53]="530.87890.87910.87940.87970.88000.88030.88070.88110.88150.88190.88230.88280.88330.88390.88440.88500.88570.88630.88710.88780.88860.88950.89040.89130.89230.89330.89440.89560.89680.89800.89940.90070.90220.90370.90520.90690.90860.91030.91210.91400.91590.91780.91990.92190.92400.92620.92830.93050.93280.93500.93720.93950.94170.94400.94620.94840.95060.95270.95480.95690.95890.96090.96280.96460.96650.96820.96990.97160.97310.97470.97610.97750.97890.98020.98140.98260.98370.98470.98570.98670.98760.98850.98940.99020.99100.99180.99260.99350.99450.9956"
aryC[54]="540.87120.87140.87170.87200.87230.87260.87300.87330.87370.87420.87460.87510.87560.87610.87670.87730.87800.87860.87940.88010.88090.88180.88270.88360.88460.88570.88680.88790.88920.89040.89180.89320.89470.89620.89780.89940.90120.90300.90480.90670.90870.91080.91290.91500.91720.91940.92170.92400.92640.92870.93110.93350.93590.93830.94060.94300.94530.94770.94990.95220.95440.95650.95860.96060.96260.96450.96640.96820.97000.97160.97320.97480.97630.97770.97910.98040.98160.98280.98390.98500.98600.98700.98800.98890.98970.99060.99150.99240.99340.9946"
aryC[55]="550.86290.86320.86350.86380.86410.86440.86480.86510.86550.86600.86640.86690.86740.86790.86850.86910.86980.87040.87120.87190.87270.87360.87450.87540.87650.87750.87860.87980.88100.88230.88370.88510.88660.88820.88980.89150.89330.89510.89700.89900.90110.90320.90530.90760.90980.91220.91460.91700.91940.92190.92440.92700.92950.93200.93460.93710.93960.94210.94450.94700.94930.95170.95390.95620.95830.96040.96250.96440.96640.96820.97000.97170.97340.97500.97650.97790.97930.98060.98190.98310.98420.98530.98630.98730.98830.98930.99020.99120.99230.9935"
aryC[56]="560.85430.85460.85480.85510.85540.85580.85610.85650.85690.85730.85780.85820.85880.85930.85990.86050.86110.86180.86250.86330.86410.86500.86590.86680.86780.86890.87000.87120.87250.87380.87520.87660.87810.87970.88140.88310.88490.88680.88880.89080.89290.89510.89730.89960.90200.90440.90690.90940.91200.91460.91730.91990.92260.92530.92800.93070.93340.93600.93870.94130.94380.94630.94880.95120.95360.95590.95810.96030.96240.96440.96640.96830.97010.97190.97350.97520.97670.97820.97960.98090.98220.98340.98450.98560.98670.98770.98880.98980.99090.9922"
aryC[57]="570.84520.84550.84580.84610.84640.84670.84710.84740.84780.84830.84870.84920.84970.85020.85080.85140.85210.85270.85350.85420.85500.85590.85680.85780.85880.85990.86100.86220.86350.86480.86620.86770.86920.87080.87250.87430.87610.87800.88000.88210.88430.88650.88880.89120.89370.89620.89870.90140.90410.90680.90960.91240.91520.91810.92090.92380.92670.92950.93230.93510.93790.94060.94330.94590.94840.95090.95340.95580.95810.96030.96240.96450.96650.96850.97030.97210.97380.97540.97700.97850.97990.98120.98250.98370.98490.98600.98720.98830.98950.9908"
aryC[58]="580.83570.83600.83620.83650.83680.83720.83750.83790.83830.83870.83920.83960.84010.84070.84130.84190.84250.84320.84390.84470.84550.84640.84730.84830.84930.85040.85150.85270.85400.85530.85670.85820.85980.86140.86310.86490.86680.86870.87080.87290.87510.87740.87980.88220.88480.88740.89000.89280.89560.89840.90130.90430.90730.91030.91330.91630.91940.92240.92540.92840.93140.93430.93720.94000.94280.94550.94820.95070.95330.95570.95810.96040.96260.96470.96670.96870.97060.97240.97410.97580.97730.97880.98030.98160.98290.98410.98540.98660.98780.9892"
aryC[59]="590.82570.82590.82620.82650.82680.82710.82750.82780.82820.82870.82910.82960.83010.83060.83120.83180.83250.83310.83390.83460.83550.83630.83720.83820.83920.84030.84150.84270.84400.84530.84670.84820.84980.85150.85320.85500.85690.85890.86100.86320.86540.86780.87020.87270.87530.87800.88080.88360.88650.88950.89250.89560.89870.90190.90510.90830.91150.91470.91790.92110.92430.92740.93050.93360.93660.93950.94240.94520.94800.95060.95320.95570.95820.96050.96280.96490.96700.96900.97090.97270.97450.97610.97770.97920.98060.98200.98330.98460.98600.9874"
aryC[60]="600.81520.81540.81570.81600.81630.81660.81690.81730.81770.81810.81860.81910.81960.82010.82070.82130.82190.82260.82330.82410.82490.82580.82670.82770.82870.82980.83100.83220.83350.83480.83630.83780.83930.84100.84280.84460.84650.84860.85070.85290.85520.85760.86010.86270.86530.86810.87090.87390.87690.88000.88310.88630.88960.89290.89630.89970.90310.90650.90990.91330.91670.92000.92330.92660.92990.93300.93610.93920.94220.94510.94790.95070.95330.95590.95840.96070.96300.96520.96730.96940.97130.97310.97480.97650.97810.97960.98100.98250.98390.9854"
aryC[61]="610.80420.80440.80470.80500.80530.80560.80590.80630.80670.80710.80760.80800.80860.80910.80970.81030.81090.81160.81230.81310.81390.81480.81570.81670.81770.81880.81990.82120.82250.82380.82530.82680.82840.83010.83180.83370.83560.83770.83980.84210.84440.84690.84940.85200.85480.85760.86060.86360.86670.86990.87320.87650.87990.88340.88690.89040.89400.89760.90120.90480.90840.91200.91560.91910.92250.92600.92930.93260.93590.93900.94210.94510.94800.95080.95350.95610.95870.96110.96340.96560.96770.96980.97170.97350.97520.97690.97850.98000.98160.9831"
aryC[62]="620.79270.79300.79320.79350.79380.79410.79450.79490.79520.79570.79610.79660.79710.79760.79820.79880.79940.80010.80080.80160.80240.80330.80420.80520.80620.80730.80850.80970.81100.81230.81380.81530.81690.81860.82040.82230.82420.82630.82850.83080.83310.83560.83820.84090.84370.84660.84960.85270.85590.85920.86260.86610.86960.87320.87690.88060.88440.88820.89200.89580.89960.90340.90720.91100.91470.91840.92200.92560.92900.93250.93580.93910.94220.94530.94830.95110.95390.95650.95910.96150.96390.96610.96820.97020.97210.97400.97570.97740.97900.9807"
aryC[63]="630.78080.78110.78130.78160.78190.78220.78260.78300.78330.78380.78420.78470.78520.78570.78630.78690.78750.78820.78890.78970.79050.79140.79230.79320.79430.79540.79650.79780.79910.80040.80190.80340.80500.80670.80850.81040.81240.81450.81670.81900.82140.82390.82650.82930.83210.83510.83820.84140.84470.84810.85160.85510.85880.86260.86640.87030.87420.87820.88220.88620.89020.89430.89830.90230.90630.91020.91410.91790.92170.92540.92900.93250.93600.93930.94260.94570.94870.95160.95440.95710.95970.96210.96450.96670.96880.97080.97270.97450.97630.9780"
aryC[64]="640.76860.76880.76910.76930.76960.77000.77030.77070.77100.77150.77190.77240.77290.77340.77400.77460.77520.77590.77660.77730.77820.77900.77990.78090.78190.78300.78420.78540.78670.78810.78950.79100.79270.79440.79620.79810.80010.80220.80440.80670.80920.81170.81440.81720.82010.82310.82620.82950.83290.83640.84000.84370.84750.85130.85530.85940.86350.86760.87180.87600.88030.88460.88880.89310.89730.90150.90570.90980.91390.91780.92170.92560.92930.93290.93640.93990.94320.94640.94940.95240.95520.95790.96040.96290.96520.96740.96940.97140.97330.9752"
aryC[65]="650.75580.75600.75630.75660.75690.75720.75750.75790.75830.75870.75910.75960.76010.76060.76120.76180.76240.76310.76380.76450.76530.76620.76710.76810.76910.77020.77140.77260.77390.77520.77670.77820.77980.78150.78330.78520.78730.78940.79160.79390.79640.79900.80170.80450.80750.81060.81380.81710.82050.82410.82780.83160.83550.83950.84360.84780.85210.85640.86080.86530.86970.87420.87870.88320.88770.89220.89670.90110.90540.90970.91390.91800.92210.92600.92980.93350.93710.94060.94400.94720.95030.95320.95600.95870.96120.96360.96590.96810.97010.9722"
aryC[66]="660.74260.74280.74310.74340.74370.74400.74430.74470.74510.74550.74590.74640.74690.74740.74790.74850.74910.74980.75050.75130.75210.75290.75380.75480.75580.75690.75810.75930.76060.76190.76340.76490.76650.76820.77000.77190.77400.77610.77830.78070.78320.78580.78850.79140.79430.79750.80070.80410.80760.81130.81510.81900.82300.82710.83140.83570.84010.84460.84920.85390.85850.86330.86800.87280.87750.88230.88700.89170.89640.90090.90550.90990.91430.91850.92270.92670.93060.93440.93810.94160.94500.94820.95130.95420.95700.95960.96210.96440.96670.9688"
aryC[67]="670.72900.72920.72950.72980.73010.73040.73070.73110.73140.73180.73230.73270.73320.73370.73430.73490.73550.73610.73690.73760.73840.73920.74010.74110.74210.74320.74430.74560.74680.74820.74960.75120.75280.75450.75630.75820.76020.76230.76460.76700.76950.77210.77480.77770.78070.78390.78720.79070.79420.79800.80180.80580.80990.81420.81860.82300.82760.83230.83700.84190.84680.85170.85670.86170.86670.87170.87680.88170.88670.89160.89650.90120.90590.91050.91500.91940.92360.92770.93170.93560.93930.94280.94610.94930.95240.95530.95800.96050.96300.9653"
aryC[68]="680.71490.71510.71540.71570.71590.71630.71660.71690.71730.71770.71810.71860.71910.71960.72010.72070.72130.72200.72270.72340.72420.72510.72590.72690.72790.72900.73010.73130.73260.73400.73540.73690.73850.74020.74200.74390.74590.74810.75030.75270.75520.75780.76060.76350.76660.76980.77310.77660.78020.78400.78790.79200.79620.80060.80510.80970.81440.81920.82420.82920.83430.83940.84460.84990.85520.86050.86580.87110.87630.88160.88680.89190.89690.90190.90670.91140.91600.92050.92480.92900.93300.93690.94050.94400.94740.95050.95350.95630.95890.9615"
aryC[69]="690.70030.70050.70080.70100.70130.70160.70190.70230.70270.70300.70350.70390.70440.70490.70540.70600.70660.70730.70800.70870.70950.71030.71120.71220.71320.71420.71530.71650.71780.71920.72060.72210.72370.72540.72720.72910.73110.73320.73550.73780.74030.74300.74580.74870.75180.75500.75840.76190.76560.76940.77340.77760.78190.78630.79090.79560.80050.80550.81050.81570.82100.82640.83180.83730.84280.84840.85400.85960.86520.87080.87630.88180.88710.89250.89770.90280.90770.91260.91730.92180.92620.93040.93440.93820.94190.94530.94850.95160.95450.9572"
aryC[70]="700.68510.68530.68560.68580.68610.68640.68670.68710.68750.68780.68830.68870.68920.68970.69020.69080.69140.69200.69270.69340.69420.69500.69590.69680.69780.69890.70000.70120.70250.70380.70520.70670.70830.71000.71180.71360.71570.71780.72000.72240.72490.72750.73030.73320.73630.73960.74300.74650.75030.75420.75820.76240.76680.77130.77600.78080.78580.79090.79620.80150.80700.81250.81820.82390.82970.83550.84140.84730.85320.85910.86500.87080.87660.88220.88780.89330.89870.90390.90900.91390.91870.92320.92760.93180.93570.93950.94300.94640.94950.9525"
aryC[71]="710.66960.66980.67000.67030.67060.67090.67120.67150.67190.67230.67270.67310.67360.67410.67460.67510.67570.67640.67700.67780.67850.67940.68020.68110.68210.68320.68430.68550.68670.68800.68940.69090.69250.69420.69590.69780.69980.70190.70410.70650.70900.71160.71440.71740.72040.72370.72710.73070.73450.73840.74250.74670.75120.75580.76060.76550.77060.77580.78120.78670.79230.79810.80390.80990.81590.82200.82810.83430.84060.84680.85300.85920.86530.87140.87740.88320.88900.89470.90010.90550.91060.91560.92030.92490.92920.93330.93720.94080.94420.9474"
aryC[72]="720.65350.65370.65400.65420.65450.65480.65510.65540.65580.65620.65660.65700.65740.65790.65840.65900.65960.66020.66090.66160.66230.66320.66400.66490.66590.66690.66800.66920.67040.67170.67310.67460.67610.67780.67950.68140.68340.68550.68770.69000.69250.69520.69790.70090.70400.70720.71060.71420.71800.72200.72610.73040.73490.73960.74440.74940.75460.76000.76550.77110.77690.78280.78890.79500.80130.80760.81400.82050.82700.83360.84020.84670.85320.85970.86600.87230.87850.88460.89050.89630.90180.90720.91240.91730.92200.92650.93070.93460.93830.9418"
aryC[73]="730.63700.63720.63740.63770.63800.63820.63850.63890.63920.63960.64000.64040.64090.64130.64180.64240.64300.64360.64420.64490.64570.64650.64730.64820.64920.65020.65130.65240.65360.65490.65630.65780.65930.66090.66270.66450.66650.66860.67080.67310.67560.67820.68090.68390.68690.69020.69360.69720.70100.70500.70910.71350.71800.72270.72760.73270.73800.74340.74900.75480.76070.76680.77300.77940.78590.79240.79910.80590.81270.81960.82650.83340.84020.84710.85390.86060.86720.87370.88010.88630.89230.89810.90370.90910.91420.91900.92360.92790.93190.9357"
aryC[74]="740.62010.62030.62050.62070.62100.62130.62160.62190.62220.62260.62300.62340.62380.62430.62480.62530.62590.62650.62720.62790.62860.62940.63020.63110.63200.63300.63410.63520.63640.63770.63910.64050.64200.64360.64530.64720.64910.65120.65330.65560.65810.66070.66340.66630.66940.67270.67610.67970.68350.68740.69160.69600.70050.70530.71030.71540.72070.72630.73200.73780.74390.75010.75650.76300.76970.77650.78340.79040.79750.80470.81190.81920.82650.83370.84090.84800.85510.86210.86890.87550.88200.88830.89430.90010.90570.91090.91590.92060.92500.9291"
aryC[75]="750.60280.60300.60320.60340.60370.60390.60420.60450.60490.60520.60560.60600.60640.60690.60740.60790.60850.60910.60970.61040.61110.61190.61270.61360.61450.61550.61650.61760.61880.62010.62140.62280.62430.62590.62760.62940.63130.63330.63550.63780.64020.64280.64550.64840.65140.65460.65800.66160.66540.66940.67360.67790.68250.68730.69230.69750.70290.70850.71420.72020.72640.73270.73930.74590.75280.75980.76690.77420.78160.78910.79660.80420.81180.81940.82710.83460.84210.84950.85680.86400.87090.87770.88420.89050.89650.90220.90760.91270.91740.9219"
aryC[76]="760.58510.58530.58550.58570.58590.58620.58650.58680.58710.58750.58780.58820.58870.58910.58960.59010.59060.59120.59180.59250.59320.59400.59480.59560.59650.59750.59850.59960.60080.60200.60330.60470.60620.60780.60940.61120.61310.61510.61720.61950.62180.62440.62710.62990.63300.63610.63950.64310.64690.65080.65500.65940.66400.66880.67380.67900.68440.69010.69590.70200.70820.71470.72130.72810.73510.74230.74970.75720.76480.77260.78040.78830.79630.80430.81230.82030.82830.83610.84390.85150.85900.86620.87330.88000.88650.89270.89850.90410.90920.9140"
aryC[77]="770.56700.56720.56740.56760.56780.56810.56840.56870.56900.56930.56970.57010.57050.57090.57140.57190.57240.57300.57360.57430.57500.57570.57650.57730.57820.57920.58020.58120.58240.58360.58490.58620.58770.58920.59090.59260.59440.59640.59850.60070.60310.60560.60820.61110.61400.61720.62060.62410.62780.63180.63590.64030.64490.64970.65470.65990.66540.67100.67690.68310.68940.69590.70270.70960.71680.72410.73160.73930.74720.75520.76330.77160.77990.78830.79670.80510.81350.82180.83010.83820.84610.85390.86140.86870.87570.88240.88870.89470.90030.9055"
aryC[78]="780.54860.54880.54900.54920.54940.54960.54990.55020.55050.55080.55120.55160.55200.55240.55290.55330.55390.55440.55500.55560.55630.55700.55780.55860.55950.56040.56140.56250.56360.56480.56600.56740.56880.57030.57190.57360.57540.57730.57940.58160.58390.58630.58900.59170.59470.59780.60110.60460.60830.61220.61630.62070.62520.63000.63500.64030.64570.65140.65730.66350.66990.67650.68330.69040.69760.70510.71280.72070.72870.73700.74540.75390.76250.77130.78000.78890.79770.80650.81520.82380.83230.84060.84870.85650.86400.87120.87800.88450.89050.8962"
aryC[79]="790.52980.53000.53020.53040.53060.53090.53110.53140.53170.53200.53240.53270.53310.53350.53400.53440.53500.53550.53610.53670.53730.53800.53880.53960.54040.54130.54230.54330.54440.54560.54680.54810.54950.55100.55250.55420.55600.55790.55990.56200.56430.56670.56930.57200.57490.57800.58120.58470.58830.59220.59630.60060.60510.60990.61490.62010.62550.63120.63720.64330.64970.65640.66330.67040.67770.68530.69310.70120.70940.71790.72650.73530.74420.75330.76240.77160.78090.79010.79930.80840.81740.82620.83480.84320.85130.85900.86640.87330.87990.8860"
aryC[80]="800.51080.51100.51110.51130.51150.51180.51200.51230.51260.51290.51320.51360.51400.51440.51480.51530.51570.51630.51680.51740.51810.51870.51950.52030.52110.52200.52290.52390.52500.52610.52730.52860.52990.53140.53290.53450.53620.53810.54000.54210.54440.54670.54920.55190.55470.55780.56100.56440.56800.57180.57580.58010.58450.58930.59420.59940.60480.61050.61640.62260.62900.63570.64260.64980.65720.66480.67280.68090.68930.69800.70680.71580.72500.73440.74380.75340.76300.77270.78240.79200.80150.81080.82000.82890.83750.84580.85370.86120.86830.8749"
aryC[81]="810.49150.49170.49190.49200.49220.49250.49270.49300.49330.49360.49390.49420.49460.49500.49540.49580.49630.49680.49730.49790.49850.49920.49990.50070.50150.50230.50320.50420.50520.50630.50750.50870.51010.51150.51290.51450.51620.51800.51990.52200.52410.52640.52890.53150.53430.53720.54040.54370.54730.55100.55500.55920.56360.56820.57310.57830.58370.58930.59520.60130.60770.61440.62130.62850.63600.64370.65170.66000.66850.67720.68620.69550.70490.71450.72430.73420.74420.75430.76430.77440.78440.79430.80400.81350.82270.83150.84000.84800.85560.8627"
aryC[82]="820.47220.47240.47250.47270.47290.47310.47340.47360.47390.47420.47450.47480.47510.47550.47590.47630.47680.47730.47780.47840.47900.47960.48030.48100.48180.48260.48350.48450.48550.48650.48760.48880.49010.49150.49290.49450.49610.49780.49970.50170.50380.50600.50840.51100.51370.51660.51970.52290.52640.53010.53390.53810.54240.54700.55180.55690.56220.56780.57370.57980.58620.59280.59970.60690.61430.62210.63010.63850.64710.65590.66510.67450.68410.69390.70400.71420.72450.73490.74540.75600.76640.77680.78700.79710.80680.81620.82530.83390.84200.8496"
aryC[83]="830.45300.45310.45320.45340.45360.45380.45400.45430.45450.45480.45510.45540.45570.45610.45650.45690.45730.45780.45830.45880.45940.46000.46070.46140.46210.46290.46380.46470.46570.46670.46780.46900.47020.47150.47290.47440.47600.47770.47950.48140.48350.48560.48800.49040.49310.49590.49890.50210.50550.50900.51290.51690.52120.52570.53040.53540.54070.54620.55200.55800.56430.57090.57780.58490.59240.60010.60820.61650.62520.63410.64340.65290.66270.67270.68290.69340.70400.71480.72570.73660.74760.75840.76920.77970.79000.80000.80960.81880.82750.8356"
aryC[84]="840.43380.43390.43410.43420.43440.43460.43480.43510.43530.43560.43580.43610.43650.43680.43720.43760.43800.43840.43890.43940.44000.44060.44120.44190.44260.44340.44420.44510.44600.44700.44800.44920.45040.45160.45300.45440.45600.45760.45930.46120.46320.46530.46760.47000.47250.47530.47820.48130.48460.48810.49180.49570.49990.50430.50900.51390.51900.52450.53020.53610.54240.54890.55570.56280.57020.57790.58600.59430.60300.61200.62130.63090.64080.65090.66140.67200.68290.69400.70520.71650.72790.73920.75040.76150.77230.78290.79310.80280.81200.8207"
aryC[85]="850.41490.41500.41520.41530.41550.41570.41590.41610.41630.41660.41680.41710.41740.41770.41810.41840.41880.41930.41970.42020.42070.42130.42190.42260.42330.42400.42480.42560.42650.42750.42850.42960.43070.43200.43330.43460.43610.43770.43940.44120.44310.44510.44730.44960.45210.45480.45760.46060.46380.46720.47080.47470.47870.48300.48760.49240.49750.50280.50840.51430.52040.52680.53360.54060.54790.55560.56360.57190.58050.58950.59880.60850.61850.62870.63930.65010.66120.67260.68410.69570.70740.71920.73080.74240.75380.76480.77560.78580.79560.8048"
aryC[86]="860.39640.39650.39660.39680.39690.39710.39730.39750.39770.39790.39820.39840.39870.39900.39930.39970.40010.40050.40090.40140.40190.40240.40300.40360.40430.40500.40570.40650.40740.40830.40930.41030.41140.41260.41390.41520.41660.41810.41970.42150.42330.42530.42740.42960.43200.43460.43730.44020.44330.44660.45010.45390.45780.46200.46650.47110.47610.48130.48680.49250.49860.50490.51150.51840.52570.53330.54120.54940.55800.56700.57630.58590.59590.60630.61690.62790.63920.65070.66240.67440.68640.69850.71060.72260.73440.74600.75720.76810.77840.7881"
aryC[87]="870.37850.37850.37870.37880.37890.37910.37920.37940.37960.37980.38000.38030.38060.38080.38110.38150.38180.38220.38260.38310.38350.38400.38460.38520.38580.38650.38720.38800.38880.38970.39060.39160.39260.39380.39490.39620.39760.39900.40060.40230.40400.40590.40790.41010.41240.41490.41750.42030.42330.42650.42990.43350.43730.44140.44570.45030.45510.46020.46550.47120.47710.48330.48980.49660.50370.51120.51900.52710.53570.54450.55380.56340.57340.58380.59450.60550.61690.62850.64050.65260.66490.67740.68980.70220.71450.72650.73820.74960.76040.7706"
aryC[88]="880.36130.36130.36140.36150.36160.36180.36190.36210.36230.36250.36270.36290.36310.36340.36370.36400.36430.36470.36510.36550.36590.36640.36690.36750.36800.36870.36940.37010.37090.37170.37260.37350.37450.37560.37670.37800.37930.38070.38210.38370.38540.38720.38920.39130.39350.39580.39840.40110.40390.40700.41030.41380.41750.42150.42560.43010.43480.43970.44490.45040.45620.46220.46860.47520.48220.48960.49720.50530.51370.52250.53170.54120.55120.56150.57220.58320.59470.60640.61850.63080.64340.65600.66880.68150.69420.70660.71880.73060.74190.7527"
aryC[89]="890.34510.34520.34520.34530.34540.34550.34560.34580.34590.34610.34630.34650.34670.34700.34720.34750.34780.34810.34850.34890.34930.34970.35020.35070.35130.35190.35250.35320.35390.35470.35550.35640.35740.35840.35950.36060.36190.36320.36460.36610.36780.36950.37130.37330.37540.37770.38010.38270.38550.38850.39160.39500.39860.40240.40640.41070.41530.42010.42510.43050.43610.44200.44820.45470.46150.46870.47620.48420.49240.50110.51020.51960.52950.53970.55040.56150.57290.58470.59690.60930.62200.63490.64790.66090.67390.68670.69930.71150.72320.7344"
aryC[90]="900.33030.33030.33030.33040.33050.33060.33070.33080.33090.33100.33120.33140.33160.33180.33200.33230.33250.33280.33310.33350.33390.33430.33470.33520.33570.33630.33690.33750.33820.33890.33970.34050.34140.34240.34340.34450.34570.34690.34830.34970.35130.35290.35470.35660.35860.36080.36310.36560.36820.37110.37410.37740.38080.38450.38840.39250.39690.40160.40650.41170.41710.42290.42890.43530.44190.44900.45630.46410.47220.48070.48970.49900.50880.51890.52950.54050.55190.56380.57590.58850.60130.61430.62750.64080.65400.66720.68010.69270.70480.7164"

//end of 2nd set of aryC[]
//====
// End of memeber hired on and after 4-2-2012
// last update 6-15-2017
// for option C age factor array	
}//End of function CreateMultiArrayC_onandafter_04022012(){
//CreateMultiArrayC_onandafter_04022012() //must keep this because this is for hired on and after 04/02/2012

//for 1st and 2nd calculator
//validate Year or service has to be minimum 10 years of services with age 45
//function validateYRofServices(field, varVeteran) {
function validateYRofServices(field, varVeteran) {
 var input = field.value;
 var varMV = varVeteran
//= document.frmCal.militaryveteran.value;
		 if ((!input == null || !input.length == 0) && (varMV == "Yes")){
				if (!checkNumber(document.frmCal.YRofServices, 10, 45, "5. Enter your years of service"))
					{
					document.frmCal.YRofServices.value = "Invalid";
					//document.write("584 varMV" + varMV);
					//alert("584 YES YRofServices 10, 45, 5. Enter your years of service  function validateYRofServices1st(field, varVeteran)");		 
					}
		}else if ((!input == null || !input.length == 0) && (varMV == "No")){
				if (!checkNumber(document.frmCal.YRofServices, 10, 45, "5. Enter your years of service"))
					{
					document.frmCal.YRofServices.value = "Invalid";
					//document.write("591 varMV" + varMV);	 
					//alert("590 NO YRofServices 10, 45, 5. Enter your years of service  function validateYRofServices1st(field, varVeteran)");		 
					}
		}else{
				alert("6. Enter your years of service is a required field")		
		}//if ((!input == null || !input.length == 0) && (varMV == "Yes"))
  	field.focus();	
    computeForm();
    return true;
}//function validateYRofServices1st(field, varVeteran) {


//for 1st calculator
//function f_calOptionA(yrA, varGroup, varVeteran){ 
//for before 4/2/2012
function f_calOptionA1st(OptA, varGroup, varVeteran){ 
	//document.frmCal.yaA.value = ya;
	var ya = OptA;
	var varLessthan36 = false;
	var varGroupmember = varGroup;
	var varOnOfffalse = false;	
	if ((ya >= 55) && (varGroupmember == 2)){
  			 ya = (ya + 5);	//add 5 years for option A group #2
	}
	if ((ya >= 45) && (varGroupmember == 4)){
			ya = (ya + 10);	//add 10 years for option A group #4
	}	
	if (ya >= 65){
		ya = 65
		var OptionAARRY = "0.025";
		document.frmCal.AgeFactor.value = OptionAARRY; //Option A age factor array
		document.frmCal.yaA.value = 65;
		document.frmCal.grpmember.value = varGroupmember;
	}else if (ya < 36){ //less than 36
		blankOptionAvalue();		
		alert("1. Sorry, your age entered is less than the minumin age of 36 or you have entered invalid projected retirement date. Please check the dates or the benefit guide for more details.");
	}else{ // between age 36 and 65				
			//alert("ARRY[ya] " + ARRY[ya])
			if (isNaN(ya)){
				blankOptionAvalue();
				blankOptionCvalue();
			}else{
				var OptionAARRY = ARRY[ya].substr(2, 6); // using Option A   ARRY = new Array(ya.value)		
				document.frmCal.AgeFactor.value = OptionAARRY; //Option A age factor array
				document.frmCal.yaA.value = ya; //year +  months
				document.frmCal.grpmember.value = varGroupmember;
			}//if (isNaN(ya))
	}//if (ya >= 65)
}//function f_calOptionA1st(OptA, varGroup, varVeteran){ 

//for 1st calculator
//Option C factor calculation
function f_calOptionC1st(yrAforC, varGroup, OptC_ma, OptC_OptionA_yaA){
	var ya = yrAforC;
	var varGroupmember = varGroup;	
	var ma = OptC_ma
   	ma = (ma / 12)  
	ya = custRound((ya + ma),0);	
	if ((ya >= 55) && (varGroupmember == 2)){
  			 //ya = (ya + 5);	
			 ya = (ya);	// don't add 5 for Option C			 
	}	
	if ((ya >= 45) && (varGroupmember == 4 )){
			//ya = (ya + 10);
			ya = (ya);  // don't add 10 for Option C
	}	
	if (ya < 36){
		blankOptionCvalue();		
	}else if (ya >= 90){
		ya = 90
	}else{
		if ((ya >= 36) && (ya < 90)){							
		ya = ya;			
		}
	}//if (ya < 36){		
		document.frmCal.yaC.value = ya; 
		document.frmCal.yaC6690.value = ya; 
}//function f_calOptionC1st(yrAforC, varGroup, OptC_ma, OptC_OptionA_yaA){

//for 1st calculator
// calculation by beneficiary's Date of Birth
function f_cal_beneficiaryDOB1st(dp, mp, yp, isJulian, var_ybBeny, var_mbBeny, var_dbBeny, OptC_OptionA_yaA, rowCvar_yaC6690){
	var varzero = "0";
	var ya = parseInt(rowCvar_yaC6690);		
	var OptC_OptionA_yaA = parseInt(OptC_OptionA_yaA);
	//	IsNaN Number.NaN
	if (isNaN(ya)){
		blankOptionCvalue();
	}else{
		dp = parseInt(dp);
		mp = parseInt(mp);
		yp = parseInt(yp);
		var_ybBeny = parseInt(var_ybBeny);
		var_mbBeny = parseInt(var_mbBeny); 
		var_dbBeny = parseInt(var_dbBeny);
		//mLength = 0;
		 var mLength = 0; //(document.frmCal.monthLength.options[document.frmCal.monthLength.selectedIndex].value);
					// var isJulian = document.frmCal.isJulian.options[document.frmCal.isJulian.selectedIndex].value;
				
		var isJulian = 1; // document.frmCal.isJulian.options[document.frmCal.isJulian.selectedIndex].value;
		//added by WJL
		
// for Calculate Beneficiary DOB   
		if (!checkNumber(document.frmCal.dbBeny,1, getMonthLength(var_mbBeny,var_ybBeny,isJulian), "Beneficiary's Date of Birth"))
			//if (!checkNumber(document.frmCal.YRofServices, 10, 45, "5. Enter your years of service"))
			//alert("706 f_cal_beneficiaryDOB1st");
		{		
			return;
		}
		if ((var_ybBeny != "") && (var_ybBeny > 0) && (var_mbBeny != "null") && (var_dbBeny != "null"))
		{	
				//added by WJL

					if(  (document.frmCal.yp.value == "" || document.frmCal.yp.value.length == 0) ||
					   (document.frmCal.mp.value == null || document.frmCal.mp.value.length == 0) ||
					   (document.frmCal.dp.value == null || document.frmCal.dp.value.length == 0))
				   {
					  return;
				   }

				   var yp = document.frmCal.yp.value;   //2) Enter your projected date of retirement (mm/dd/yyyy) 
				   var mp = document.frmCal.mp.options[document.frmCal.mp.selectedIndex].value;
				   var dp = document.frmCal.dp.options[document.frmCal.dp.selectedIndex].value;
					// Month length 0->use calendar length
				   // 0 if Gregorian, 1 is Julian   
				   var mLength = 0; //(document.frmCal.monthLength.options[document.frmCal.monthLength.selectedIndex].value);
					// var isJulian = document.frmCal.isJulian.options[document.frmCal.isJulian.selectedIndex].value;
					var isJulian = 1; // document.frmCal.isJulian.options[document.frmCal.isJulian.selectedIndex].value;
					//added by WJL

		
			   var_daBeny = dp - var_dbBeny // Age = (Projected date - Benef's DOB) WJL
			   if(var_daBeny<0) //day-Age 
			   {
				  mp--;
				  // Borrow months from the year if necesssary.
				  if(mp<1){
						yp--;
						// Determine no. of months in year
					 if(mLength){
						 mp=mp+parseInt(365/mLength);
						 }
					 else{
						 mp=mp+12;
						 }
					  }
					  if(mLength==0) {// Use real month length if no fixed
									  // length is indicated - note that we add a leap day if necessary.
						 ml=getMonthLength(mp,yp,isJulian);
						 var_daBeny=var_daBeny+ml; //WJL
					  }else{
						  var_daBeny+=mLength;
					  } // Use fixed month length WJL
			   }//if(var_daBeny<0)
			   
				var_maBeny = mp - var_mbBeny; //WJL
			   // Month borrowing code - borrows months from years.
			   if(var_maBeny<0) //WJL
			   {
				  yp--;
				  if(mLength!=0)
				 {
					 var_maBeny=var_maBeny+parseInt(365/mLength);//WJL
					//alert("{var_maBeny=var_maBeny+parseInt(365/mLength);" + var_maBeny)
				 }
				  else
				 {var_maBeny=var_maBeny+12;}//WJL
			   } //if(var_maBeny<0)
				var_yaBeny = yp - var_ybBeny; 						
				varzero = parseInt(varzero);//var varzero = "0";
										
				//if ((var_yaBeny < varzero) || (( var_yaBeny == "0") && (var_maBeny <= "0"))) {							
				if ((var_yaBeny <= varzero) && (var_maBeny <= "0") || (var_yaBeny < varzero)) {							
					//alert(" var_yaBeny is: "  + var_yaBeny + " , var_maBeny: " + var_maBeny)
					alert("Beneficiary's date of birth cannot be later than your projected retirement date. ");
					
					blankBeneficiaryDOB();
					
				}else {
						//document.frmCal.ma.value = ma; //WJL
						document.frmCal.yaBeny.value = var_yaBeny;
						document.frmCal.maBeny.value = var_maBeny; 
						document.frmCal.daBeny.value = var_daBeny;				
						var_yaBenyDOB = document.frmCal.yaBeny.value;
						var_maBenyDOB = document.frmCal.maBeny.value;
						var_daBenyDOB = document.frmCal.daBeny.value;
						//var rowC = document.frmCal.yaC6690.value;
						var rowC = ya;
						var colC = parseInt(var_yaBenyDOB);
						var colCMM = parseInt(var_maBenyDOB);
						var colCDD = parseInt(var_daBenyDOB);
						var varyaBenydispay = parseInt(var_yaBenyDOB);
						var varmaBenydisplay = parseInt(var_maBenyDOB);								
						if ((colC <= 0) && (colCMM <= 0)) { // both YY and MM is 0	
								//alert("716 colC: " + colC + ", colCMM:" + colCMM);
								blankOptionCvalue();	
						}else{
								//var varrealcolC;
								document.frmCal.yaCfromYadisplay.value = OptC_OptionA_yaA;
								document.frmCal.yaC.value =  ya;
								document.frmCal.yaBenydispay.value = varyaBenydispay;
								document.frmCal.maBenydisplay.value = varmaBenydisplay;
								colC = parseInt(colC); //var_yaBenyDOB
								if (colCMM > 5){
									colC = colC + 1;
									//alert("724 colC = parseInt(colC) + 1; " + colC )										
								}else {									
									colC = colC ;
									}											
								if ((colC >= 0) && (colC < 6)){ // 0 to 6
									colC = 6;											
								}									
								if (colC > 90){								
									colC = 90;
								}					
								if ((rowC >= 6) && (rowC <=90)){
										rowC = rowC;
									}else if (rowC > 90){
										rowC = 90; 
									}else {
										rowC = 6;				  
									} //if ((rowC >= 6) && (rowC <=90)){
								
								colC = (colC - 5) // the beneficiary's age start from age 6 instead of age 1 so colC(6) - 5 = age 1
								//aryC[rowC].substr(((colC-1)*6)+2, 6)
								//age colC = 6 - 5 = 1
								//aryC[55].substr(((1-1)*6)+2, 6) = aryC[55].substr(2, 6)
								//age colC = age7 - 5 = 2
								//aryC[55].substr(((2-1)*6)+2, 6) = aryC[55].substr(8, 6)
								var benefAryCfactor = aryC[rowC].substr(((colC-1)*6)+2, 6); // ary[60].substr(((7-1)*6)+2, 6)= 0.8191  factor
								//Ex. MultiArray[60].Beneficiaree(col=7) = at position 38 and takes 6 string = 0.8191	
								document.frmCal.myResultOptionCfator.value = benefAryCfactor;	//
								//	var OptionATotal = document.frmCal.AmountOptionA.value; //Avg of 3 years salary
								colC = (colC + 5)// for display	add 5 years back to the age for the actual age 6 + 5 = age 11 for benee
								if (colC >= 90 ){
									colC += "+";										
									}
								document.frmCal.OptCbenfAge.value = colC; // cal age
						}//if (colC < 0) 
				}//if ((var_yaBeny < varzero) || (( var_yaBeny == "0") && (var_maBeny == "0"))) 
		}else{ 
		blankOptionCvalue();				
		}//if ((var_ybBeny != "") && (var_ybBeny > 0) && (var_mbBeny != "null") && (var_dbBeny != "null"))
	} // if else(isNaN(ya)){
} //function f_cal_beneficiaryDOB1st(dp, mp, yp, isJulian, var_ybBeny, var_mbBeny, var_dbBeny, OptC_OptionA_yaA, rowCvar_yaC6690){

//for 1st calculator
// Calculate by AGE and months //Example rowC = ya = 36 , colC = BenefAge = 30
//=============================================================================
//getArrayOptionC(yaC6690.value, BenefAgeYY.value, BenefAgeMM.value, yaAdisplayonly.value)
function getArrayOptionC1st(rowCvar_yaC6690, colCvar_BenefAgeYY, colCMMvar_BenefAgeMM, OptC_OptionA_yaA){
	//alert("function getArrayOptionC(rowC, colC, colCMM){" + " colC: >" + colC + "< colCMM: "  + colCMM );
	rowC = parseInt(rowCvar_yaC6690);
	colC = parseInt(colCvar_BenefAgeYY); //BenefAgeYY.value
	colCMM = parseInt(colCMMvar_BenefAgeMM); //BenefAgeMM.value
	OptC_OptionA_yaA = parseInt(OptC_OptionA_yaA);
	var varyaBenydispay = parseInt(colC);
	var varmaBenydisplay = parseInt(colCMM);
	if ( ((rowC > 0) && (colC > 0)) || ( (rowC > 0) && ((colC > 0) || (colCMM > 0)) ) ) {    
			if (colC < 0) { // negative number age
					blankOptionCvalue();
			}else if ((colC == 0) && (colCMM == 0)) { // both YY and MM is 0						
					blankOptionCvalue();						
			}else{
					document.frmCal.yaCfromYadisplay.value = OptC_OptionA_yaA;
					document.frmCal.yaC.value =  rowC;
					document.frmCal.yaBenydispay.value = varyaBenydispay;
					document.frmCal.maBenydisplay.value = varmaBenydisplay;

					colC = parseInt(colC); //var_yaBenyDOB
					if (colCMM > 5){
						colC = colC + 1;						
					}else {									
						colC = colC ;
					}					
					if ((colC >= 0) && (colC < 6)){ // 0 to 6
						colC = 6;
					}				
					if (colC > 90){								
						colC = 90;
					}	
					if ((rowC >= 6) && (rowC <=90)){
						rowC = rowC;
					}else if (rowC > 90){
						rowC = 90; 
					}else {
						rowC = 6;				  
					} //if ((rowC >= 6) && (rowC <=90)){
					
					colC = (colC - 5) // the beneficiary's age start from age 6 instead of age 1 so colC(6) - 5 = age 1
					//aryC[rowC].substr(((colC-1)*6)+2, 6)
					//age colC = 6 - 5 = 1
					//aryC[55].substr(((1-1)*6)+2, 6) = aryC[55].substr(2, 6)
					//age colC = age7 - 5 = 2
					//aryC[55].substr(((2-1)*6)+2, 6) = aryC[55].substr(8, 6)
					var benefAryCfactor = aryC[rowC].substr(((colC-1)*6)+2, 6); // ary[60].substr(((7-1)*6)+2, 6)= 0.8191  factor
					//Ex. MultiArray[60].Beneficiaree(col=7) = at position 38 and takes 6 string = 0.8191	
					document.frmCal.myResultOptionCfator.value = benefAryCfactor;	//
					//	var OptionATotal = document.frmCal.AmountOptionA.value; //Avg of 3 years salary
					colC = (colC + 5)// for display	add 5 years back to the age for the actual age 6 + 5 = age 11 for benee					
					if (colC >= 90 ){
						colC += "+";	
						}
					document.frmCal.OptCbenfAge.value = colC; // cal age
			}//if (colC < 0) 
	}else{ 
			blankOptionCvalue();				
	}//if ( ((rowC > 0) && (colC > 0)) || ( (rowC > 0) && ((colC > 0) || (colCMM > 0)) ) )
}//function getArrayOptionC1st(rowCvar_yaC6690, colCvar_BenefAgeYY, colCMMvar_BenefAgeMM, OptC_OptionA_yaA){

//for 2nd calculator
//Option A factor calculation function(?,?,?,?)
//Added on 6-13-2017 varYRofS
//for on and afer 4/2/2012
function f_calOptionA2nd(OptA, varGroup, varVeteran, varYRofS){ 
//YRofS
       var YRofS = varYRofS; // Added on 6-13-2017  for YearOfServices // if Year of Service YRofS >= 30 then use 2nd set of Array
		YRofS = parseInt(YRofS) //Added on 6-13-2017
		//varYRofS = YRofS;
	//document.frmCal.yaA.value = ya;
	var ya = OptA;
	var varLessthan36 = false;
	var varGroupmember = varGroup;
	var varOnOfffalse = false;	
	if ((ya >= 55) && (varGroupmember == 2)){
  			 ya = (ya + 5);	//add 5 years for option A group #2
	}
	///if ((ya >= 45) && (varGroupmember == 4)){ OLD
	if ((ya >= 50) && (varGroupmember == 4)){
			ya = (ya + 10);	//add 10 years for option A group #4
	}	
	//if (ya >= 65){ //comment out on 6/19/2017
	//	ya = 65		 //comment out 6/19/2017
		
	if (ya >= 67){ //Change on 6/19/2017
		ya = 67    //Change on 6/19/2017
		var OptionAARRY = "0.025";
		document.frmCal.AgeFactor.value = OptionAARRY; //Option A age factor array
		//document.frmCal.yaA.value = 65; //comment out on 6/19/2017
		document.frmCal.yaA.value = 67;//Change on 6/19/2017
		document.frmCal.grpmember.value = varGroupmember;
	}else if (ya < 36){ //less than 36
		blankOptionAvalue();		
		alert("Sorry, your age entered is less than the minimum age of 36. Please check the date or the Benefit Guide for more details.");
	}else{ // between age 36 and 67			
			//alert("ARRY[ya] " + ARRY[ya])
			if (isNaN(ya)){
				blankOptionAvalue();
				blankOptionCvalue();
			}else{
				// 5-30-2017
				// Substring 7 string after the age and Age factor Ex. Age 36 and 0.00000
				///ARRY[36]="360.00000"	
				///var OptionAARRY = ARRY[ya].substr(2, 7); // using 1st set Option A   ARRY = new Array(ya.value)	
				// 6-13-2017
				// if Year of Service YRofS >= 30 then use 30plusYOS_Group# Array set
				 if (ya >= 50 && YRofS >= 30){ //Change on 6-13-2017				 
					// alert("Line 996 ya is =" + ya);
					 //alert("Line 997 YRofS is =" + YRofS);
					 if (varGroupmember == 1){
						// alert("1068 varGroupmember is = " + varGroupmember);
						 var OptionAARRY = ARRY_30plusYOS_Group1[ya].substr(2, 7); // using Option A   ARRY = new Array(ya.value)						 
						 }
						 
					 if (varGroupmember == 2){
						 //alert("1084 varGroupmember is = " + varGroupmember);
						 var OptionAARRY = ARRY_30plusYOS_Group2[ya].substr(2, 7); // using Option A   ARRY = new Array(ya.value)						 
						 }
						 
					 if (varGroupmember == 4){
						 //alert("1089 varGroupmember is = " + varGroupmember);
						 var OptionAARRY = ARRY_30plusYOS_Group4[ya].substr(2, 7); // using Option A   ARRY = new Array(ya.value)						 
						 }
				 }else{
						var OptionAARRY = ARRY[ya].substr(2, 7); // using Option A   ARRY = new Array(ya.value)
					 }//end of if (ya >= 46 && YRofS >= 30){ //Change on 6-13-2017									
				document.frmCal.AgeFactor.value = OptionAARRY; // OptionAARRY; //Option A age factor array	
				document.frmCal.yaA.value = ya; //year +  months
				//alert("932 document.frmCal.yaA.value = ya;" + ya);
				document.frmCal.grpmember.value = varGroupmember;
			}//if (isNaN(ya))
	}//if (ya >= 67){ //Change on 6/19/2017
}//function f_calOptionA2nd(OptA, varGroup, varVeteran, varYRofS){ 

//for 2nd calcultor
//Option C factor calculation function(?,?,?,?)
function f_calOptionC2nd(yrAforC, varGroup, OptC_ma, OptC_OptionA_yaA){
	var ya = yrAforC;
	var varGroupmember = varGroup;	
	var ma = OptC_ma
   	ma = (ma / 12)  
	ya = custRound((ya + ma),0);	
	if ((ya >= 55) && (varGroupmember == 2)){
  			 //ya = (ya + 5);	
			 ya = (ya);	// don't add 5 for Option C			 
	}	
	//if ((ya >= 45) && (varGroupmember == 4 )){
	if ((ya >= 50) && (varGroupmember == 4 )){	
			//ya = (ya + 10);
			ya = (ya);  // don't add 10 for Option C
	}	
	if (ya < 36){
		blankOptionCvalue();		
	}else if (ya >= 90){
		ya = 90
	}else{
		if ((ya >= 36) && (ya < 90)){							
		ya = ya;			
		}
	}//if (ya < 36){		
		document.frmCal.yaC.value = ya; 
		document.frmCal.yaC6690.value = ya; 
}//function f_calOptionC2nd(yrAforC, varGroup, OptC_ma, OptC_OptionA_yaA){

//for 2nd calcultor
//Question 8. OPTIONAL: If you are interested in estimating your benefits under Option C, please select and enter Date of Birth or select your beneficiary's age on the birthdays that are closest to your date of retirement. Reminder: Your Option C beneficiary must be your spouse, child, sibling, parent or former spouse who has not remarried.
//  or  Check here to calculate by Age 

// Calculate by AGE and months //Example rowC = ya = 36 , colC = BenefAge = 30
//=============================================================================
//getArrayOptionC(yaC6690.value, BenefAgeYY.value, BenefAgeMM.value, yaAdisplayonly.value)
function getArrayOptionC2nd(rowCvar_yaC6690, colCvar_BenefAgeYY, colCMMvar_BenefAgeMM, OptC_OptionA_yaA){
	//alert("function getArrayOptionC(rowC, colC, colCMM){" + " colC: >" + colC + "< colCMM: "  + colCMM );
	rowC = parseInt(rowCvar_yaC6690);
	colC = parseInt(colCvar_BenefAgeYY); //BenefAgeYY.value
	colCMM = parseInt(colCMMvar_BenefAgeMM); //BenefAgeMM.value
	OptC_OptionA_yaA = parseInt(OptC_OptionA_yaA);
	var varyaBenydispay = parseInt(colC);
	var varmaBenydisplay = parseInt(colCMM);
	if ( ((rowC > 0) && (colC > 0)) || ( (rowC > 0) && ((colC > 0) || (colCMM > 0)) ) ) {    
			if (colC < 0) { // negative number age
					blankOptionCvalue();
			}else if ((colC == 0) && (colCMM == 0)) { // both YY and MM is 0						
					blankOptionCvalue();						
			}else{
					document.frmCal.yaCfromYadisplay.value = OptC_OptionA_yaA;
					document.frmCal.yaC.value =  rowC;
					document.frmCal.yaBenydispay.value = varyaBenydispay;
					document.frmCal.maBenydisplay.value = varmaBenydisplay;

					colC = parseInt(colC); //var_yaBenyDOB					
					
					//modified 6-15-2017
					if (colCMM >= 6){ // If month >= 6 then around to 1 year. Age 13 and 6 months then will = 14 (age)
						colC = colC + 1;
						//alert("1269 colC = parseInt(colC) + 1; " + colC )										
					}else {									
						colC = colC ;
						}											
					//if ((colC >= 0) && (colC < 6)){ // 0 to 6
						//colC = 6;											
					//}									
					if (colC > 90){								
						colC = 90;
					}					
					if ((rowC >= 1) && (rowC <=90)){
							rowC = rowC;
						}else if (rowC > 90){
							rowC = 90; 
						}else {
							rowC = 0;				  
						} //if ((rowC >= 6) && (rowC <=90)){								
		
						//After 4/2/2012 beneficiary's age start from age 1 so no need to do the math just block the code ///colC = (colC - 5)
						// Change on 6-15-2017
						//colC = (colC - 5) // the beneficiary's age start from age 6 instead of age 1 so colC(6) - 5 = age 1
						
						/**
						 * Main formulas matrix
						 * for hired on and after 04-02-2012
						 ***/
						 
						var benefAryCfactor = aryC[rowC].substr(((colC-1)*6)+2, 6); //// Change on 6-15-2017
						//Example 1: Member's Age = 60(rowC), Beneficiary's Age = 1(colC)  then Factor = 0.8152  factor
						//rowC = 60  is the retiree Member's age. Excel Row# 60
						//colC = 1   is the beneficiary's age. Excel column#  1
						//Table look up: Row is 60, Column = 1. Factor is = 0.8152
						
						//Example 1 of the fomulas:  var benefAryCfactor = ary[60].substr((1-1)*6+2,6) = 0.8152
						//(Option C beneficiary's table at array age 60).(select six string from position 2 which is = 0.8152 factor)								
						//ary[60].substr(((1-1)*6)+2, 6)=  ary[60].substr(2, 6)  = 0.8152  factor
													
						//Example 2: Member's Age = 60(rowC), Beneficiary's Age = 8(colC)  then Factor = 0.8173  factor
						//rowC = 60  is Retiree Member's age. Excel Row# 60
						//colC = 8   is Beneficiary's age. Excel column# 1
						//Table look up: Row is 60, Column = 8. Factor is = 0.8173
						//Example of the fomulas:  ary[60].substr((8-1)*6+2,6)
						//(Option C beneficiary's table at array age 60).(select six string from position 44 which is = 0.8173 factor)								
						//ary[60].substr(((8-1)*6)+2, 6) = ary[60].substr(44, 6) = 0.8173
							
						/**
						 * End of the Main formulas matrix
						 * for hired on and after 04-02-2012
						 ***/
	
					document.frmCal.myResultOptionCfator.value = benefAryCfactor;	//
					//	var OptionATotal = document.frmCal.AmountOptionA.value; //Avg of 3 years salary
					///block the old code 6-15-2017
					///colC = (colC + 5)// for display	add 5 years back to the age for the actual age 6 + 5 = age 11 for benee					
					
					if (colC >= 90 ){
						colC += "+";	
						}
					document.frmCal.OptCbenfAge.value = colC; // cal age
			}//if (colC < 0) 
	}else{ 
			blankOptionCvalue();				
	}//if ( ((rowC > 0) && (colC > 0)) || ( (rowC > 0) && ((colC > 0) || (colCMM > 0)) ) )
}//function getArrayOptionC2nd(rowCvar_yaC6690, colCvar_BenefAgeYY, colCMMvar_BenefAgeMM, OptC_OptionA_yaA){



//for 2nd calcultor
//Question8. OPTIONAL: If you are interested in estimating your benefits under Option C, please select and enter Date of Birth or select your beneficiary's age on the birthdays that are closest to your date of retirement. Reminder: Your Option C beneficiary must be your spouse, child, sibling, parent or former spouse who has not remarried.
  //Check here to calculate by date of birth 
function f_cal_beneficiaryDOB2nd(dp, mp, yp, isJulian, var_ybBeny, var_mbBeny, var_dbBeny, OptC_OptionA_yaA, rowCvar_yaC6690){
	var varzero = "0";
	var ya = parseInt(rowCvar_yaC6690);		
	var OptC_OptionA_yaA = parseInt(OptC_OptionA_yaA);
	//	IsNaN Number.NaN
	if (isNaN(ya)){
		blankOptionCvalue();
	}else{
		dp = parseInt(dp);
		mp = parseInt(mp);
		yp = parseInt(yp);
		var_ybBeny = parseInt(var_ybBeny);
		var_mbBeny = parseInt(var_mbBeny); 
		var_dbBeny = parseInt(var_dbBeny);
		//mLength = 0;
		 var mLength = 0; //(document.frmCal.monthLength.options[document.frmCal.monthLength.selectedIndex].value);
					// var isJulian = document.frmCal.isJulian.options[document.frmCal.isJulian.selectedIndex].value;				
		var isJulian = 1; // document.frmCal.isJulian.options[document.frmCal.isJulian.selectedIndex].value;
		//added by WJL
		
// for Calculate Beneficiary DOB   
		if (!checkNumber(document.frmCal.dbBeny,1, getMonthLength(var_mbBeny,var_ybBeny,isJulian), "Beneficiary's Date of Birth"))
			//if (!checkNumber(document.frmCal.YRofServices, 10, 45, "5. Enter your years of service"))
		{		
			return;
		}
		if ((var_ybBeny != "") && (var_ybBeny > 0) && (var_mbBeny != "null") && (var_dbBeny != "null"))
		{	
		
				//added by WJL
					if((document.frmCal.yp.value == "" || document.frmCal.yp.value.length == 0) ||
					   (document.frmCal.mp.value == null || document.frmCal.mp.value.length == 0) ||
					   (document.frmCal.dp.value == null || document.frmCal.dp.value.length == 0))
				   {
					  return;
				   }

				   var yp = document.frmCal.yp.value;   //2) Enter your projected date of retirement (mm/dd/yyyy) 
				   var mp = document.frmCal.mp.options[document.frmCal.mp.selectedIndex].value;
				   var dp = document.frmCal.dp.options[document.frmCal.dp.selectedIndex].value;
					// Month length 0->use calendar length
				   // 0 if Gregorian, 1 is Julian   
				   var mLength = 0; //(document.frmCal.monthLength.options[document.frmCal.monthLength.selectedIndex].value);
					// var isJulian = document.frmCal.isJulian.options[document.frmCal.isJulian.selectedIndex].value;
					var isJulian = 1; // document.frmCal.isJulian.options[document.frmCal.isJulian.selectedIndex].value;
					//added by WJL

		
			   var_daBeny = dp - var_dbBeny // Age = (Projected date - Benef's DOB) WJL
			   if(var_daBeny<0) //day-Age 
			   {
				  mp--;
				  // Borrow months from the year if necesssary.
				  if(mp<1){
						yp--;
						// Determine no. of months in year
					 if(mLength){
						 mp=mp+parseInt(365/mLength);
						 }
					 else{
						 mp=mp+12;
						 }
					  }
					  if(mLength==0) {// Use real month length if no fixed
									  // length is indicated - note that we add a leap day if necessary.
						 ml=getMonthLength(mp,yp,isJulian);
						 var_daBeny=var_daBeny+ml; //WJL
					  }else{
						  var_daBeny+=mLength;
					  } // Use fixed month length WJL
			   }//if(var_daBeny<0)
			   
				var_maBeny = mp - var_mbBeny; //WJL
			   // Month borrowing code - borrows months from years.
			   if(var_maBeny<0) //WJL
			   {
				  yp--;
				  if(mLength!=0)
				 {
					 var_maBeny=var_maBeny+parseInt(365/mLength);//WJL
					//alert("{var_maBeny=var_maBeny+parseInt(365/mLength);" + var_maBeny)
				 }
				  else
				 {var_maBeny=var_maBeny+12;}//WJL
			   } //if(var_maBeny<0)
				var_yaBeny = yp - var_ybBeny; 						
				varzero = parseInt(varzero);//var varzero = "0";
										
				//if ((var_yaBeny < varzero) || (( var_yaBeny == "0") && (var_maBeny <= "0"))) {							
				if ((var_yaBeny <= varzero) && (var_maBeny <= "0") || (var_yaBeny < varzero)) {							
					//alert(" var_yaBeny is: "  + var_yaBeny + " , var_maBeny: " + var_maBeny)
					alert("Beneficiary's date of birth cannot be less than your projected retirement date. ");
					
					blankBeneficiaryDOB();
					
				}else {
						//document.frmCal.ma.value = ma; //WJL
						document.frmCal.yaBeny.value = var_yaBeny;
						document.frmCal.maBeny.value = var_maBeny; 
						document.frmCal.daBeny.value = var_daBeny;				
						var_yaBenyDOB = document.frmCal.yaBeny.value;
						var_maBenyDOB = document.frmCal.maBeny.value;
						var_daBenyDOB = document.frmCal.daBeny.value;
						//var rowC = document.frmCal.yaC6690.value;
						var rowC = ya;
						var colC = parseInt(var_yaBenyDOB);
						var colCMM = parseInt(var_maBenyDOB);
						var colCDD = parseInt(var_daBenyDOB);
						var varyaBenydispay = parseInt(var_yaBenyDOB);
						var varmaBenydisplay = parseInt(var_maBenyDOB);								
						if ((colC <= 0) && (colCMM <= 0)) { // both YY and MM is 0	
								//alert("716 colC: " + colC + ", colCMM:" + colCMM);
								blankOptionCvalue();	
						}else{
								//var varrealcolC;
								document.frmCal.yaCfromYadisplay.value = OptC_OptionA_yaA;
								document.frmCal.yaC.value =  ya;
								document.frmCal.yaBenydispay.value = varyaBenydispay;
								document.frmCal.maBenydisplay.value = varmaBenydisplay;
								colC = parseInt(colC); //var_yaBenyDOB
								
								//modified 6-15-2017
								if (colCMM >= 6){ // If month >= 6 then around to 1 year. Ex. Age 13 and 6 months then will = 14 (age)
									colC = colC + 1;
									//alert("1165 colC = parseInt(colC) + 1; " + colC )										
								}else {									
									colC = colC ;
									}											
								//if ((colC >= 0) && (colC < 6)){ // 0 to 6
									//colC = 6;											
								//}									
								if (colC > 90){								
									colC = 90;
								}					
								if ((rowC >= 1) && (rowC <=90)){
										rowC = rowC;
									}else if (rowC > 90){
										rowC = 90; 
									}else {
										rowC = 0;				  
									} //if ((rowC >= 6) && (rowC <=90)){
								
								//After 4/2/2012 beneficiary's age start from age 1 so no need to do the match just block the code ///colC = (colC - 5)
								// Change on 6-15-2017
								//colC = (colC - 5) // the beneficiary's age start from age 6 instead of age 1 so colC(6) - 5 = age 1
								
								/**
								 * Main formulas matrix
								 * for hired on and  after 04-02-2017
								 ***/
								 
								var benefAryCfactor = aryC[rowC].substr(((colC-1)*6)+2, 6); //// Change on 6-15-2017
								//Example 1: Member's Age = 60(rowC), Beneficiary's Age = 1(colC)  then Factor = 0.8152  factor
								//rowC = 60  is the retiree Member's age. Excel Row# 60
								//colC = 1   is the beneficiary's age. Excel column#  1
								//Table look up: Row is 60, Column = 1. Factor is = 0.8152
								
								//Example 1 of the fomulas:  var benefAryCfactor = ary[60].substr((1-1)*6+2,6) = 0.8152
								//(Option C beneficiary's table at array age 60).(select six string from position 2 which is = 0.8152 factor)								
								//ary[60].substr(((1-1)*6)+2, 6)=  ary[60].substr(2, 6)  = 0.8152  factor
															
								//Example 2: Member's Age = 60(rowC), Beneficiary's Age = 8(colC)  then Factor = 0.8173  factor
								//rowC = 60  is Retiree Member's age. Excel Row# 60
								//colC = 8   is Beneficiary's age. Excel column# 1
								//Table look up: Row is 60, Column = 8. Factor is = 0.8173
								//Example of the fomulas:  ary[60].substr((8-1)*6+2,6)
								//(Option C beneficiary's table at array age 60).(select six string from position 44 which is = 0.8173 factor)								
								//ary[60].substr(((8-1)*6)+2, 6) = ary[60].substr(44, 6) = 0.8173
							
								/**
								 * Main formulas matrix
								 * for hired on and  after 04-02-2017
								 ***/
								 
								document.frmCal.myResultOptionCfator.value = benefAryCfactor;	//
								//	var OptionATotal = document.frmCal.AmountOptionA.value; //Avg of 3 years salary
								///block the old code 6-15-2017
								///colC = (colC + 5)// for display	add 5 years back to the age for the actual age 6 + 5 = age 11 for benee
																
								if (colC >= 90 ){
									colC += "+";										
									}
								document.frmCal.OptCbenfAge.value = colC; // cal age
						}//if (colC < 0) 
				}//if ((var_yaBeny < varzero) || (( var_yaBeny == "0") && (var_maBeny == "0"))) 
		}else{ 
		blankOptionCvalue();				
		}//if ((var_ybBeny != "") && (var_ybBeny > 0) && (var_mbBeny != "null") && (var_dbBeny != "null"))
	} // if else(isNaN(ya)){
} //function f_cal_beneficiaryDOB2nd(dp, mp, yp, isJulian, var_ybBeny, var_mbBeny, var_dbBeny, OptC_OptionA_yaA, rowCvar_yaC6690){


// general purpose function to see if an input value has been entered at all
function isEmpty(inputStr) {
	 if	(inputStr == ""	|| inputStr	== null) {
		return true;
	 }
	 return	false;
}
// function to determine if value is in acceptable range for this application
function inRange(inputStr, lo, hi) {
	var num = parseInt(inputStr, 10);
	if (num < lo || num > hi) {
	return false;
}
	return true;
}
// **END GENERIC VALIDATION FUNCTIONS** 

function checkNumber(input, min, max, msg)
{   
	msg = msg + " field has invalid data: " + input.value;
    var str = input.value;	
    for (var i = 0; i < str.length; i++) {
        var ch = str.substring(i, i + 1)
        if ((ch < "0" || "9" < ch) && ch != '.') {
            alert(msg);
			input.focus();
			//input.select();
            return false;
        }
    }
	
    var num = 0 + str
    if (num < min || max < num) {
        alert(msg + " not in range [" + min + ".." + max + "]");
        return false;
    }
    input.value = str;
    return true;
}

function custRound(x,places) {
    return (Math.round(x*Math.pow(10,places)))/Math.pow(10,places)
}


//6-27-2018 for quetion 7 currency format input
//6/22/2018 test
	/* With Prefix currencyformat_number*/
	//document.frmCal.without-prefix.value
	///var input2 = document.frmCal.without-prefix.value;
//	var input2 = document.getElementById('without-prefix');
	/**
	input2.addEventListener('keyup', function(e)
	{
		input2.value = currencyformat_number(this.value, '$ ');
	});
	*/
	/* Function currencyformat_number */
	
function currencyformat_number(number, prefix, thousand_separator, decimal_separator)
{
	var thousand_separator = thousand_separator || ',',
		decimal_separator = decimal_separator || '.',
		regex		= new RegExp('[^' + decimal_separator + '\\d]', 'g'),
		number_string = number.replace(regex, '').toString(),
		split	  = number_string.split(decimal_separator),
		rest 	  = split[0].length % 3,
		result 	  = split[0].substr(0, rest),
		thousands = split[0].substr(rest).match(/\d{3}/g);
	
	if (thousands) {
		separator = rest ? thousand_separator : '';
		result += separator + thousands.join(thousand_separator);
	}
	result = split[1] != undefined ? result + decimal_separator + split[1] : result;
    computeForm();
	return prefix == undefined ? result : (result ? prefix + result : '');
}



function CurrencyFormatted(amount)
{
    var n = parseFloat(amount);
    if(isNaN(n)) { n = 0.00; }
    var minus = '';
    if(n < 0) { minus = '-'; }
    n = Math.abs(n);
    n = parseInt((n + .005) * 100);
    n = n / 100;
    s = new String(n);
    if(s.indexOf('.') < 0) { s += '.00'; }
    if(s.indexOf('.') == (s.length - 2)) { s += '0'; }
    s = minus + s;
    return s;
} // function CurrencyFormatted()

function CommaFormatted(amount)
{
    var delimiter = ",";
    var a = amount.split('.',2)
    var d = a[1];
    var i = parseInt(a[0]);
    if(isNaN(i)) { return ''; }
    var minus = '';
    if(i < 0) { minus = '-'; }
    i = Math.abs(i);
    var n = new String(i);
    var a = [];
    while(n.length > 3)
    {
        var nn = n.substr(n.length-3);
        a.unshift(nn);
        n = n.substr(0,n.length-3);
    }
    if(n.length > 0) { a.unshift(n); }
    n = a.join(delimiter);
    if(d.length < 1) { amount = n; }
    else { amount = n + '.' + d; }
    amount = minus + amount;
    return amount;
} // function CommaFormatted()

function validateAgeFactor(field) {
 var input = field.value;
    //if ((!input == null || !input.length == 0)){
    if (!input.value <= '0.00')
        {
        alert("Please select AgeFactor drop down menu." + input);
        document.frmCal.YRofServices.value = "0.00";        
        select(field);
    }
    computeForm();
    return true;
}// function validateAgeFactor(field)


function validateYRAverageSalary(field){
 var input = field.value;
    if ((!input == null || !input.length == 0)){
        if (!checkNumber(document.frmCal.YRAverageSalary, 1, 999999999, "Enter your highest 3-year salary average")) //$99,999,999
        {
        document.frmCal.YRAverageSalary.value = "Invalid";		
        }
    }
	field.focus();
    computeForm();
    return true;
}// function validateYRAverageSalary(field)



function validateisYearyssd(field){
 var input = field.value;
    if ((!input == null || !input.length == 0)){
        if (!checkNumber(document.frmCal.yssd, 1900, 9999, "Your year of service start (year)"))//range 1900 - 9999 years
        {
        document.frmCal.yssd.value = "Invalid";					
        }
    }
	field.focus();
    computeForm();
    return true;
}//function validateisYearyssd(field)



function validateisYear(field){
 var input = field.value;
    if ((!input == null || !input.length == 0)){
        if (!checkNumber(document.frmCal.yb, 1900, 9999, "Your date of birth (year)"))//range 1900 - 9999 years
        {
        document.frmCal.yb.value = "Invalid";					
        }
    }
	field.focus();
    computeForm();
    return true;
}//function validateisYear(field)


function validateisYearyp(field){
 var input = field.value;
	if ((!input == null || !input.length == 0)){	
		if (!checkNumber(document.frmCal.yp, 1900, 9999, "Your projected date of retirement (year)"))//range 1900 - 9999 years
		{
			document.frmCal.yp.value = "Invalid";		
		}
	}
	field.focus();
    computeForm();
    return true;
}//function validateisYearyp(field)


function validateisYearybBeny(field){
 var input = field.value;
	if ((!input == null || !input.length == 0)){	
		if (!checkNumber(document.frmCal.ybBeny, 1900, 9999, "Your beneficiary's age (year)"))//range 1900 - 9999 years
		{
			document.frmCal.ybBeny.value = "Invalid";		
		}
	}
	field.focus();
    computeForm();
    return true;
}//function validateisYearybBeny(field)


/** For calendar ***/
function getMonthLength(month,year,julianFlag)
{
   var ml;
   if(month==1 || month==3 || month==5 || month==7 || month==8 || month==10 || month==12)
      {ml = 31;}
   else {
       if(month==2) {
          ml = 28;
          if(!(year%4) && (julianFlag==1 || year%100 || !(year%400)))
             ml++;
       }
       else
          {ml = 30;}
   }
   return ml;
}//function getMonthLength(month,year,julianFlag)

//work with UTC (Universal Time Coordinated) time, or GMT, rather than the computer's local time.
function useCurrentDate(field)
{   //var input = field.value;
	var months = new Array(13);
	months[1]="January"; 
	months[2]="February";
	months[3]="March";
	months[4]="April";
	months[5]="May";
	months[6]="June";
	months[7]="July";
	months[8]="August";
	months[9]="September";
	months[10]="October";
	months[11]="November";
	months[12]="December";
	var time = new Date(); //creates a new Date object 
	//var lmonth=months[time.getMonth() + 1];
	var lmonth = time.getMonth() + 1; //Retrieves the month component of the date as a number from 0 to 11 (0=January, 1=February, etc)
	var date = time.getDate(); //Retrieves the day-of-month component of the date as a number from 1 to 31
	var year = time.getFullYear(); // Retrieves the year component of the date as a 4-digit number
	if (year < 2000)
	year = year + 1900;
	
	document.frmCal.yp.value = year;
	document.frmCal.mp.selectedIndex = lmonth;
	//document.frmCal.dp.value = date;
	document.frmCal.dp.selectedIndex = date;
	computeForm();
	return true;
}


function validateChkBox(chk){ 
  if (chk.checked == 1){  // I agree, disable = false
		//alert("Thank You");
				
		//Enter service start date mm/dd/yyyy  add 3-15-2018
		document.frmCal.mssd.disabled = false;
		document.frmCal.dssd.disabled = false;
		document.frmCal.yssd.disabled = false;	
			
		document.frmCal.mb.disabled = false;
		document.frmCal.db.disabled = false;
		document.frmCal.yb.disabled = false;
		
		document.frmCal.mp.disabled = false;
		document.frmCal.dp.disabled = false;
		document.frmCal.yp.disabled = false;
		document.frmCal.groupmember.disabled = false;
		document.frmCal.militaryveteran.disabled = false;
		document.frmCal.YRofServices.disabled = false;
		document.frmCal.yrserMM.disabled = false;
		document.frmCal.YRAverageSalary.disabled = false;
		//document.frmCal.R7q.disabled = false;
		document.frmCal.yaAdisplayonly.disabled = false;
		document.frmCal.OpAyaservicedisplay.disabled = false;
		document.frmCal.PercentFactor.disabled = false;
		document.frmCal.YRAverageSalarydisplay.disabled = false;
		document.frmCal.Aveteranbenf.disabled = false;
		document.frmCal.AmountOptionA.disabled = false;
		document.frmCal.MonthlyBenefit.disabled = false;
		document.frmCal.txtOptionB.disabled = false;
		document.frmCal.txtOptionBmonthly.disabled = false;
		document.frmCal.myResultOptionC.disabled = false;
		document.frmCal.myResultOptionCmonthly.disabled = false;
		document.frmCal.myResultOptionCTwoThirdYearly.disabled = false;
		document.frmCal.myResultOptionCTwoThirdMonthly.disabled = false;
		document.frmCal.R7q.disabled = false;	
  }else{		
		if (!document.frmCal.checkboxAgree.checked){      //I do not agree, disable = true
			alert("To use the calculator, please check  'I Agree, continue filling form. '");
			document.frmCal.checkboxAgree.focus()
			
			//Enter service start date mm/dd/yyyy  add 3-15-2018
			document.frmCal.mssd.disabled = false;
			document.frmCal.dssd.disabled = false;
			document.frmCal.yssd.disabled = false;
			
			document.frmCal.mb.disabled = true;
			document.frmCal.db.disabled = true;
			document.frmCal.yb.disabled = true;
			
			document.frmCal.mp.disabled = true;
			document.frmCal.dp.disabled = true;
			document.frmCal.yp.disabled = true;
			document.frmCal.groupmember.disabled = true;
			document.frmCal.militaryveteran.disabled = true;
			document.frmCal.YRofServices.disabled = true;
			document.frmCal.yrserMM.disabled = true;
			document.frmCal.YRAverageSalary.disabled = true;
			//document.frmCal.R7q.disabled = true;
			document.frmCal.yaAdisplayonly.disabled = true;
			document.frmCal.OpAyaservicedisplay.disabled = true;
			document.frmCal.PercentFactor.disabled = true;
			document.frmCal.YRAverageSalarydisplay.disabled = true;
			document.frmCal.Aveteranbenf.disabled = true;
			document.frmCal.AmountOptionA.disabled = true;
			document.frmCal.MonthlyBenefit.disabled = true;
			document.frmCal.txtOptionB.disabled = true;
			document.frmCal.txtOptionBmonthly.disabled = true;
			document.frmCal.myResultOptionC.disabled = true;
			document.frmCal.myResultOptionCmonthly.disabled = true;
			document.frmCal.myResultOptionCTwoThirdYearly.disabled = true;
			document.frmCal.myResultOptionCTwoThirdMonthly.disabled = true;
			document.frmCal.R7q.disabled = true;
			
			blankRequiredvalue();
			blankRetireeEnterServiceStartDate(); //3/15/2018
			blankRetireeDOB();
			blankBeneficiaryDOB();
			blankOptionAvalue();
			blankOptionCvalue();
			blankCalbyDOB();
			blankCalbyAge();
		}//if (!document.frmCal.checkboxAgree.checked) 
    //chk.checked = 1; // open the code to check for client
   }//if (chk.checked == 1) else
}//function validateChkBox(chk)



function blankRequiredvalue(){
//	Enter service start date mm/dd/yyyy  add 3-15-2018
	document.frmCal.mssd.value = "null";
	document.frmCal.dssd.value = "null";
	document.frmCal.yssd.value = "";
	
	document.frmCal.mb.value = "null";
	document.frmCal.db.value = "null";
	document.frmCal.yb.value = "";
	document.frmCal.mp.value = "null";
	document.frmCal.dp.value = "null";
	document.frmCal.yp.value = "";
	document.frmCal.groupmember.value = 1;
	document.frmCal.militaryveteran.value = "No";
	document.frmCal.YRofServices.value = 10;
	document.frmCal.yrserMM.value = 0;
	document.frmCal.YRAverageSalary.value = "";
	return;
}//function blankRequiredvalue()

function blankOptionAvalue(){
	//Option A blank
	document.frmCal.grpmember.value = "";
	document.frmCal.yaAdisplayonly.value = "";
	document.frmCal.yaC6690.value = "";
	document.frmCal.yaA.value = "";
	document.frmCal.AmountOptionAbeforeVeteranBenf.value = "";
	document.frmCal.txtOptionBbeforeVeteranBenf.value = "";
	document.frmCal.txtOptionBPercentage.value = "";

	
	//document.frmCal.YRAverageSalary.value = "";	
	
	document.frmCal.AgeFactor.value = ""; //Option A age factor array		
	document.frmCal.PercentFactor.value = "";
	document.frmCal.OpAyaservicedisplay.value = "";
	document.frmCal.OpAyaservice.value = "";
	document.frmCal.OpAyaserviceVeteran.value = "";			
	document.frmCal.AmountOptionA.value = "";
	document.frmCal.Aveteranbenf.value = "";
	document.frmCal.MonthlyBenefit.value = "";
	
	// Option B blank
	
	document.frmCal.YRAverageSalarydisplay.value = "";
	document.frmCal.txtOptionB.value = "";
	document.frmCal.txtOptionBmonthly.value = "";		
	//Option C blank
	document.frmCal.myResultOptionCfator.value = "";
	document.frmCal.AmountOptionAC.value = "";		
	document.frmCal.myResultOptionC.value = "";
	document.frmCal.myResultOptionCmonthly.value = "";
	//Option C blank 2/3 of option A	
	document.frmCal.yaBenydispay.value = "";										
	document.frmCal.maBenydisplay.value = "";				
	document.frmCal.OptCbenfAge.value = ""			
	document.frmCal.myResultOptionCTwoThirdYearly.value = "";
	document.frmCal.myResultOptionCTwoThirdMonthly.value = "";	
	return;
}//function blankOptionAvalue(){

// clear the values if <option value="0" selected>Select Beneficiary's Age</option>
function blankOptionCvalue(){ 	
	//Option C blank
	document.frmCal.yaCfromYadisplay.value = "";
	document.frmCal.yaC.value = "";
	document.frmCal.AmountOptionAC.value = "";
	document.frmCal.myResultOptionCfator.value = "";		
	document.frmCal.myResultOptionC.value = "";
	document.frmCal.AmountOptionACbeforeVeteranBenf.value = "";
	document.frmCal.myResultOptionCmonthly.value = "";
	//Option C blank 2/3 of option A	
	document.frmCal.yaBenydispay.value = "";										
	document.frmCal.maBenydisplay.value = "";				
	document.frmCal.OptCbenfAge.value = ""				
	document.frmCal.myResultOptionCTwoThirdYearly.value = "";
	document.frmCal.myResultOptionCTwoThirdMonthly.value = "";
	return;
}





function blankRetireeEnterServiceStartDate(){
//	Enter service start date mm/dd/yyyy  add 3-15-2018
	document.frmCal.mssd.value = "";
	document.frmCal.dssd.value = "";
	document.frmCal.yssd.value = "";
	return;
	}

function blankRetireeDOB(){
	document.frmCal.ya.value = ""; 
	document.frmCal.ma.value = "";
	document.frmCal.da.value = "";
	return;
	}
	
function blankBeneficiaryDOB(){
	document.frmCal.yaBeny.value = "";
	document.frmCal.maBeny.value = ""; 
	document.frmCal.daBeny.value = "";
	return;
}

function blankCalbyDOB(){	 //blankCalbyBeneficiaryDOBSelectionfield
	document.frmCal.ybBeny.value = "";
	document.frmCal.mbBeny.value = "null";
	document.frmCal.dbBeny.value = "null";
	return;
}

function blankCalbyAge(){  //blankCalbyAgeBeneficiarySelectionfield
	document.frmCal.BenefAgeYY.value = 0;
	document.frmCal.BenefAgeMM.value = 0;
	return;
}


function blankOptionA_C_Report_value(){
//8-13-2018
//alert("2445 else if (((ya >= 36) && (YRofS >= 20)) || ((ya >= 55) && (YRofS >= 10)))");
//other wise blank value for not eligible to retire
	//Option A blank
	//document.frmCal.grpmember.value = "";
	//document.frmCal.yaAdisplayonly.value = "";
	//document.frmCal.yaC6690.value = "";
	//document.frmCal.yaA.value = "";
	//document.frmCal.AmountOptionAbeforeVeteranBenf.value = "";
	//document.frmCal.txtOptionBbeforeVeteranBenf.value = "";
	//document.frmCal.txtOptionBPercentage.value = "";	
	//document.frmCal.YRAverageSalary.value = "";	
	document.frmCal.AgeFactor.value = 0.00000; //Option A age factor array		
	document.frmCal.PercentFactor.value = "0%";
	//document.frmCal.OpAyaservicedisplay.value = "";
	//document.frmCal.OpAyaservice.value = "";
	//document.frmCal.OpAyaserviceVeteran.value = "";
	document.frmCal.Aveteranbenf.value = "0.00";			
	document.frmCal.AmountOptionA.value = "0.00";
	//document.frmCal.Aveteranbenf.value = "";
	document.frmCal.MonthlyBenefit.value = "0.00";
	
	// Option B blank	
	//document.frmCal.YRAverageSalarydisplay.value = "";
	document.frmCal.txtOptionB.value = "0.00";
	document.frmCal.txtOptionBmonthly.value = "0.00";		
	//Option C blank
	//document.frmCal.myResultOptionCfator.value = "0.00";
	document.frmCal.myResultOptionC.value = "0.00";
	document.frmCal.myResultOptionCmonthly.value = "0.00";
	document.frmCal.myResultOptionCTwoThirdYearly.value = "0.00";
	document.frmCal.myResultOptionCTwoThirdMonthly.value = "0.00";
	
	///document.frmCal.AmountOptionAC.value = "0.00";		
	///document.frmCal.myResultOptionC.value = "10.00";
	///document.frmCal.myResultOptionCmonthly.value = "0.00";
	//Option C blank 2/3 of option A	
	///document.frmCal.yaBenydispay.value = "0.00";										
	///document.frmCal.maBenydisplay.value = "";				
	///document.frmCal.OptCbenfAge.value = ""			
	///document.frmCal.myResultOptionCTwoThirdYearly.value = "0.00";
	///document.frmCal.myResultOptionCTwoThirdMonthly.value = "0.00";	
	
	//Option A blank Report display value
	//document.frmCal.AgeFactor.value = "0.00000"; //Option A age factor array	
	//document.frmCal.PercentFactor.value = "0%"; //Option A PercentFactor
	//document.frmCal.AmountOptionAbeforeVeteranBenf.value = ""; //Option A AmountOptionAbeforeVeteranBenf
	//document.frmCal.AmountOptionA.value = ""; //Option A Annual Allowance Yearly:  
	///document.frmCal.MonthlyBenefit.value = ""; //Option A Annual Allowance MonthlyBenefit
	///document.frmCal.txtOptionB.value = ""; //Option B Annual Allowance txtOptionB
	///document.frmCal.txtOptionBbeforeVeteranBenf.value = ""; //Option B Annual Allowance  txtOptionBbeforeVeteranBenf
	///document.frmCal.txtOptionBPercentage.value = ""; //Option B An txtOptionBPercentage
	///document.frmCal.txtOptionBmonthly.value = ""; //Option B An txtOptionBPercentage	
	return;
}//function blankOptionA_C_Report_value(){


//Question 8. OPTIONAL: If you are interested in estimating your benefits under Option C, please select and enter Date of Birth or select your beneficiary's age on the birthdays that are closest to your date of retirement. Reminder: Your Option C beneficiary must be your spouse, child, sibling, parent or former spouse who has not remarried.
function fdisable(OnOff) { //disable or enable radiobutton
	var varR7q; //document.frmCal.R7q[i].value
	var varV1;
	var varV2;
	//var varOnOfffalse = ; 
	varV1 = "V1"; // cal by DOB
	varV2 = "V2"; // cal by age		
	//varradioOptional7q
	var frmR7 = document.frmCal;
	for (var i = 0; i < frmR7.R7q.length; i++){ // loop through the form radiobutton values
		if (frmR7.R7q[i].checked){
			varR7q =  frmR7.R7q[i].value;
			break;	//varR7q = i;
		}
	}

	if (varR7q == varV1){
		if (OnOff = true ){
				document.frmCal.R7q.value = "V1";
				document.frmCal.BenefAgeYY.disabled = OnOff;
				document.frmCal.BenefAgeMM.disabled = OnOff;	
				document.frmCal.mbBeny.disabled = false;
				document.frmCal.dbBeny.disabled = false;
				document.frmCal.ybBeny.disabled = false;	
			}
	}else{
			if (varR7q == varV2){
				if (OnOff = true){					
					document.frmCal.R7q.value = "V2";
					document.frmCal.ybBeny.disabled = OnOff;
					document.frmCal.mbBeny.disabled = OnOff;
					document.frmCal.dbBeny.disabled = OnOff;	
					document.frmCal.BenefAgeYY.disabled = false;
					document.frmCal.BenefAgeMM.disabled = false;				
				}//if (OnOff = true)
			}//if (varR7q == varV2)
	}//if (varR7q == varV1)
}//function fdisable(OnOff)


//3/19/2018
//Call the 1st set of function arrays
CreateMultiArrayC_before_04022012() //must keep this for 1st set of calculator

//3/19/2018
//Call the 2nd set of function arrays
CreateMultiArrayC_onandafter_04022012() //must keep this for 2nd set of calculator

//function computeForm(form) { ===============================================================
function computeForm(form) {
	
	//6/27/2018
	//6/22/2018 test
	/* With Prefix currencyformat_number*/
	//document.frmCal.without-prefix.value
	//var input2YRAverageSalary = document.getElementById('without-prefix');
	var input2YRAverageSalary = document.getElementById('YRAverageSalary');
	/**
	
	input2YRAverageSalary.addEventListener('keyup', function(e)
	{
		input2YRAverageSalary.value = currencyformat_number(this.value, '$ ');
	});
	**/
	
		var vartrue1 = "use1stset"; //using 1st set of the calculator
		var vartrue2 = "use2ndset"; //using 2nd set of the calculator
		var varremender1 = ""; //using 1st set of the calculator display message
		var varremender2 = ""; //using 2nd set of the calculator display message
		var displayenterservicedate = ""; 
		var varNot_eligible_retire_note = ""; //display_Not_eligible_retire
		
		//for Option B percentage of OptionA
		var varPer100 = 1; //100% of OptionA
		var varPer99 = 0.99; //99% of OptionA
		var varPer98 = 0.98; //98% of OptionA
		var varPer97 = 0.97; //97% of OptionA
		var varPer96 = 0.96; //96% of OptionA
		var varPer95 = 0.95; //95% of OptionA
		
	   // var ml={31,28,31,30,31,30,31,31,30,31,30,31}; // For calendar 
	   var MNames = new Array("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec");
	
	  if(  	  		
		   (document.frmCal.yssd.value == "" || document.frmCal.yssd.value.length == 0) ||
		   (document.frmCal.mssd.value == null || document.frmCal.mssd.value.length == 0) ||
		   (document.frmCal.dssd.value == null || document.frmCal.dssd.value.length == 0) ||		   
		   (document.frmCal.yp.value == "" || document.frmCal.yp.value.length == 0) ||
		   (document.frmCal.mp.value == null || document.frmCal.mp.value.length == 0) ||
		   (document.frmCal.dp.value == null || document.frmCal.dp.value.length == 0) ||
		   (document.frmCal.yb.value == "" || document.frmCal.yb.value.length == 0) ||
		   (document.frmCal.mb.value == null || document.frmCal.mb.value.length == 0) ||
		   (document.frmCal.db.value == null || document.frmCal.db.value.length == 0))
   	   {
		  return;
	   }
	   //3/19/2018
	   //1) Enter your enter service start date (mm/dd/yyyy)	   	
	   var mssd = document.frmCal.mssd.options[document.frmCal.mssd.selectedIndex].value;
	   var dssd = document.frmCal.dssd.options[document.frmCal.dssd.selectedIndex].value;
	   var yssd = document.frmCal.yssd.value;
			
	   // 3-19-2018
	   var yb = document.frmCal.yb.value;	//2) Enter your date of birth (mm/dd/yyyy)
	   var mb = document.frmCal.mb.options[document.frmCal.mb.selectedIndex].value;
	   var db = document.frmCal.db.options[document.frmCal.db.selectedIndex].value;
	   

	   var yp = document.frmCal.yp.value;   //3) Enter your projected date of retirement (mm/dd/yyyy) 
	   var mp = document.frmCal.mp.options[document.frmCal.mp.selectedIndex].value;
	   var dp = document.frmCal.dp.options[document.frmCal.dp.selectedIndex].value;
	   
		//var d1servicedate = "2012-4-2"; //YYYY-M-D
		//var curreentoday1 = new Date(); 
		//document.write("<p>Current date curreentoday1: " + curreentoday1 + "</p>"); //Enter Service Start date
		
		//var d1servicedate = yssd.trim() + "-" + mssd.trim() + "-" + dssd.trim().toString(); //YYYY-MM-DD
		var d1servicedate =  mssd.trim() + "/" + dssd.trim() + "/" + yssd.trim(); //var d = new Date("02/07/2011"); // "mm/dd/yyyy" 
		//var d1servicedate = "02/07/2011"; MM/DD/YYYY
		//alert("<p>1945. Enter service start date: d1servicedate " + d1servicedate + " MM/DD/YYYY " + "</p>"); //Enter Service Start date
		
		var enterservicedate = new Date(d1servicedate);
		//alert("1948 enterservicedate:" + enterservicedate); //8/21/2018
		//enterservicedate = enterservicedate.toLocaleDateString();
		//var today = new Date(Date.UTC(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate() ));
		//enterservicedate = new Date(enterservicedate);
		var d2newlawdate = "4/2/2012"; //MM/DD/YYYY Law change date. must Keep this
		var newlawchangedate = new Date(d2newlawdate);
		///document.write("<p>2a. Law change date(4/2/2012): newlawchangedate: " + newlawchangedate + " MM/DD/YYYY " + "</p>");
		///alert("<p>2a. Law change date(4/2/2012): newlawchangedate: " + newlawchangedate + " MM/DD/YYYY " + "</p>"); //Enter Service Start date
		//DOB
		var d3dob =  mb.trim() + "/" + db.trim() + "/" + yb.trim(); //var d = new Date("02/07/2011"); // "mm/dd/yyyy" 
		var dobdate = new Date(d3dob);//day of birth 
		//alert("1958 d3dob:" + d3dob); //8/21/2018
		//alert("1959 dobdate:" + dobdate); //8/21/2018
		//3)Projected Retirement date
		//alert("1937 MM/DD/YYYY mp" + mp + "dp" + dp + "yp" + yp);
		var d4projecteddate = mp.trim() + "/" + dp.trim() + "/" + yp.trim();
		var newd4projecteddate = new Date(d4projecteddate);//day of birth
		//alert("1963 d4projecteddate:" + d4projecteddate); //8/21/2018
		//alert("1964 newd4projecteddate:" + newd4projecteddate); //8/21/2018
		var boolean1 = Boolean(enterservicedate < newlawchangedate);   //if true then use the 1st set of the calculator
		//alert("1963 boolean1:" + boolean1); //8/21/2018
		var boolean2 = Boolean(enterservicedate >= newlawchangedate);  //if true then use the 2nd set of the calculator
		var boolean3 = Boolean(enterservicedate <= dobdate);   //if true then use the 1st set of the calculator
		var boolean4 = Boolean(enterservicedate >= newd4projecteddate); //if true then will alert("Note: Your projected date of retirement must be greater than your service start date. Please correct the projected date of retirement to contine. ");
		
		if ((enterservicedate >= newd4projecteddate)) {
			//if (((enterservicedate.getDate() != "") && (newd4projecteddate.getDate() != ""))&&( boolean4 = true)){
			 //alert("1973 enterservicedate >= newd4projecteddate") + "enterservicedate:" + enterservicedate + "newd4projecteddate:" + newd4projecteddate; //8/21/2018
			 alert("Note: Your projected date of retirement must be greater than your service start date. Please correct the projected date of retirement to continue. ");
			 field.focus();
			}
		
		//if (boolean3 == true){
		//	alert("1873 Sorry, Enter Serviced ate date is less then birth can not be less than the");
		//	}
		
		//Hard coded the maessage base on before or on and after 4/2/2012
		//1st befoe 4/2/2012<p style="color:#000099;">
		varremender1 = "<b>REMINDER: If your total years of creditable service on your projected date of retirement is LESS than 20 years, you must be at least age 55 AND you must have at least 10 years of creditable service in order to be eligible to retire.</b>";
		//2nd on and after 4/2/2012
		varremender2 = "<b>REMINDER: Eligibility criteria to retire. All members must have a minimum of 10 years creditable service. Members in Group 1 must be a minimum of 60 years of age. Members in Group 2 must be a minimum of 55 years of age. Members in Group 4 must be a minimum of 50 years of age.</b>";
		//format date MM/DD/YYYY 04/02/2012
		displayenterservicedate = ((enterservicedate.getMonth() + 1) + '/' + enterservicedate.getDate() + '/' +  enterservicedate.getFullYear());		


/** 8/14/2018
		if (boolean1 == true) { //hired before on 04/02/2012 
				CreateMultiArrayC_before_04022012(); //Call the 1st set of function arrays, must keep this for 1st set of calculator 			
				document.frmCal.vartrueorfalse.value = vartrue1; //send the value to the form we use1stset
				///document.getElementById("displayvartrueorfalse").innerHTML = document.frmCal.vartrueorfalse.value; //display back to the <p></p>
				document.frmCal.reminder.value = varremender1; //send the value to the form 
				document.getElementById("displayreminder").innerHTML = '<div style="color:#ff0000;">' + document.frmCal.reminder.value + "</div>"; //display back to the <p>displayreminder</p>
				//display in red = #ff0000
//				document.getElementById("displayreminder").innerHTML += '<div style="color:#ff0000;">' + document.frmCal.reminder.value + "</div>"; //display back to the <p>displayreminder</p>

				document.frmCal.enterservicedateddisplayonly.value = displayenterservicedate; //send the value to the form
				if (boolean3 == true){ //enterservicedate <= dobdate
				alert("Note: Your service start date must be greater than your date of birth. Please correct the service start date to continue.");
				}
				//alert("1850 boolean1 == true");
		}else{  
		   		if (boolean2 == true) { //hired on and after 04/02/2012			
				CreateMultiArrayC_onandafter_04022012() //Call the 2nd set of function arrays, must keep this for 2nd set of calculator
				document.frmCal.vartrueorfalse.value = vartrue2; //try to send the value to the form use2ndset
				///document.getElementById("displayvartrueorfalse").innerHTML = document.frmCal.vartrueorfalse.value; //display back to the <p></p>
				document.frmCal.reminder.value = varremender2; //try to send the value to the form
				//document.getElementById("displayreminder").innerHTML = document.frmCal.reminder.value; //display back to the <p></p>
				document.getElementById("displayreminder").innerHTML = '<div style="color:#ff0000;">' + document.frmCal.reminder.value + "</div>"; //display back to the <p>
				document.frmCal.enterservicedateddisplayonly.value = displayenterservicedate; //try to send the value to the form
				if (boolean3 == true){
				alert("Note: Your service start date must be greater than your date of birth. Please correct the service start date to continue.");
				}
				}//if (boolean2 == true)
		}//if (boolean1 == true)
*/
		// Month length 0->use calendar length
	   // 0 if Gregorian, 1 is Julian   
	   var mLength = 0; //(document.frmCal.monthLength.options[document.frmCal.monthLength.selectedIndex].value);
		var isJulian = 1; // document.frmCal.isJulian.options[document.frmCal.isJulian.selectedIndex].value;
		var ma = 0;
		var ya = 0;
		var var_yaBeny; //WJL
		var var_maBeny; //WJL	  
		var var_daBeny; //WJL
	   
		var var_yaBenyDOB;
		var var_maBenyDOB;
		var var_daBenyDOB;
		var da = dp-db; //Age = (Projected date - Retiree's DOB) 
		
		var displayAmountOptionAC;
		var varYRAverageSalarydisplay //for display YRAverageSalary 
		var OptC_OptionA_yaA; // for option C display
		var myResultOptionCdisplay; //document.frmCal.myResultOptionC.value
		var NonMax_YRAOptionC_Max_YRAOptionCdisplay;
		var varOpAyaservicedisplay;
		var varR7q;  //radionOptional7q
		var varV1;
		var varV2;
		// This is the all-important day borrowing code.
	   if(da<0) //day-Age
	   {
		  mp--; //projected month of retirement
		  // Borrow months from the year if necesssary.
		  if(mp<1)
		  {
		 yp--; //projected year of retirement
		 // Determine no. of months in year
		 if(mLength)
			{mp=mp+parseInt(365/mLength);}
		 else
			{mp=mp+12;}
		  }
		  if(mLength==0) // Use real month length if no fixed
		  {              // length is indicated - note that we add a leap day if necessary.
			 ml=getMonthLength(mp,yp,isJulian);
		 	 da=da+ml;
		  }
		  // For this case, everything works like it is.
		  else
		 {da+=mLength;} // Use fixed month length
	   }//if(da<0)   
	
	   ma = mp - mb; //retiree's age of month //WJL
	   //7-1: This is Retiree's age in hidden Textbox: ya, ma, da	   
	   //mser = mp - mbs; //WJL
	   // Month borrowing code - borrows months from years.
	   if(ma<0) 
	   {
		  yp--;
		  if(mLength!=0)
		 {ma=ma+parseInt(365/mLength);
		 //alert("{ma=ma+parseInt(365/mLength);" + ma)
		 }
		  else
		 {ma=ma+12;}
	   }//if(ma<0)
	
	ya = yp - yb; //7-1: This is Retiree's age in hidden Textbox: ya, ma, da	 
	//retiree's age of year //WJL
	document.frmCal.da.value = da; //Day
	document.frmCal.ma.value = ma; //Month	  		
	document.frmCal.ya.value = ya; //year
	document.frmCal.yaAdisplayonly.value = ya; //display the year of the age only
	
	var varVeteran = document.frmCal.militaryveteran.options[document.frmCal.militaryveteran.selectedIndex].value; 
	var varGroup =  document.frmCal.groupmember.value;
	//frmYRAverageSalary = document.frmCal.YRAverageSalary.value;		
	//YRAverageSalarydisplay = document.frmCal.YRAverageSalary.value;
	//document.frmCal.YRAverageSalarydisplay.value = varYRAverageSalarydisplay;		

	//Begin calculator formulas	//////////////////////////////////////////////////
	/// SERVICE and VETERAN 
    var YRofS = document.frmCal.YRofServices.value; // 5) Enter your estimated total number of years of creditable service,
	///YRofS= custRound((YRofS),2);	
	var varyrserMM = document.frmCal.yrserMM.value; 
		

	//3-19-2018
	if (boolean1 == true) {
		//for 1st set of calculator
		CreateMultiArrayC_before_04022012(); //must keep this for 1st set of calculator
		if ((YRofS >=45) && (varyrserMM >= 1)) {
		varyrserMM = 0;		
		document.frmCal.yrserMM.value = varyrserMM;
		//alert("2027. calling the 1st set of calculator if ((YRofS >=45) && (varyrserMM >= 1)) {");
		}
	}else{
		//for 2nd set of calculator
	   if (boolean2 == true) {
		CreateMultiArrayC_onandafter_04022012() //must keep this for 2nd set of calculator
		if ((YRofS >=50) && (varyrserMM >= 1)) {
		varyrserMM = 0;		
		document.frmCal.yrserMM.value = varyrserMM;
		//alert("2036. calling the 2nd set of calculator if ((YRofS >=50) && (varyrserMM >= 1)) {");
		}		   
	  }
	}

	if ((varVeteran == "No") && (ya >= 36)){	
		varYRofS = parseInt(YRofS)
		YRofS = parseInt(YRofS)
		varyrserMM = parseInt(varyrserMM)
		if ((YRofS >= 10) && (varyrserMM == 0)){
			YRofS = YRofS;				
		}else if ((YRofS >= 10) && (varyrserMM >= 1)){				
			YRofS = custRound((YRofS + (varyrserMM/12)),5)
		}else{
			alert("You entered creditable service is less than 10, please check the benefit quide for more detail." )
		}
		document.frmCal.OpAyaservicedisplay.value = (varYRofS + "." + varyrserMM); // varyrserMM //varYRofS ; ///802 wjl			
		document.frmCal.OpAyaservice.value = YRofS
		document.frmCal.OpAyaserviceVeteran.value = YRofS
		document.frmCal.Aveteranbenf.value = "0.00"
		//document.frmCal.OpAyaservicedisplay.value = YRofS; // varyrserMM //varYRofS ; // wjl			
	}//if (varVeteran == "No"){
	
	var varVetBenefit;
	//$15 if veteran = yes, add $15 multiplies the of  number of years in service until 20 yrs and add Max $300 after 20 yr of serivces
	var vetbenefitperyear = 15; 
	
	var varYRofS
	var varYRofSAddoneyear
	if ((varVeteran == "Yes") && (ya >= 36)){
		//alert("729 varVeteran : " + varVeteran )
		YRofS = parseInt(YRofS)
		varYRofS = YRofS;
		varyrserMM = parseInt(varyrserMM)
		vetbenefitperyear = parseInt(vetbenefitperyear)		
		if ((varYRofS >= 10) && (varyrserMM == 0)){				
			if (varYRofS <= 20 ){							
				//YRofS = custRound((YRofS + (varyrserMM/12)),2)
				YRofS = (YRofS + varyrserMM)							
				vetbenefitperyear = YRofS * vetbenefitperyear;

			}else {
				//varYRofSAddoneyear = YRofS;
				YRofS = (YRofS + varyrserMM)	
				vetbenefitperyear = 300
			}
			
			document.frmCal.Aveteranbenf.value = vetbenefitperyear;
			document.frmCal.OpAyaservicedisplay.value = (varYRofS + "." + varyrserMM);			
			document.frmCal.OpAyaserviceVeteran.value = YRofS
			document.frmCal.OpAyaservice.value = YRofS;				
		}else if ((varYRofS >= 10) && (varyrserMM >= 1)){										
			YRofS = custRound((varYRofS + (varyrserMM/12)),5)
			varYRofSAddoneyear = varYRofS;
			if (varYRofS < 20){
					varYRofSAddoneyear = (varYRofSAddoneyear + 1)					
					vetbenefitperyear = varYRofSAddoneyear * vetbenefitperyear;
			}else {
					varYRofSAddoneyear = YRofS;
					vetbenefitperyear = 300
			}						
			document.frmCal.Aveteranbenf.value = vetbenefitperyear;			
			document.frmCal.OpAyaservicedisplay.value = (varYRofS + "." + varyrserMM);
			document.frmCal.OpAyaserviceVeteran.value = YRofS
			document.frmCal.OpAyaservice.value = varYRofSAddoneyear;
		}else{ //}else if ((YRofS >= 10) && (varyrserMM >= 1)){	
			document.frmCal.Aveteranbenf.value = ""
			alert("You entered creditable service is less than 10, please check the benefit quide for more details." )
		}//if ((varYRofS >= 10) && (varyrserMM == 0))
	}else{
		vetbenefitperyear = 0;
		vetbenefitperyear = parseInt(vetbenefitperyear);
		document.frmCal.Aveteranbenf.value = vetbenefitperyear;
	}//if ((varVeteran == "Yes") && (ya >= 36))		
	// END OF SERVICE and VETERAN

	   var OptA = ya;	
	   //var varLessthan36 = false;
 	   //3-19-2018
	   //var vartrue1 = "1stCal"; //using 1st calculator
	   //var vartrue2 = "2ndCal"; //using 2nd calculator
		if (boolean1 == true) {
			CreateMultiArrayC_before_04022012(); //must keep this for 1st set of calculator
  		    f_calOptionA1st(OptA, varGroup, varVeteran); // Option A factor
			//alert("2098. calling the 1st set of calculator f_calOptionA(OptA, varGroup, varVeteran);");
		}else{  
		   if (boolean2 == true) {
			//Call the 2nd set of function arrays
			CreateMultiArrayC_onandafter_04022012() //must keep this for 2nd set of calculator
  		    f_calOptionA2nd(OptA, varGroup, varVeteran, varYRofS); // Option A factor	
		    }
		}
 
	   var OptC = ya;
	   var OptC_ma = ma;	   	   
		OptC_OptionA_yaA = document.frmCal.yaAdisplayonly.value; //f_cal_beneficiaryDOB()
   
	   	 //3-19-2018
		if (boolean1 == true) {
			//Call the 1st set of function arrays
			CreateMultiArrayC_before_04022012(); //must keep this for 1st set of calculator
  		    f_calOptionC1st(OptC, varGroup, OptC_ma, OptC_OptionA_yaA); // Option C factor
 			//alert("2146. f_calOptionC1st(OptC, varGroup, OptC_ma, OptC_OptionA_yaA); // Option C factor");
			   //var varLessthan36 = false;
		}else{  
		   if (boolean2 == true) {
			//Call the 2nd set of function arrays
			CreateMultiArrayC_onandafter_04022012() //must keep this for 2nd set of calculator
  		    f_calOptionC2nd(OptC, varGroup, OptC_ma, OptC_OptionA_yaA); // Option C factor
			//alert("2153.f_calOptionC2nd(OptC, varGroup, OptC_ma, OptC_OptionA_yaA)");
		    }
		}

		// var rowC = ya;
		//8) OPTIONAL: beneficiary's date of birth (mm/dd/yyyy)
		var var_ybBeny = document.frmCal.ybBeny.value; //WJL
		var var_mbBeny = document.frmCal.mbBeny.options[document.frmCal.mbBeny.selectedIndex].value;
		var var_dbBeny = document.frmCal.dbBeny.options[document.frmCal.dbBeny.selectedIndex].value;	
		//for age and month calculation
		var var_yaC6690 = document.frmCal.yaC6690.value;
		var var_BenefAgeYY = document.frmCal.BenefAgeYY.options[document.frmCal.BenefAgeYY.selectedIndex].value;
		var var_BenefAgeMM =  document.frmCal.BenefAgeMM.options[document.frmCal.BenefAgeMM.selectedIndex].value;
		var_yaC6690 = parseInt(var_yaC6690);
		var_BenefAgeYY = parseInt(var_BenefAgeYY);
		var_BenefAgeMM = parseInt(var_BenefAgeMM);		
		var rowCvar_yaC6690 = var_yaC6690;		
		var colCvar_BenefAgeYY = var_BenefAgeYY;
		var colCMMvar_BenefAgeMM  = var_BenefAgeMM;

		myResultOptionCdisplay = document.frmCal.myResultOptionC.value;
		NonMax_YRAOptionC_Max_YRAOptionCdisplay = document.frmCal.AmountOptionACbeforeVeteranBenf.value;
		//display alert
		var yaAgeCheck = document.frmCal.yaAdisplayonly.value 		
		/** 6-27-2018
		var YRA = document.frmCal.YRAverageSalary.value; // 4) Enter your highest 3-year salary average (Example: 30000 without '$' or ',') 
		varYRAverageSalarydisplay = document.frmCal.YRAverageSalary.value;
		document.frmCal.YRAverageSalarydisplay.value = CommaFormatted(CurrencyFormatted(varYRAverageSalarydisplay));
		*/

		//document.frmCal.PercentFactor.value = custRound((i * YRofS),2);
		//6-27-2018 for question.7 Currencyformat after input
		/* With Prefix currencyformat_number*/
		//document.frmCal.without-prefix.value
		//var input2YRAverageSalary = document.getElementById('without-prefix');
		///var input2YRAverageSalary = document.getElementById('YRAverageSalary');	
		///input2YRAverageSalary.addEventListener('keyup', function(e)

		input2YRAverageSalary.addEventListener('change', function(e)
		{
			input2YRAverageSalary.value = currencyformat_number(this.value, '$ ');
			document.frmCal.YRAverageSalarydisplay.value = input2YRAverageSalary.value; //note1: must display to the YRAverageSalarydisplay text box after event
		}); //convert numbers with dollar sign and comma and decimal numbers ex. 12345.67 ==> $1,234.67
	
		varYRAverageSalarydisplay = document.frmCal.YRAverageSalary.value; //note2: must dispaly back to the YRAverageSalarydisplay text box
		//document.frmCal.YRAverageSalarydisplay.value = CommaFormatted(CurrencyFormatted(varYRAverageSalarydisplay));		
		document.frmCal.YRAverageSalarydisplay.value = varYRAverageSalarydisplay;

		var YRA = document.frmCal.YRAverageSalary.value; // 4) Enter your highest 3-year salary average (Example: 30000 without '$' or ',')		
		YRA = YRA.replace(/\$|,/g, ""); //6/27/2018 reverse format to number with decimal ex. $1,234.67 ==> 1234.67
		
		
		var i = document.frmCal.AgeFactor.value; // 1. Enter AgeFactor
		if (i > 1.0) {
			i = i / 100.0;
			document.frmCal.AgeFactor.value = i;
		}
		var PF = custRound((i * YRofS),5); //Percentage factor round to 2 decimal places	
		var parseFloatPFvalue = parseFloat(PF) 
		//document.frmCal.PercentFactor.value = (PFvalue);			
		
		//Radio button options question #8  OPTIONAL Option C options
		var frmR7q = document.frmCal;	
		for (var i = 0; i < frmR7q.R7q.length; i++){
			if (frmR7q.R7q[i].checked){
				varR7q =  frmR7q.R7q[i].value;
				break;
			}
		}		
		varV1 = "V1"; // cal by DOB
		varV2 = "V2"; // cal by age						
		if (varR7q == varV1){
			blankCalbyAge();
			blankOptionCvalue();				
			if ((var_ybBeny != "") && (var_ybBeny > 0) && (var_mbBeny != "null") && (var_dbBeny != "null"))	{	
					//f_cal_beneficiaryDOB1st(dp, mp, yp, isJulian, var_ybBeny, var_mbBeny, var_dbBeny, OptC_OptionA_yaA, rowCvar_yaC6690);
					//f_cal_beneficiaryDOB2nd(dp, mp, yp, isJulian, var_ybBeny, var_mbBeny, var_dbBeny, OptC_OptionA_yaA, rowCvar_yaC6690);
			 	   //3-19-2018
					if (boolean1 == true) {
						//Call the 1st set of function arrays
						CreateMultiArrayC_before_04022012(); //must keep this for 1st set of calculator
						f_cal_beneficiaryDOB1st(dp, mp, yp, isJulian, var_ybBeny, var_mbBeny, var_dbBeny, OptC_OptionA_yaA, rowCvar_yaC6690);
						//alert("2210. f_cal_beneficiaryDOB1st(dp, mp, yp, isJulian, var_ybBeny, var_mbBeny, var_dbBeny, OptC_OptionA_yaA, rowCvar_yaC6690)");
					}else{  
					   if (boolean2 == true) {
						//Call the 2nd set of function arrays
						CreateMultiArrayC_onandafter_04022012() //must keep this for 2nd set of calculator
						f_cal_beneficiaryDOB2nd(dp, mp, yp, isJulian, var_ybBeny, var_mbBeny, var_dbBeny, OptC_OptionA_yaA, rowCvar_yaC6690);
						//alert("2216. f_cal_beneficiaryDOB2nd(dp, mp, yp, isJulian, var_ybBeny, var_mbBeny, var_dbBeny, OptC_OptionA_yaA, rowCvar_yaC6690);");
						}
					}
			}
		}else{
				if (varR7q == varV2){					
					blankCalbyDOB();
					blankBeneficiaryDOB();
					blankOptionCvalue();				
					if ( ((rowCvar_yaC6690 > 0) && (colCvar_BenefAgeYY > 0)) || ( (rowCvar_yaC6690 > 0) && ((colCvar_BenefAgeYY > 0) || (colCMMvar_BenefAgeMM > 0)) ) ) {
					/// getArrayOptionC(rowC, colC, colCMM, varVeteran, displayAmountOptionAC, frmYRAverageSalary, OptC_OptionA_yaA, myResultOptionCdisplay, NonMax_YRAOptionC_Max_YRAOptionCdisplay)						
					//	getArrayOptionC(rowCvar_yaC6690, colCvar_BenefAgeYY, colCMMvar_BenefAgeMM, OptC_OptionA_yaA);		
						 if (boolean1 == true) { //Call the 1st set of function arrays
							//3/19/2018
							CreateMultiArrayC_before_04022012(); //must keep this for 1st set of calculator
							getArrayOptionC1st(rowCvar_yaC6690, colCvar_BenefAgeYY, colCMMvar_BenefAgeMM, OptC_OptionA_yaA);
							//alert("2234. getArrayOptionC1st(rowCvar_yaC6690, colCvar_BenefAgeYY, colCMMvar_BenefAgeMM, OptC_OptionA_yaA);");
						}else{  
						   if (boolean2 == true) {//Call the 2nd set of function arrays
							//3/19/2018			
							CreateMultiArrayC_onandafter_04022012() //must keep this for 2nd set of calculator
							getArrayOptionC2nd(rowCvar_yaC6690, colCvar_BenefAgeYY, colCMMvar_BenefAgeMM, OptC_OptionA_yaA);
							//alert("2241. getArrayOptionC2nd(rowCvar_yaC6690, colCvar_BenefAgeYY, colCMMvar_BenefAgeMM, OptC_OptionA_yaA);");
						  }//if (boolean1 == true) {
					}//if ( ((rowCvar_yaC6690 > 0) && (colCvar_BenefAgeYY > 0)) || ( (rowCvar_yaC6690 > 0) && ((colCvar_BenefAgeYY > 0) || (colCMMvar_BenefAgeMM > 0)) ) ) {
				}//if (varR7q == varV2){
			} //else{		
		}//if (varR7q == varV1){
		
		var MaxPF = 0.80; // Yearly Benefit Amount if PF>=80% then use 80% only
		var Max_YRA; // for calculation Max Yearly Average
		var Max_YRATotal;
		
		//var optA; //for Option B
		var Max_YRAOptionB99; //for Option B
		var  Max_YRAOptionBTotal; //for Option B
		
		var Max_YRAyOptionCfactor; // for Option C
		var Max_YRAOptionC // for Option C
		
		var NonMax_YRA; // for Option A calculation Non Max Yearly Average 
		var NonMax_YRAOptionB99;; //for Option B
		var NonMax_YRAOptionC;//for Option C
		var NonMax_YRAOptionC_Max_YRAOptionCdisplay;
		var NonMax_YRA_Total; // for calculation Non Max Yearly Average
		var NonMax_YRAOptionBTotal; //for calculation Non Max Option B  Yearly Average total
		var PFparseFloat36; 
		var displayPercentFactor;
	var varzerotext = "0";
	
	
	var vargrpmember = document.frmCal.groupmember.value;
	
    if (PF >= MaxPF) {// Option A PecentFactor reach to Maxium 80%		
			//for Option A
			displayPercentFactor = (0.80 * 100) + "%" ;
			document.frmCal.PercentFactor.value = displayPercentFactor;
			//document.frmCal.PercentFactor.value = (0.80 * 100) + "%" ; // If PercentFactor >= 80% maximum then use display 0.80
			//document.frmCal.PercentFactor.value = custRound((0.80 * 100),; // If PercentFactor >= 80% maximum then use display 0.80

				if (varVeteran == "Yes"){// for Option A				
					Max_YRA = (MaxPF * YRA); // for calculation (Ex. 0.20 * 10000.00 = 2000.00 )
					Max_YRATotal =  (Max_YRA + vetbenefitperyear) 		
					//Line 5. = 3. x 4. for display on the AmountOptionA text field (Ex. $2,000.00)  		
					
				}else{
					Max_YRA = (MaxPF * YRA);
					Max_YRATotal = (MaxPF * YRA); // for calculation (0.80 * 10,000.00)
						//5. for display on the AmountOptionA text field
					} //if (varVeteran == "Yes"){// for Option A	
			///Max_YRA = (MaxPF * YRA); // for calculation (0.80 * 10,000.00)
			//for display on the AmountOptionA text field
			document.frmCal.OpAyaservice.value = YRofS; //Option A review display
			
			if (varyrserMM < 10) {
				 varyrserMM = varzerotext + varyrserMM;				
				}

			//Option A 	
			//document.frmCal.OpAyaservicedisplay.value = (parseInt(YRofS) + "." + varyrserMM); // varyrserMM //varYRofS ; ///802 wjl
			document.frmCal.AmountOptionAbeforeVeteranBenf.value = Max_YRA; //display the opntionA amount before Veteran's benenefits
			displayAmountOptionAC = CommaFormatted(CurrencyFormatted(Max_YRATotal)); 	
		
			///4-4-218
			document.frmCal.AmountOptionA.value = displayAmountOptionAC; //WJL
			//Option A Monthly Benefit Amount = (Max_YRA/12);			
			document.frmCal.MonthlyBenefit.value = CommaFormatted(CurrencyFormatted(Max_YRATotal / 12)); 
			//6/28/2018					
			//document.getElementById("display_AmountOptionA_YearlyBenefit").innerHTML = displayAmountOptionAC; //<li>Annual Allowance: &nbsp;&nbsp;$<label for="displayAmountOptionA"></label>
			//display_AmountOptionA_MonthlyBenefit
			//document.getElementById("display_AmountOptionA_MonthlyBenefit").innerHTML = displayAmountOptionAC; //<li>Annual Allowance: &nbsp;&nbsp;$<label for="displayAmountOptionA"></label>
			
			/* orignal code **/	
				if (varVeteran == "Yes"){//for Option B						
						Max_YRAOptionB99 = (Max_YRA * 0.99); // for calculation (Ex. 0.99 * $10,000.00 = $9,900.00 )
						//document.frmCal.txtOptionBbeforeVeteranBenf.value = Max_YRAOptionB99; //display only for Option B Amount before veteran's benefits
						Max_YRAOptionBTotal =  (Max_YRAOptionB99 + vetbenefitperyear) 								
						//Line 5. = 3. x 4. for display on the AmountOptionA text field (Ex. $2,000.00)  
						document.frmCal.txtOptionBPercentage.value = varPer99;
				}else{
							Max_YRAOptionB99 = (Max_YRA * 0.99);
							Max_YRAOptionBTotal = (Max_YRA *0.99); // for calculation (0.80 * 10,000.00)
							//5. for display on the AmountOptionA text field
						document.frmCal.txtOptionBPercentage.value = varPer99;
				}//if (varVeteran == "Yes"){//for Option B
				

			
			/** 4-5-2018 */			
			//for Option B from the book
			//Option B Pension Yearly
			//document.frmCal.txtOptionB.value = CommaFormatted(CurrencyFormatted(Max_YRATotal * 0.99));	
			/** 
			Members age is less than 50: 0% reduction
			Members age is greater than or equal to 50 AND less than 55: 1% reduction
			Members age is greater than or equal to 55 AND less than 60: 2% reduction
			Members age is greater than or equal to 60 AND less than 65: 3% reduction
			Members age is greater than or equal to 65 AND less than 70: 4% reduction
			Members age is greater than or equal to 70: 5% reduction
			*/
			/**
			var varPer100 = 1; //100% of OptionA
			var varPer99 = 0.99; //99% of OptionA
			var varPer98 = 0.98; //98% of OptionA
			var varPer97 = 0.97; //97% of OptionA
			var varPer96 = 0.96; //96% of OptionA
			var varPer95 = 0.95; //95% of OptionA
			*/
			/****
						
			if (ya < 50 ){//100%
				Max_YRAOptionB99 = (Max_YRA); // for calculation (Ex. 0.80 * $10,000.00 AVG salary = 8,000, 8,000 x 100% = $8,000)
				document.frmCal.txtOptionBPercentage.value = varPer100;
				//alert("2326 Option A PecentFactor reach to Maxium 80% . if (ya <= 50 ){//100% Max_YRA * 1" );					
			}else if (ya >= 50 && ya < 55){//99%
				//Max_YRAOptionB99 = (Max_YRA * 0.99); // for calculation (Ex. 0.80 * $10,000.00 AVG salary = 8,000, 8,000 x 0.99 = $7,920)
				Max_YRAOptionB99 = (Max_YRA * varPer99); // for calculation (Ex. 0.80 * $10,000.00 AVG salary = 8,000, 8,000 x 0.99 = $7,920)
				document.frmCal.txtOptionBPercentage.value = varPer99;
				//alert("2329. if (ya >= 50 && ya <= 55){//99) Max_YRA * 0.99" );					
			}else if (ya >= 55 && ya < 60){//98%
				//Max_YRAOptionB99 = (Max_YRA * 0.98); 
				Max_YRAOptionB99 = (Max_YRA * varPer98);
				document.frmCal.txtOptionBPercentage.value = varPer98;
				//alert("2332. if (ya >= 55 && ya < 60){//99) Max_YRA * 0.98" );					
			}else if (ya >= 60 && ya < 65){//97%
				//Max_YRAOptionB99 = (Max_YRA * 0.97); 
				Max_YRAOptionB99 = (Max_YRA * varPer97); 
				document.frmCal.txtOptionBPercentage.value = varPer97;
				//alert("2335. if (ya >= 60 && ya < 65) {//99) Max_YRA * 0.97" );					
			}else if (ya >= 65 && ya < 70){//96%
				//Max_YRAOptionB99 = (Max_YRA * 0.96);
				Max_YRAOptionB99 = (Max_YRA * varPer96); 
				document.frmCal.txtOptionBPercentage.value = varPer96;
				//alert("2338. }else if (ya >= 65 && ya < 70){//97% Max_YRA * 0.96" );
			}else{
				if (ya >= 70){//95%
				//Max_YRAOptionB99 = (Max_YRA * 0.95); 
				Max_YRAOptionB99 = (Max_YRA * varPer95); 
				document.frmCal.txtOptionBPercentage.value = varPer95;
				//alert("2342. (if (ya >= 70){//95%  = (Max_YRA * 0.95" );
				}//if (ya >= 70){//95%	
			}//if (ya < 50 ){//100%		
			
			if (varVeteran == "Yes"){//for Option B					
				///Max_YRAOptionB99 = (Max_YRA * 0.99); // for calculation (Ex. 0.20 * 10000.00 = 2000.00 )
				///Max_YRAOptionBTotal =  (Max_YRAOptionB99 + vetbenefitperyear) 								
				//document.frmCal.txtOptionBbeforeVeteranBenf.value = Max_YRAOptionB99; //display only for Option B Amount before veteran's benefits		
				Max_YRAOptionBTotal =  (Max_YRAOptionB99 + vetbenefitperyear);//alert("2297. veteran Age of retirement ya=" + ya);						
			}else{//
					///Max_YRAOptionB99 = (Max_YRA * 0.99);
					///Max_YRAOptionBTotal = (Max_YRA *0.99); // for calculation (0.80 * 10,000.00)
					//5. for display on the AmountOptionA text field				
				Max_YRAOptionBTotal = Max_YRAOptionB99;				
			}//if (varVeteran == "Yes"){//for Option B
			
			//canceled 8-20-2018
			****/				
			
			
			
			document.frmCal.txtOptionBbeforeVeteranBenf.value = Max_YRAOptionB99; //display only for Option B Amount before veteran's benefits
			
			document.frmCal.txtOptionB.value = CommaFormatted(CurrencyFormatted(Max_YRAOptionBTotal));			
			//Option B txtOptionBmonthly
			//document.frmCal.txtOptionBmonthly.value = CommaFormatted(CurrencyFormatted((Max_YRATotal * 0.99)/12));
			document.frmCal.txtOptionBmonthly.value = CommaFormatted(CurrencyFormatted((Max_YRAOptionBTotal)/12));
	
			// for Option C
			var yOptionCfactor = document.frmCal.myResultOptionCfator.value;	//Option C chart
			var OptionATotal = document.frmCal.AmountOptionA.value; //Avg of 3 years salary from Option A 
			
			if ((yOptionCfactor > 0) && (yOptionCfactor <= 1)){
				//displayAmountOptionAC = CommaFormatted(CurrencyFormatted(Max_YRA));
				document.frmCal.AmountOptionAC.value = displayAmountOptionAC;
				if (varVeteran == "Yes"){//for Option C										
						Max_YRAOptionC = (Max_YRA * yOptionCfactor); // for calculation (Ex. 0.20 * 10000.00 = 2000.00 )
						NonMax_YRAOptionC_Max_YRAOptionCdisplay = Max_YRAOptionC; //display only for OptionC before veteran's benefits
						//document.frmCal.AmountOptionACbeforeVeteranBenf.value = NonMax_YRAOptionC_Max_YRAOptionCdisplay;
						Max_YRAyOptionCfactor =  (Max_YRAOptionC + vetbenefitperyear); 		
						//Line 5. = 3. x 4. for display on the AmountOptionA text field (Ex. $2,000.00)  
				}else{
						NonMax_YRAOptionC_Max_YRAOptionCdisplay = (Max_YRA * yOptionCfactor);
						Max_YRAyOptionCfactor = (Max_YRA * yOptionCfactor); // for calculation (0.80 * 10,000.00)
						//5. for display on the AmountOptionA text field
					}//if (varVeteran == "Yes"){//for Option C	
				document.frmCal.AmountOptionACbeforeVeteranBenf.value = NonMax_YRAOptionC_Max_YRAOptionCdisplay;
				myResultOptionCdisplay = CommaFormatted(CurrencyFormatted(Max_YRAyOptionCfactor));
				//Yearly
				document.frmCal.myResultOptionC.value = myResultOptionCdisplay;	// Yearly document.arrayForm.myResult2.value=MultiArray[row];
				//monthly
				document.frmCal.myResultOptionCmonthly.value = CommaFormatted(CurrencyFormatted((Max_YRAyOptionCfactor)/12)); 
				//2/3 of the Option C in yearly
				document.frmCal.myResultOptionCTwoThirdYearly.value = CommaFormatted(CurrencyFormatted((Max_YRAyOptionCfactor * 2)/3)); 
				//2/3 of the Option C in monthly
				document.frmCal.myResultOptionCTwoThirdMonthly.value = CommaFormatted(CurrencyFormatted(((Max_YRAyOptionCfactor * 2)/3)/12)); 
			}else{
				blankOptionCvalue();		
			} //if (yOptionCfactor > 0 )
    }else{	// Lease than 80% PercentFactor
	
	
	
	

		if (boolean1 == true) { //hired before on 04/02/2012 
				CreateMultiArrayC_before_04022012(); //Call the 1st set of function arrays, must keep this for 1st set of calculator 			
				document.frmCal.vartrueorfalse.value = vartrue1; //send the value to the form we use1stset
				///document.getElementById("displayvartrueorfalse").innerHTML = document.frmCal.vartrueorfalse.value; //display back to the <p></p>
				document.frmCal.reminder.value = varremender1; //send the value to the form 
				document.getElementById("displayreminder").innerHTML = '<div style="color:#ff0000;">' + document.frmCal.reminder.value + "</div>"; //display back to the <p>displayreminder</p>
				//display in red = #ff0000
//				document.getElementById("displayreminder").innerHTML += '<div style="color:#ff0000;">' + document.frmCal.reminder.value + "</div>"; //display back to the <p>displayreminder</p>

				document.frmCal.enterservicedateddisplayonly.value = displayenterservicedate; //send the value to the form
				if (boolean3 == true){ //enterservicedate <= dobdate
					alert("Note: Your service start date must be greater than your date of birth. Please correct the service start date to continue.");		
				}
				//alert("1850 boolean1 == true");
				//8/14/2018

		  	if (ya < 36){ //less than 36 year of age 
			  	blankOptionCvalue(); // NOT QUALIFY TO RETIRE 
				
					}else if (((ya >= 55) && (YRofS >= 10)) || ((ya >= 36) && (YRofS >= 20))){ //
					//Retirement qualification: (Age 55 or more with 10 year of services) OR (Age 36 or more with 20 years or more of services) 				
					
					///document.frmCal.OpAyaservice.value = YRofS; //Option A review display
					//document.frmCal.PercentFactor.value = PF;
					PFparseFloat36 =  parseFloat(PF)					
					if (PFparseFloat36 < 1) {									
						PFparseFloat36 = custRound((PFparseFloat36 * 100), 2); //WJL 2
					}					
					displayPercentFactor = PFparseFloat36 + "%" ;
					document.frmCal.PercentFactor.value = PFparseFloat36 + "%" ; // If ya >= 36 for display in percentage
					
					if (varVeteran == "Yes"){// for Option A				
						NonMax_YRA = (PF * YRA); // for calculation (Ex. 0.20 * 10000.00 = 2000.00 )
						document.frmCal.AmountOptionAbeforeVeteranBenf.value = NonMax_YRA; //display the opntionA amount before Veteran's benenefits
						NonMax_YRA_Total =  (NonMax_YRA + vetbenefitperyear);
						//Line 5. = 3. x 4. for display on the AmountOptionA text field (Ex. $2,000.00)  					
					}else{
						NonMax_YRA = (PF * YRA); // for calculation (Ex. 0.20 * 10000.00 = 2000.00 )		
						NonMax_YRA_Total = (PF * YRA); // for calculation (0.80 * 10,000.00)
						document.frmCal.AmountOptionAbeforeVeteranBenf.value = NonMax_YRA_Total; //display the opntionA amount before Veteran's benenefits
						//5. for display on the AmountOptionA text field
					} //if (varVeteran == "Yes"){// for Option A	
							
					if (varyrserMM < 10) {
					 varyrserMM = varzerotext + varyrserMM;				
					}

					//Option A
					//document.frmCal.OpAyaservicedisplay.value = (parseInt(YRofS) + "." + varyrserMM) // varyrserMM //varYRofS ; ///802 wjl
					displayAmountOptionAC = CommaFormatted(CurrencyFormatted(NonMax_YRA_Total)); 	
					document.frmCal.AmountOptionA.value = displayAmountOptionAC; //WJL
					//6/28/2018
					//<p>Annual Allowance: &nbsp;&nbsp;$ 1,234.56</p>
					//var vardisplay_AmountOptionA_YearlyBenefit = displayAmountOptionAC;
					//document.getElementById("display_AmountOptionA_YearlyBenefit").innerHTML = "<p>Annual Allowance: $" + vardisplay_AmountOptionA_YearlyBenefit + "</p>";  
								
					//Option A Monthly Benefit Amount = (Max_YRA/12);			
					document.frmCal.MonthlyBenefit.value = CommaFormatted(CurrencyFormatted(NonMax_YRA_Total / 12));
					//var vardisplay_AmountOptionA_MonthlyBenefit = CommaFormatted(CurrencyFormatted(NonMax_YRA_Total / 12));
					//6/28/2018
					//display_AmountOptionA_MonthlyBenefit
					//document.getElementById("display_AmountOptionA_MonthlyBenefit").innerHTML = "<p>Monthly Allowance: $" + vardisplay_AmountOptionA_MonthlyBenefit + "</p>";  
					
					/* original code **/
					if (varVeteran == "Yes"){//for Option B		
						NonMax_YRAOptionB99 = (NonMax_YRA * 0.99); // for calculation (Ex. 0.20 * 10000.00 = 2000.00 )
						//document.frmCal.txtOptionBbeforeVeteranBenf.value = NonMax_YRAOptionB99; //display only for Option B Amount before veteran's benefits
						NonMax_YRAOptionBTotal =  (NonMax_YRAOptionB99 + vetbenefitperyear) ;	
						//Line 5. = 3. x 4. for display on the AmountOptionA text field (Ex. $2,000.00)
						//var varPer99 = 0.99; //99% of OptionA
						document.frmCal.txtOptionBPercentage.value = varPer99;
					}else{
						NonMax_YRAOptionB99 = (NonMax_YRA * 0.99);
						NonMax_YRAOptionBTotal = (NonMax_YRA * 0.99); // for calculation (0.80 * 10,000.00)
						//document.frmCal.txtOptionBbeforeVeteranBenf.value = NonMax_YRAOptionBTotal; //display only for Option B Amount before veteran's benefits
						document.frmCal.txtOptionBPercentage.value = varPer99;				
					}//if (varVeteran == "Yes"){//for Option B	
					
					
					
					/** 4-5-2018 */	
					//for Option B
					//Option B Pension Yearly from the book 
					//document.frmCal.txtOptionB.value = CommaFormatted(CurrencyFormatted(Max_YRATotal * 0.99));
					/** 
					Members age is less than 50: 0% reduction
					Members age is greater than or equal to 50 AND less than 55: 1% reduction
					Members age is greater than or equal to 55 AND less than 60: 2% reduction
					Members age is greater than or equal to 60 AND less than 65: 3% reduction
					Members age is greater than or equal to 65 AND less than 70: 4% reduction
					Members age is greater than or equal to 70: 5% reduction
					*/
					/**
					var varPer100 = 1; //100% of OptionA
					var varPer99 = 0.99; //99% of OptionA
					var varPer98 = 0.98; //98% of OptionA
					var varPer97 = 0.97; //97% of OptionA
					var varPer96 = 0.96; //96% of OptionA
					var varPer95 = 0.95; //95% of OptionA
					*/
					
					/**** canceled 8-20-2018
					if (ya < 50 ){//100%		
						NonMax_YRAOptionB99 = (NonMax_YRA); // for calculation (Ex. 0.20 * $10,000.00 AVG salary = 2,000, 2000 x 1 = $2,000)
						document.frmCal.txtOptionBPercentage.value = varPer100;
					    //alert("2469 Option A PecentFactor under 80% if (ya <= 50 ){//100% Max_YRA * 1" );
					}else if (ya >= 50 &&  ya < 55){//99%			
						//NonMax_YRAOptionB99 = (NonMax_YRA * 0.99); // for calculation (Ex. 0.20 * $10,000.00 AVG salary = 2,000, 2000x0.99 = $1,980)
						NonMax_YRAOptionB99 = (NonMax_YRA * varPer99); // for calculation (Ex. 0.20 * $10,000.00 AVG salary = 2,000, 2000x0.99 = $1,980)
						document.frmCal.txtOptionBPercentage.value = varPer99;
						//alert("2472. if (ya >= 50 && ya < 55) Max_YRA * 0.99" );					
					}else if (ya >= 55 &&  ya < 60){//98%			
						//NonMax_YRAOptionB99 = (NonMax_YRA * 0.98); 
						NonMax_YRAOptionB99 = (NonMax_YRA * varPer98); 
						document.frmCal.txtOptionBPercentage.value = varPer98;
						//alert("2475. if (ya >= 55 && ya < 60) Max_YRA * 0.98" );					
					}else if (ya >= 60 && ya < 65){//97%
						//NonMax_YRAOptionB99 = (NonMax_YRA * 0.97);
						NonMax_YRAOptionB99 = (NonMax_YRA * varPer97);
						document.frmCal.txtOptionBPercentage.value = varPer97;
						//alert("2478. }else if (ya >= 60 && ya < 65){ Max_YRA * 0.97" );
					}else if (ya >= 65 &&  ya < 70){//96%			
						//NonMax_YRAOptionB99 = (NonMax_YRA * 0.96);
						NonMax_YRAOptionB99 = (NonMax_YRA * varPer96);
						document.frmCal.txtOptionBPercentage.value = varPer96;
						//	alert("2481. if (ya >= 65 && ya < 70) Max_YRA * 0.96" );					
					}
					else{ //ya < 50
						if (ya >= 70){//95%
						//NonMax_YRAOptionB99 = (NonMax_YRA * 0.95);
						NonMax_YRAOptionB99 = (NonMax_YRA * varPer95);
						document.frmCal.txtOptionBPercentage.value = varPer95;
						//alert("2486.  (ya >= 70)(else varveteran NonMax_YRAOptionB99 * 0.95" );							
						}
					}//if (ya < 50 ){//100%					
					
					if (varVeteran == "Yes"){//for Option B		
					///	NonMax_YRAOptionB99 = (NonMax_YRA * 0.99); // for calculation (Ex. 0.20 * 10000.00 = 2000.00 )
						//document.frmCal.txtOptionBbeforeVeteranBenf.value = NonMax_YRAOptionB99; //display only for Option B Amount before veteran's benefits
					///	NonMax_YRAOptionBTotal =  (NonMax_YRAOptionB99 + vetbenefitperyear) ;	
						//Line 5. = 3. x 4. for display on the AmountOptionA text field (Ex. $2,000.00) 						
						//3-29-2018
						NonMax_YRAOptionBTotal =  (NonMax_YRAOptionB99 + vetbenefitperyear);//alert("2297. veteran Age of retirement ya=" + ya);		
						//alert("2393. veteran NonMax_YRAOptionBTotal:" + NonMax_YRAOptionBTotal);	
						
					}else{ //else (varVeteran == "Yes"){//for Option B
						NonMax_YRAOptionBTotal =  NonMax_YRAOptionB99;
						//alert("2397. else nonveteran NonMax_YRAOptionBTotal:" + NonMax_YRAOptionBTotal);
					}//if (varVeteran == "Yes"){//for Option B	
					
					//canceled 8-20-2018
					****/
					
					/** 4-5-2018 */				
					
					
					
					document.frmCal.txtOptionBbeforeVeteranBenf.value = NonMax_YRAOptionB99;
					document.frmCal.txtOptionB.value = CommaFormatted(CurrencyFormatted(NonMax_YRAOptionBTotal));			
					//Option B txtOptionBmonthly
					//document.frmCal.txtOptionBmonthly.value = CommaFormatted(CurrencyFormatted((Max_YRATotal * 0.99)/12));
					document.frmCal.txtOptionBmonthly.value = CommaFormatted(CurrencyFormatted((NonMax_YRAOptionBTotal)/12));			
	
					// for Option C
					var yOptionCfactor = document.frmCal.myResultOptionCfator.value;	//Option C chart
					//alert("yOptionCfactor: " + yOptionCfactor)
					var OptionATotal = document.frmCal.AmountOptionA.value; //Avg of 3 years salary from Option A 					
					if ((yOptionCfactor > 0) && (yOptionCfactor <= 1)){
						//displayAmountOptionAC = CommaFormatted(CurrencyFormatted(Max_YRA));
						document.frmCal.AmountOptionAC.value = displayAmountOptionAC;					
						if (varVeteran == "Yes"){//for Option C			
							//from option A NonMax_YRA = (PF * YRA);
							NonMax_YRAOptionC = (NonMax_YRA * yOptionCfactor); // for calculation (Ex. 0.20 * 10000.00 = 2000.00 )
							NonMax_YRAOptionC_Max_YRAOptionCdisplay = NonMax_YRAOptionC;
							document.frmCal.AmountOptionACbeforeVeteranBenf.value = NonMax_YRAOptionC_Max_YRAOptionCdisplay ; //display only for OptionC before veteran's benefits
							NonMax_YRAOptionBTotal =  (NonMax_YRAOptionC + vetbenefitperyear); 		
							//Line 5. = 3. x 4. for display on the AmountOptionA text field (Ex. $2,000.00)  
						}else{
							NonMax_YRAOptionBTotal = (NonMax_YRA * yOptionCfactor); // for calculation (0.80 * 10,000.00)
							document.frmCal.AmountOptionACbeforeVeteranBenf.value = NonMax_YRAOptionBTotal; //display only for OptionC before veteran's benefits
							//5. for display on the AmountOptionA text field							
						}//if (varVeteran == "Yes"){//for Option C	
						//from option A NonMax_YRA = (PF * YRA);
						myResultOptionCdisplay = CommaFormatted(CurrencyFormatted(NonMax_YRAOptionBTotal));
						document.frmCal.myResultOptionC.value = myResultOptionCdisplay;	// Yearly document.arrayForm.myResult2.value=MultiArray[row];
						document.frmCal.myResultOptionCmonthly.value = CommaFormatted(CurrencyFormatted((NonMax_YRAOptionBTotal)/12)); //monthly
						//2/3 of the Option C in yearly
						document.frmCal.myResultOptionCTwoThirdYearly.value = CommaFormatted(CurrencyFormatted((NonMax_YRAOptionBTotal * 2)/3)); // 2/3 in Yearly
						//2/3 of the Option C in monthly
						document.frmCal.myResultOptionCTwoThirdMonthly.value = CommaFormatted(CurrencyFormatted(((NonMax_YRAOptionBTotal * 2)/3)/12)); // 2/3 in monthly
						}//if ((yOptionCfactor > 0) && (yOptionCfactor <= 1))
		    }else{ //else if (ya >= 36)
				blankOptionA_C_Report_value(); //blank Option A and C reports
				//blankOptionCvalue();//Option C blank				
				//alert("2607 sorry, you are not eligible to retire");
		    } // if (ya < 36){ //less than 36 year of age 	

				
				
		}else{  
		   		if (boolean2 == true) { //hired on and after 04/02/2012			
				CreateMultiArrayC_onandafter_04022012() //Call the 2nd set of function arrays, must keep this for 2nd set of calculator
				document.frmCal.vartrueorfalse.value = vartrue2; //try to send the value to the form use2ndset
				///document.getElementById("displayvartrueorfalse").innerHTML = document.frmCal.vartrueorfalse.value; //display back to the <p></p>
				document.frmCal.reminder.value = varremender2; //try to send the value to the form
				//document.getElementById("displayreminder").innerHTML = document.frmCal.reminder.value; //display back to the <p></p>
				document.getElementById("displayreminder").innerHTML = '<div style="color:#ff0000;">' + document.frmCal.reminder.value + "</div>"; //display back to the <p>
				document.frmCal.enterservicedateddisplayonly.value = displayenterservicedate; //try to send the value to the form
				if (boolean3 == true){
					alert("Note: Your service start date must be greater than your date of birth. Please correct the service start date to continue.");
				}
			}//if (boolean2 == true)
			
				//8/14/2018

		  	if (ya < 36){ //less than 36 year of age 
			  	blankOptionCvalue();			
//			}else if (ya >= 36){ //greater than and equal to 36
//8-13-2018 new WJL
			//}else if ((ya < 55) && (YRofS < 20)){ //less than age 55 
			//	alert("2442 else if ((ya < 55) && (YRofS < 10))");
				
			//}else if (((ya >= 36) && (YRofS >= 20)) || ((ya >= 55) && (YRofS >= 10))){ //greater than and equal to 36
			}else if ( (((ya >= 60) && (vargrpmember = 1)) || ((ya >= 55) && (vargrpmember = 2)) || ((ya >= 50) && (vargrpmember = 4))) && (YRofS >= 10)){ //greater than and equal to 36
			//			varGroup 
					//alert("2731 2nd set varGroupmember:" + varGroup);
					//alert("2730 2nd set calculation  else if (((ya >= 36) && (YRofS >= 20)) || ((ya >= 55) && (YRofS >= 10)))");
					///document.frmCal.OpAyaservice.value = YRofS; //Option A review display
					//document.frmCal.PercentFactor.value = PF;
					PFparseFloat36 =  parseFloat(PF)					
					if (PFparseFloat36 < 1) {									
						PFparseFloat36 = custRound((PFparseFloat36 * 100), 2); //WJL 2
					}					
					displayPercentFactor = PFparseFloat36 + "%" ;
					document.frmCal.PercentFactor.value = PFparseFloat36 + "%" ; // If ya >= 36 for display in percentage
					
					if (varVeteran == "Yes"){// for Option A				
						NonMax_YRA = (PF * YRA); // for calculation (Ex. 0.20 * 10000.00 = 2000.00 )
						document.frmCal.AmountOptionAbeforeVeteranBenf.value = NonMax_YRA; //display the opntionA amount before Veteran's benenefits
						NonMax_YRA_Total =  (NonMax_YRA + vetbenefitperyear);
						//Line 5. = 3. x 4. for display on the AmountOptionA text field (Ex. $2,000.00)  					
					}else{
						NonMax_YRA = (PF * YRA); // for calculation (Ex. 0.20 * 10000.00 = 2000.00 )		
						NonMax_YRA_Total = (PF * YRA); // for calculation (0.80 * 10,000.00)
						document.frmCal.AmountOptionAbeforeVeteranBenf.value = NonMax_YRA_Total; //display the opntionA amount before Veteran's benenefits
						//5. for display on the AmountOptionA text field
					} //if (varVeteran == "Yes"){// for Option A	
							
					if (varyrserMM < 10) {
					 varyrserMM = varzerotext + varyrserMM;				
					}

					//Option A
					//document.frmCal.OpAyaservicedisplay.value = (parseInt(YRofS) + "." + varyrserMM) // varyrserMM //varYRofS ; ///802 wjl
					displayAmountOptionAC = CommaFormatted(CurrencyFormatted(NonMax_YRA_Total)); 	
					document.frmCal.AmountOptionA.value = displayAmountOptionAC; //WJL
					//6/28/2018
					//<p>Annual Allowance: &nbsp;&nbsp;$ 1,234.56</p>
					//var vardisplay_AmountOptionA_YearlyBenefit = displayAmountOptionAC;
					//document.getElementById("display_AmountOptionA_YearlyBenefit").innerHTML = "<p>Annual Allowance: $" + vardisplay_AmountOptionA_YearlyBenefit + "</p>";  
								
					//Option A Monthly Benefit Amount = (Max_YRA/12);			
					document.frmCal.MonthlyBenefit.value = CommaFormatted(CurrencyFormatted(NonMax_YRA_Total / 12));
					//var vardisplay_AmountOptionA_MonthlyBenefit = CommaFormatted(CurrencyFormatted(NonMax_YRA_Total / 12));
					//6/28/2018
					//display_AmountOptionA_MonthlyBenefit
					//document.getElementById("display_AmountOptionA_MonthlyBenefit").innerHTML = "<p>Monthly Allowance: $" + vardisplay_AmountOptionA_MonthlyBenefit + "</p>";  
					
					/* original code **/
					if (varVeteran == "Yes"){//for Option B		
						NonMax_YRAOptionB99 = (NonMax_YRA * 0.99); // for calculation (Ex. 0.20 * 10000.00 = 2000.00 )
						//document.frmCal.txtOptionBbeforeVeteranBenf.value = NonMax_YRAOptionB99; //display only for Option B Amount before veteran's benefits
						NonMax_YRAOptionBTotal =  (NonMax_YRAOptionB99 + vetbenefitperyear) ;	
						//Line 5. = 3. x 4. for display on the AmountOptionA text field (Ex. $2,000.00)
						document.frmCal.txtOptionBPercentage.value = varPer99;  
					}else{
						NonMax_YRAOptionB99 = (NonMax_YRA * 0.99);
						NonMax_YRAOptionBTotal = (NonMax_YRA * 0.99); // for calculation (0.80 * 10,000.00)
						//document.frmCal.txtOptionBbeforeVeteranBenf.value = NonMax_YRAOptionBTotal; //display only for Option B Amount before veteran's benefits
						document.frmCal.txtOptionBPercentage.value = varPer99;					
					}//if (varVeteran == "Yes"){//for Option B	
					
					
					
					/** 4-5-2018 */	
					
					//for Option B
					//Option B Pension Yearly from the book 
					//document.frmCal.txtOptionB.value = CommaFormatted(CurrencyFormatted(Max_YRATotal * 0.99));
					/** 
					Members age is less than 50: 0% reduction
					Members age is greater than or equal to 50 AND less than 55: 1% reduction
					Members age is greater than or equal to 55 AND less than 60: 2% reduction
					Members age is greater than or equal to 60 AND less than 65: 3% reduction
					Members age is greater than or equal to 65 AND less than 70: 4% reduction
					Members age is greater than or equal to 70: 5% reduction
					*/
					/**
					var varPer100 = 1; //100% of OptionA
					var varPer99 = 0.99; //99% of OptionA
					var varPer98 = 0.98; //98% of OptionA
					var varPer97 = 0.97; //97% of OptionA
					var varPer96 = 0.96; //96% of OptionA
					var varPer95 = 0.95; //95% of OptionA
					*/
					/*** cancel 8-20-2018
					if (ya < 50 ){//100%		
						NonMax_YRAOptionB99 = (NonMax_YRA); // for calculation (Ex. 0.20 * $10,000.00 AVG salary = 2,000, 2000 x 1 = $2,000)
						document.frmCal.txtOptionBPercentage.value = varPer100;
					    //alert("2469 Option A PecentFactor under 80% if (ya <= 50 ){//100% Max_YRA * 1" );
					}else if (ya >= 50 &&  ya < 55){//99%			
						//NonMax_YRAOptionB99 = (NonMax_YRA * 0.99); // for calculation (Ex. 0.20 * $10,000.00 AVG salary = 2,000, 2000x0.99 = $1,980)
						NonMax_YRAOptionB99 = (NonMax_YRA * varPer99); // for calculation (Ex. 0.20 * $10,000.00 AVG salary = 2,000, 2000x0.99 = $1,980)
						document.frmCal.txtOptionBPercentage.value = varPer99;
						//alert("2472. if (ya >= 50 && ya < 55) Max_YRA * 0.99" );					
					}else if (ya >= 55 &&  ya < 60){//98%			
						//NonMax_YRAOptionB99 = (NonMax_YRA * 0.98); 
						NonMax_YRAOptionB99 = (NonMax_YRA * varPer98); 
						document.frmCal.txtOptionBPercentage.value = varPer98;
						//alert("2475. if (ya >= 55 && ya < 60) Max_YRA * 0.98" );					
					}else if (ya >= 60 && ya < 65){//97%
						//NonMax_YRAOptionB99 = (NonMax_YRA * 0.97);
						NonMax_YRAOptionB99 = (NonMax_YRA * varPer97);
						document.frmCal.txtOptionBPercentage.value = varPer97;
						//alert("2478. }else if (ya >= 60 && ya < 65){ Max_YRA * 0.97" );
					}else if (ya >= 65 &&  ya < 70){//96%			
						//NonMax_YRAOptionB99 = (NonMax_YRA * 0.96);
						NonMax_YRAOptionB99 = (NonMax_YRA * varPer96);
						document.frmCal.txtOptionBPercentage.value = varPer96;
						//	alert("2481. if (ya >= 65 && ya < 70) Max_YRA * 0.96" );					
					}
					else{ //ya < 50
						if (ya >= 70){//95%
						//NonMax_YRAOptionB99 = (NonMax_YRA * 0.95);
						NonMax_YRAOptionB99 = (NonMax_YRA * varPer95);
						document.frmCal.txtOptionBPercentage.value = varPer95;
						//alert("2486.  (ya >= 70)(else varveteran NonMax_YRAOptionB99 * 0.95" );							
						}
					}//if (ya < 50 ){//100%					
					
					if (varVeteran == "Yes"){//for Option B		
					///	NonMax_YRAOptionB99 = (NonMax_YRA * 0.99); // for calculation (Ex. 0.20 * 10000.00 = 2000.00 )
						//document.frmCal.txtOptionBbeforeVeteranBenf.value = NonMax_YRAOptionB99; //display only for Option B Amount before veteran's benefits
					///	NonMax_YRAOptionBTotal =  (NonMax_YRAOptionB99 + vetbenefitperyear) ;	
						//Line 5. = 3. x 4. for display on the AmountOptionA text field (Ex. $2,000.00) 						
						//3-29-2018
						NonMax_YRAOptionBTotal =  (NonMax_YRAOptionB99 + vetbenefitperyear);//alert("2297. veteran Age of retirement ya=" + ya);		
						//alert("2393. veteran NonMax_YRAOptionBTotal:" + NonMax_YRAOptionBTotal);	
						
					}else{ //else (varVeteran == "Yes"){//for Option B
						NonMax_YRAOptionBTotal =  NonMax_YRAOptionB99;
						//alert("2397. else nonveteran NonMax_YRAOptionBTotal:" + NonMax_YRAOptionBTotal);
					}//if (varVeteran == "Yes"){//for Option B	
					// cencel 8-20-2018
					***/
					/** 4-5-2018 */
					
					
					document.frmCal.txtOptionBbeforeVeteranBenf.value = NonMax_YRAOptionB99;
					document.frmCal.txtOptionB.value = CommaFormatted(CurrencyFormatted(NonMax_YRAOptionBTotal));			
					//Option B txtOptionBmonthly
					//document.frmCal.txtOptionBmonthly.value = CommaFormatted(CurrencyFormatted((Max_YRATotal * 0.99)/12));
					document.frmCal.txtOptionBmonthly.value = CommaFormatted(CurrencyFormatted((NonMax_YRAOptionBTotal)/12));			
	
					// for Option C
					var yOptionCfactor = document.frmCal.myResultOptionCfator.value;	//Option C chart
					//alert("yOptionCfactor: " + yOptionCfactor)
					var OptionATotal = document.frmCal.AmountOptionA.value; //Avg of 3 years salary from Option A 					
					if ((yOptionCfactor > 0) && (yOptionCfactor <= 1)){
						//displayAmountOptionAC = CommaFormatted(CurrencyFormatted(Max_YRA));
						document.frmCal.AmountOptionAC.value = displayAmountOptionAC;					
						if (varVeteran == "Yes"){//for Option C			
							//from option A NonMax_YRA = (PF * YRA);
							NonMax_YRAOptionC = (NonMax_YRA * yOptionCfactor); // for calculation (Ex. 0.20 * 10000.00 = 2000.00 )
							NonMax_YRAOptionC_Max_YRAOptionCdisplay = NonMax_YRAOptionC;
							document.frmCal.AmountOptionACbeforeVeteranBenf.value = NonMax_YRAOptionC_Max_YRAOptionCdisplay ; //display only for OptionC before veteran's benefits
							NonMax_YRAOptionBTotal =  (NonMax_YRAOptionC + vetbenefitperyear); 		
							//Line 5. = 3. x 4. for display on the AmountOptionA text field (Ex. $2,000.00)  
						}else{
							NonMax_YRAOptionBTotal = (NonMax_YRA * yOptionCfactor); // for calculation (0.80 * 10,000.00)
							document.frmCal.AmountOptionACbeforeVeteranBenf.value = NonMax_YRAOptionBTotal; //display only for OptionC before veteran's benefits
							//5. for display on the AmountOptionA text field							
						}//if (varVeteran == "Yes"){//for Option C	
						//from option A NonMax_YRA = (PF * YRA);
						myResultOptionCdisplay = CommaFormatted(CurrencyFormatted(NonMax_YRAOptionBTotal));
						document.frmCal.myResultOptionC.value = myResultOptionCdisplay;	// Yearly document.arrayForm.myResult2.value=MultiArray[row];
						document.frmCal.myResultOptionCmonthly.value = CommaFormatted(CurrencyFormatted((NonMax_YRAOptionBTotal)/12)); //monthly
						//2/3 of the Option C in yearly
						document.frmCal.myResultOptionCTwoThirdYearly.value = CommaFormatted(CurrencyFormatted((NonMax_YRAOptionBTotal * 2)/3)); // 2/3 in Yearly
						//2/3 of the Option C in monthly
						document.frmCal.myResultOptionCTwoThirdMonthly.value = CommaFormatted(CurrencyFormatted(((NonMax_YRAOptionBTotal * 2)/3)/12)); // 2/3 in monthly
						}//if ((yOptionCfactor > 0) && (yOptionCfactor <= 1))
		    }else{ //else if (ya >= 36)
				blankOptionA_C_Report_value(); //blank Option A and C reports
				//blankOptionCvalue();//Option C blank				
				//alert("2607 sorry, you are not eligible to retire");
		    } // if (ya < 36){ //less than 36 year of age 	

				
				
		}//if (boolean1 == true)

//8/14/2018
					
    } //}else{	// Lease than 80% PercentFactor	
//alert(" 2421 End of program Line ");			
}// function computeForm(form)

function checkForm(form) {
    if (validateAgeFactor(form.AgeFactor)) {
	   //if (validateYRofServices(form.YRofService)){
            	///6-27-2018 //if (validateYRAverageSalary(form.YRAverageSalary)) {
					if (validateisYearyssd(form.yssd)){
						if (validateisYear(form.yb)){
							if (validateisYearyp(form.yp)){
								if (validateisYearybBeny(form.ybBeny)){
									if (validateChkBox(form.checkboxAgree)){
									return true;
								}//if (checkAll(form.checkboxAgree))
							} //if (validateisYearybBeny(form.ybBeny))
						}//if (validateisYear(form.yp))
					}//if (validateisYearyb(form.yb))
				  }//if (validateisYearyssd(form.yssd))
    	       ///6-27-2018 }//if (validateYRAverageSalary(form.YRAverageSalary))
		//}// if (validateYRofServices(form.YRofService)){
    }//if (validateAgeFactor(form.AgeFactor))
    return false;
}// function checkForm(form)
// End of retirement estimator scripts

/**
var gAutoPrint = true; // Flag for whether or not to automatically call the print function
function printFriendly(oDivObject)
{
	if (document.getElementById != null)
	{
		var html = '<HTML>\n<HEAD>\n';

		if (document.getElementsByTagName != null)
		{
			var headTags = document.getElementsByTagName("head");
			if (headTags.length > 0)
				html += headTags[0].innerHTML;
		}
		
		html += '\n</HE' + 'AD>\n<BODY>\n';
		
		var printPageElem = document.getElementById("oDivObject");
		
		if (printPageElem != null)
		{
				html += printPageElem.innerHTML;
		}
		else
		{
			alert("Could not find the printReady section in the HTML");
			return;
		}
			
		html += '\n</BO' + 'DY>\n</HT' + 'ML>';
		
		var printWin = window.open("","printFriendly");
		printWin.document.open();
		printWin.document.write(html);
		printWin.document.close();
		if (gAutoPrint)
			printWin.print();
	}
	else
	{
		alert("Sorry, the printer friendly feature works\nonly in javascript enabled browsers.");
	}	
}

*/


/*
* Â© 2018 Treasury Computer Services All Rights Reserved
* Update Date: 5/30/2017 for the new law changes* 
* Last modified date: 4/11/2018k
* Author: WJL* 
* The javscript has been tested on the following OS.
* SUSE Linux 10.1  
*  Browser: Konqueror Version 3.5.1 (Using KDE 3.5.1 level "a")
*  Browser: Mozilla Firefox Version 1.5.0.3
*  Windows 2000, XP pro
*  Browser: IE Version 6.0, 7.0
*  Browser: Mozilla Firefox Version 1.5, 2.0.0.1
*  Browser: Opera Version 9.02
*
*/
//done hiding from old browsers -->


